#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ Railway
"""

import os
import sys
import logging
import subprocess
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_railway_cli():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Railway CLI"""
    try:
        result = subprocess.run(['railway', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info(f"‚úÖ Railway CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            logger.error("‚ùå Railway CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        logger.error("‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_railway_project():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É Railway"""
    try:
        result = subprocess.run(['railway', 'status'], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway –ø—Ä–æ–µ–∫—Ç—É —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–°—Ç–∞—Ç—É—Å: {result.stdout.strip()}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway: {result.stderr}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Railway –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False

def update_database_psycopg2():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç database_psycopg2.py —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    logger.info("üîß –û–±–Ω–æ–≤–ª—è–µ–º database_psycopg2.py...")
    
    try:
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open('database_psycopg2.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        with open('enhanced_active_effects_functions.py', 'r', encoding='utf-8') as f:
            enhanced_functions = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ main)
        lines = enhanced_functions.split('\n')
        function_lines = []
        in_function = False
        
        for line in lines:
            if line.startswith('def ') and not line.startswith('def main'):
                in_function = True
                function_lines.append(line)
            elif in_function:
                if line.startswith('def ') and line.startswith('def main'):
                    break
                function_lines.append(line)
        
        enhanced_functions_code = '\n'.join(function_lines)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ active_effects)
        insert_marker = "def cleanup_expired_effects() -> int:"
        insert_position = content.find(insert_marker)
        
        if insert_position == -1:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        end_marker = "        return 0"
        end_position = content.find(end_marker, insert_position) + len(end_marker)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        new_content = (
            content[:end_position] + 
            "\n\n# ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ö–¢–ò–í–ù–´–• –≠–§–§–ï–ö–¢–û–í =====\n\n" +
            enhanced_functions_code + 
            "\n\n# ===== –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô =====\n" +
            content[end_position:]
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('database_psycopg2.py', 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        logger.info("‚úÖ database_psycopg2.py –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è database_psycopg2.py: {e}")
        return False

def create_railway_startup_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Railway —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ë–î"""
    
    startup_script = '''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Railway —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

echo "üöÄ –ó–∞–ø—É—Å–∫ Forest Mafia Bot —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
python3 -c "
import sys
sys.path.append('.')
try:
    from database_psycopg2 import get_database_connection
    conn = get_database_connection()
    if conn:
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')
        conn.close()
    else:
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î')
        sys.exit(1)
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}')
    sys.exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã active_effects
echo "üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã active_effects..."
python3 -c "
import sys
sys.path.append('.')
try:
    from improve_active_effects_table import improve_active_effects_table
    if improve_active_effects_table():
        print('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã')
except Exception as e:
    print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}')
"

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
echo "ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Forest Mafia Bot..."
python3 bot.py
'''
    
    try:
        with open('railway_startup.sh', 'w', encoding='utf-8') as f:
            f.write(startup_script)
        
        # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod('railway_startup.sh', 0o755)
        
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ railway_startup.sh")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def create_railway_json():
    """–°–æ–∑–¥–∞–µ—Ç railway.json —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    railway_config = {
        "$schema": "https://railway.app/railway.schema.json",
        "build": {
            "builder": "NIXPACKS"
        },
        "deploy": {
            "startCommand": "bash railway_startup.sh",
            "restartPolicyType": "ON_FAILURE",
            "restartPolicyMaxRetries": 3
        }
    }
    
    try:
        import json
        with open('railway.json', 'w', encoding='utf-8') as f:
            json.dump(railway_config, f, indent=2, ensure_ascii=False)
        
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω railway.json —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è railway.json: {e}")
        return False

def update_requirements():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç requirements.txt –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt...")
    
    try:
        with open('requirements.txt', 'r', encoding='utf-8') as f:
            requirements = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        required_packages = [
            'psycopg2-binary',
            'python-telegram-bot',
            'python-dotenv'
        ]
        
        missing_packages = []
        for package in required_packages:
            if package not in requirements:
                missing_packages.append(package)
        
        if missing_packages:
            logger.info(f"üì¶ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {missing_packages}")
            with open('requirements.txt', 'a', encoding='utf-8') as f:
                f.write('\n# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤\n')
                for package in missing_packages:
                    f.write(f'{package}\n')
            logger.info("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt: {e}")
        return False

def deploy_to_railway():
    """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Railway"""
    logger.info("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Railway...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ git
        subprocess.run(['git', 'add', '.'], check=True)
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        commit_message = f"üöÄ Railway: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        
        # –ü—É—à–∏–º –≤ Railway
        subprocess.run(['git', 'push', 'origin', 'master'], check=True)
        
        logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –≤ Railway")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Railway: {e}")
        return False

def create_railway_environment_setup():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway"""
    
    env_setup = '''#!/bin/bash
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    exit 1
fi

if [ -z "$BOT_TOKEN" ]; then
    echo "‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
echo "üìä DATABASE_URL: ${DATABASE_URL:0:20}..."
echo "ü§ñ BOT_TOKEN: ${BOT_TOKEN:0:10}..."

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª database_url.txt –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
echo "$DATABASE_URL" > database_url.txt

echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
'''
    
    try:
        with open('railway_env_setup.sh', 'w', encoding='utf-8') as f:
            f.write(env_setup)
        
        os.chmod('railway_env_setup.sh', 0o755)
        
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è railway_env_setup.sh")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ Railway...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway CLI
    if not check_railway_cli():
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Railway CLI: https://docs.railway.app/develop/cli")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É
    if not check_railway_project():
        logger.error("‚ùå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ Railway –ø—Ä–æ–µ–∫—Ç—É: railway login && railway link")
        return False
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º database_psycopg2.py
    if not update_database_psycopg2():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å database_psycopg2.py")
        return False
    
    # 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    if not create_railway_startup_script():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞")
        return False
    
    # 5. –°–æ–∑–¥–∞–µ–º railway.json
    if not create_railway_json():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å railway.json")
        return False
    
    # 6. –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
    if not update_requirements():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å requirements.txt")
        return False
    
    # 7. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not create_railway_environment_setup():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # 8. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –≤ Railway
    if not deploy_to_railway():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ Railway")
        return False
    
    logger.info("\nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("\nüìù –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    logger.info("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω database_psycopg2.py —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    logger.info("‚Ä¢ –°–æ–∑–¥–∞–Ω railway_startup.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î")
    logger.info("‚Ä¢ –°–æ–∑–¥–∞–Ω railway.json —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    logger.info("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω requirements.txt")
    logger.info("‚Ä¢ –°–æ–∑–¥–∞–Ω railway_env_setup.sh –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    logger.info("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –≤ Railway")
    
    logger.info("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    logger.info("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Railway Dashboard")
    logger.info("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    logger.info("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
