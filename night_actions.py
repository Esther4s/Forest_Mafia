import random
import logging
from typing import Dict, List, Optional
from game_logic import Game, Player, Role, Team
from mole_logic import Mole
from fox_logic import Fox
from beaver_logic import Beaver

logger = logging.getLogger(__name__)

class NightActions:
    def __init__(self, game: Game):
        self.game = game
        self.wolf_targets = {}  # user_id -> target_user_id
        self.fox_targets = {}   # user_id -> target_user_id
        self.beaver_targets = {} # user_id -> target_user_id
        self.mole_targets = {}  # user_id -> target_user_id
        self.skipped_actions = set()  # user_id –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥
    
    def get_display_name(self, user_id: int, username: str = None, first_name: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–∏–∫–Ω–µ–π–º > username > first_name)"""
        try:
            from database_psycopg2 import get_user_nickname
            nickname = get_user_nickname(user_id)
            if nickname:
                return nickname
            elif username and not username.isdigit():
                return f"@{username}"
            elif first_name:
                return first_name
            else:
                return f"ID:{user_id}"
        except Exception as e:
            if username and not username.isdigit():
                return f"@{username}"
            elif first_name:
                return first_name
            else:
                return f"ID:{user_id}"
    
    def set_wolf_target(self, wolf_id: int, target_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –≤–æ–ª–∫–∞"""
        wolf = self.game.players.get(wolf_id)
        target = self.game.players.get(target_id)
        
        if not wolf or not target:
            return False
        
        if wolf.role != Role.WOLF or not wolf.is_alive:
            return False
        
        if not target.is_alive:
            return False
        
        # –í–æ–ª–∫–∏ –Ω–µ –º–æ–≥—É—Ç –µ—Å—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞
        if target.role == Role.WOLF:
            return False
        
        # –í–æ–ª–∫–∏ –º–æ–≥—É—Ç –µ—Å—Ç—å –ª–∏—Å—É (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º)
        # if target.role == Role.FOX:
        #     return False
        
        self.wolf_targets[wolf_id] = target_id
        return True
    
    def set_fox_target(self, fox_id: int, target_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –ª–∏—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏"""
        fox = self.game.players.get(fox_id)
        target = self.game.players.get(target_id)
        
        if not fox or not target:
            return False
        
        if fox.role != Role.FOX or not fox.is_alive:
            return False
        
        if not target.is_alive:
            return False
        
        # –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –±–æ–±—Ä–∞ (–æ–Ω –∑–∞—â–∏—â–µ–Ω –æ—Ç –ª–∏—Å—ã)
        if target.role == Role.BEAVER:
            return False
        
        # –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –≤–æ–ª–∫–æ–≤ (—Å–æ—é–∑–Ω–∏–∫–∏)
        if target.role == Role.WOLF:
            return False
        
        # –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –ª–∏—Å—ã
        if target.role == Role.FOX:
            return False
        
        self.fox_targets[fox_id] = target_id
        return True
    
    def set_beaver_target(self, beaver_id: int, target_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –±–æ–±—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏"""
        beaver = self.game.players.get(beaver_id)
        target = self.game.players.get(target_id)
        
        if not beaver or not target:
            return False
        
        if beaver.role != Role.BEAVER or not beaver.is_alive:
            return False
        
        if not target.is_alive:
            return False
        
        # –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–º, —É –∫–æ–≥–æ —É–∫—Ä–∞–ª–∏ –µ–¥—É
        if getattr(target, 'stolen_supplies', 0) == 0:
            return False
        
        self.beaver_targets[beaver_id] = target_id
        return True
    
    def set_mole_target(self, mole_id: int, target_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –∫—Ä–æ—Ç–∞"""
        mole = self.game.players.get(mole_id)
        target = self.game.players.get(target_id)
        
        if not mole or not target:
            return False
        
        if mole.role != Role.MOLE or not mole.is_alive:
            return False
        
        if not target.is_alive:
            return False
        
        # –ö—Ä–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–µ–±—è
        if mole_id == target_id:
            return False
        
        self.mole_targets[mole_id] = target_id
        return True
    
    def skip_action(self, player_id: int) -> bool:
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
        player = self.game.players.get(player_id)
        if not player or not player.is_alive:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å—Ç–∏–≤—à–∏—Ö
        self.skipped_actions.add(player_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ —Ü–µ–ª–µ–π (–µ—Å–ª–∏ –±—ã–ª)
        self.wolf_targets.pop(player_id, None)
        self.fox_targets.pop(player_id, None)
        self.beaver_targets.pop(player_id, None)
        self.mole_targets.pop(player_id, None)
        
        return True
    
    def process_all_actions(self) -> Dict[str, List[str]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        results = {
            "wolves": [],
            "fox": [],
            "beaver": [],
            "mole": [],
            "deaths": []
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É: –í–æ–ª–∫–∏ -> –õ–∏—Å–∞ -> –ë–æ–±—ë—Ä -> –ö—Ä–æ—Ç
        
        # 1. –í–æ–ª–∫–∏ –µ–¥—è—Ç
        if self.game.current_round > 1:  # –í –ø–µ—Ä–≤—É—é –Ω–æ—á—å –≤–æ–ª–∫–∏ –Ω–µ –µ–¥—è—Ç
            results["wolves"] = self._process_wolf_actions()
        
        # 2. –õ–∏—Å–∞ –≤–æ—Ä—É–µ—Ç
        results["fox"] = self._process_fox_actions()
        
        # 3. –ë–æ–±—ë—Ä –ø–æ–º–æ–≥–∞–µ—Ç
        results["beaver"] = self._process_beaver_actions()
        
        # 4. –ö—Ä–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        results["mole"] = self._process_mole_actions()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç–∏ –æ—Ç –∫—Ä–∞–∂–∏ –ª–∏—Å—ã
        results["deaths"] = self._check_fox_deaths()
        
        return results
    
    def _process_wolf_actions(self) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–ª–∫–æ–≤"""
        results = []
        
        if not self.wolf_targets:
            logger.warning("‚ö†Ô∏è –£ –≤–æ–ª–∫–æ–≤ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏")
            return results
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –∑–∞ –∫–∞–∂–¥—É—é —Ü–µ–ª—å
        target_votes = {}
        for target_id in self.wolf_targets.values():
            target_votes[target_id] = target_votes.get(target_id, 0) + 1
        
        # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª—å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        if target_votes:
            max_votes = max(target_votes.values())
            max_vote_targets = [tid for tid, votes in target_votes.items() if votes == max_votes]
            
            # –ï—Å–ª–∏ –Ω–∏—á—å—è, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
            if len(max_vote_targets) > 1:
                target_id = random.choice(max_vote_targets)
            else:
                target_id = max_vote_targets[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –≤–æ–ª–∫–æ–≤
            target = self.game.players[target_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –≤–æ–ª–∫–æ–≤
            from item_effects import check_wolf_protection_effect
            is_protected = check_wolf_protection_effect(target_id)
            
            if is_protected:
                # –¶–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞, –Ω–µ —É–±–∏–≤–∞–µ–º
                results.append(f"üõ°Ô∏è {self.get_display_name(target_id, target.username, target.first_name)} –±—ã–ª –∑–∞—â–∏—â–µ–Ω –æ—Ç –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–æ–≤!")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–±–∏–π—Å—Ç–≤–æ–º
                from item_effects import check_resurrection_effect
                has_resurrection = check_resurrection_effect(target_id)
                
                if has_resurrection:
                    # –ò–≥—Ä–æ–∫ –≤–æ—Å–∫—Ä–µ—à–∞–µ—Ç—Å—è, –Ω–µ —É–±–∏–≤–∞–µ–º
                    results.append(f"üçÑ {self.get_display_name(target_id, target.username, target.first_name)} –±—ã–ª –≤–æ—Å–∫—Ä–µ—à–µ–Ω —ç–ª–∏–∫—Å–∏—Ä–æ–º!")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏–∑–Ω–∏
                    if target.use_extra_life():
                        # –ò–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å
                        results.append(f"üå≤ {self.get_display_name(target_id, target.username, target.first_name)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å!")
                    else:
                        # –£–±–∏–≤–∞–µ–º —Ü–µ–ª—å
                        target.is_alive = False
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        self.game.game_stats.predator_kills += 1
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —É–±–∏—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            target.consecutive_nights_survived = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
            from role_translator import get_role_name_russian
            role_name = get_role_name_russian(target.role)
            results.append(f"üê∫ –í–æ–ª–∫–∏ —Å—ä–µ–ª–∏ {target.username} ({role_name})!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–±–∏—Ç–æ–º –∏–≥—Ä–æ–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–°
            self.game.last_wolf_victim = {
                'user_id': target.user_id,
                'username': target.username,
                'role': target.role,
                'role_name': role_name
            }
        
        return results
    
    def _process_fox_actions(self) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏"""
        results = []
        
        for fox_id, target_id in self.fox_targets.items():
            fox = self.game.players[fox_id]
            target = self.game.players[target_id]
            
            if fox and target and fox.is_alive:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Å—ã
                fox.last_action_round = self.game.current_round
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—â–∏—â—ë–Ω –ª–∏ –∏–≥—Ä–æ–∫ –±–æ–±—Ä–æ–º
                beaver_protection = Beaver.is_protected_from_fox(target)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≤–æ—Ä–æ–≤—Å—Ç–≤–∞ –ª–∏—Å—ã
                message, success, death = Fox.steal(target, beaver_protection)
                results.append(message)
                
                if success:
                    self.game.game_stats.fox_thefts += 1
                
                if death:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ—Ä—Ç–µ–π
                    if target.team == Team.HERBIVORES:
                        self.game.game_stats.herbivore_survivals += 1
                    self.game.game_stats.predator_kills += 1
        
        return results
    
    def _process_beaver_actions(self) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –±–æ–±—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏"""
        results = []
        
        for beaver_id, target_id in self.beaver_targets.items():
            beaver = self.game.players[beaver_id]
            target = self.game.players[target_id]
            
            if beaver and beaver.is_alive:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–±—Ä–∞
                beaver.last_action_round = self.game.current_round
                
                if target and target.is_alive:
                    # –ë–æ–±—ë—Ä –∑–∞—â–∏—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                    Beaver.set_protection(target, True)
                    self.game.game_stats.beaver_protections += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ–±—ë—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ø–∞—Å—ã
                    if Beaver.can_restore_supplies(target):
                        restore_message, restore_success = Beaver.restore_supplies(target)
                        if restore_success:
                            results.append(restore_message)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç
                            message = Beaver.defend(target)
                            results.append(message)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç
                        message = Beaver.defend(target)
                        results.append(message)
                else:
                    # –ë–æ–±—ë—Ä –∑–∞—â–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–±—è
                    message = Beaver.defend(None)
                    results.append(message)
        
        return results
    
    def _process_mole_actions(self) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫—Ä–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏"""
        results = []
        
        for mole_id, target_id in self.mole_targets.items():
            mole = self.game.players[mole_id]
            target = self.game.players[target_id]
            
            if mole and target and mole.is_alive:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∫—Ä–æ—Ç–∞
                mole.last_action_round = self.game.current_round

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞
                from item_effects import check_mole_protection_effect
                is_protected = check_mole_protection_effect(target_id)
                
                if is_protected:
                    # –¶–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞
                    check_result = f"üåø {self.get_display_name(target_id, target.username, target.first_name)} —Å–∫—Ä—ã—Ç –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞!"
                    results.append(check_result)
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞
                    check_result = Mole.check_player(target, self.game.current_round)
                    results.append(check_result)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–° —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—Ä–æ—Ç –∂–∏–≤
                if mole.is_alive:
                    self.game.last_mole_check = {
                        'mole_id': mole_id,
                        'mole_username': mole.username,
                        'target_id': target_id,
                        'target_username': target.username,
                        'target_role': target.role,
                        'check_result': check_result
                    }
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–æ—Ç–∞ {mole_id} (–∂–∏–≤)")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö—Ä–æ—Ç {mole_id} –º–µ—Ä—Ç–≤, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        
        return results
    
    def _check_fox_deaths(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–º–µ—Ä—Ç–∏ –æ—Ç –∫—Ä–∞–∂–∏ –ª–∏—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏"""
        deaths = []
        
        for player in self.game.players.values():
            if player.is_alive and player.is_fox_stolen >= 2 and not player.is_beaver_protected:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–º–µ—Ä—Ç—å—é
                from item_effects import check_resurrection_effect
                has_resurrection = check_resurrection_effect(player.user_id)
                
                display_name = self.get_display_name(player.user_id, player.username, None)
                
                if has_resurrection:
                    # –ò–≥—Ä–æ–∫ –≤–æ—Å–∫—Ä–µ—à–∞–µ—Ç—Å—è, –Ω–µ —É–±–∏–≤–∞–µ–º
                    deaths.append(f"üçÑ {display_name} –±—ã–ª –≤–æ—Å–∫—Ä–µ—à–µ–Ω —ç–ª–∏–∫—Å–∏—Ä–æ–º!")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏–∑–Ω–∏
                    if player.use_extra_life():
                        # –ò–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å
                        deaths.append(f"üå≤ {display_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å!")
                    else:
                        player.is_alive = False
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–∂–∏–≤–∞–Ω–∏—è
                        player.consecutive_nights_survived = 0
                        
                        deaths.append(f"ü¶ä {display_name} —É—à–µ–ª –∂–∏—Ç—å –≤ —Å–æ—Å–µ–¥–Ω–∏–π –ª–µ—Å –∏–∑-–∑–∞ –∫—Ä–∞–∂–∏ –∑–∞–ø–∞—Å–æ–≤!")
        
        return deaths
    
    def get_player_actions(self, player_id: int) -> Dict[str, any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
        player = self.game.players.get(player_id)
        if not player or not player.is_alive:
            return {}
        
        actions = {}
        
        if player.role == Role.WOLF:
            # –í–æ–ª–∫ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –¥–ª—è –µ–¥—ã
            alive_targets = [p for p in self.game.get_alive_players() 
                           if p.role not in [Role.WOLF, Role.FOX]]
            actions["type"] = "wolf"
            actions["targets"] = alive_targets
            actions["current_target"] = self.wolf_targets.get(player_id)
            actions["description"] = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É –¥–ª—è –æ—Ö–æ—Ç—ã"
        
        elif player.role == Role.FOX:
            # –õ–∏—Å–∞ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –¥–ª—è –∫—Ä–∞–∂–∏ (–∫—Ä–æ–º–µ –±–æ–±—Ä–∞, –≤–æ–ª–∫–æ–≤ –∏ –ª–∏—Å)
            alive_targets = [p for p in self.game.get_alive_players() 
                           if p.role not in [Role.BEAVER, Role.WOLF, Role.FOX]]
            actions["type"] = "fox"
            actions["targets"] = alive_targets
            actions["current_target"] = self.fox_targets.get(player_id)
            actions["description"] = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É –¥–ª—è –∫—Ä–∞–∂–∏ –∑–∞–ø–∞—Å–æ–≤ (–±–æ–±—ë—Ä –∑–∞—â–∏—â–µ–Ω)"
        
        elif player.role == Role.BEAVER:
            # –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤—Å–µ–º, —É –∫–æ–≥–æ —É–∫—Ä–∞–ª–∏ –µ–¥—É (–Ω–µ –∑–Ω–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã)
            stolen_targets = [p for p in self.game.get_alive_players() 
                            if p.is_fox_stolen > 0]
            actions["type"] = "beaver"
            actions["targets"] = stolen_targets
            actions["current_target"] = self.beaver_targets.get(player_id)
            actions["description"] = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –∑–∞—â–∏—Ç–∏—Ç—å –æ—Ç –ª–∏—Å—ã"
        
        elif player.role == Role.MOLE:
            # –ö—Ä–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—é–±–æ–≥–æ –∂–∏–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            alive_targets = [p for p in self.game.get_alive_players() if p.user_id != player_id]
            actions["type"] = "mole"
            actions["targets"] = alive_targets
            actions["current_target"] = self.mole_targets.get(player_id)
            actions["description"] = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
        
        elif player.role == Role.HARE:
            # –ó–∞—è—Ü –Ω–µ –∏–º–µ–µ—Ç –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            actions["type"] = "hare"
            actions["description"] = "–ó–∞—è—Ü —Å–ø–∏—Ç –∏ –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è —Å–∏–ª"
        
        return actions
    
    def clear_actions(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        self.wolf_targets.clear()
        self.fox_targets.clear()
        self.beaver_targets.clear()
        self.mole_targets.clear()
        self.skipped_actions.clear()
    
    def are_all_actions_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        alive_players = [p for p in self.game.players.values() if p.is_alive]
        
        for player in alive_players:
            if player.role == Role.WOLF:
                # –í–æ–ª–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                if player.user_id not in self.wolf_targets and player.user_id not in self.skipped_actions:
                    return False
            elif player.role == Role.FOX:
                # –õ–∏—Å–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                if player.user_id not in self.fox_targets and player.user_id not in self.skipped_actions:
                    return False
            elif player.role == Role.BEAVER:
                # –ë–æ–±–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                if player.user_id not in self.beaver_targets and player.user_id not in self.skipped_actions:
                    return False
            elif player.role == Role.MOLE:
                # –ö—Ä–æ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                if player.user_id not in self.mole_targets and player.user_id not in self.skipped_actions:
                    return False
            elif player.role == Role.HARE:
                # –ó–∞–π—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç —Ö–æ–¥ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏–π)
                pass
        
        return True
    
    def get_action_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        summary = []
        
        if self.wolf_targets:
            wolf_count = len(self.wolf_targets)
            summary.append(f"üê∫ {wolf_count} –≤–æ–ª–∫(–æ–≤) –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª–∏")
        
        if self.fox_targets:
            fox_count = len(self.fox_targets)
            summary.append(f"ü¶ä {fox_count} –ª–∏—Å–∞(—ã) –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –∫—Ä–∞–∂–µ")
        
        if self.beaver_targets:
            beaver_count = len(self.beaver_targets)
            summary.append(f"ü¶¶ {beaver_count} –±–æ–±—ë—Ä(–æ–≤) –≥–æ—Ç–æ–≤—è—Ç—Å—è –ø–æ–º–æ—á—å")
        
        if self.mole_targets:
            mole_count = len(self.mole_targets)
            summary.append(f"ü¶´ {mole_count} –∫—Ä–æ—Ç(–æ–≤) —Ä–æ—é—Ç –Ω–æ—Ä–∫–∏")
        
        if not summary:
            summary.append("üåô –í—Å–µ —Å–ø—è—Ç —Å–ø–æ–∫–æ–π–Ω–æ")
        
        return " | ".join(summary)
