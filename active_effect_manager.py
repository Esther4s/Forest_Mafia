#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple, Any
from database_psycopg2 import (
    add_enhanced_active_effect,
    get_enhanced_active_effects,
    trigger_effect,
    mark_effect_as_used,
    expire_effect,
    cleanup_expired_effects,
    get_effect_statistics
)

logger = logging.getLogger(__name__)

class ActiveEffectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.effect_types = {
            'consumable': '–†–∞—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç',
            'boost': '–£—Å–∏–ª–µ–Ω–∏–µ',
            'permanent': '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç',
            'temporary': '–í—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç'
        }
        
        self.trigger_types = {
            'item_use': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞',
            'game_start': '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã',
            'game_end': '–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã',
            'night_phase': '–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞',
            'day_phase': '–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞',
            'round_start': '–ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞',
            'round_end': '–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞',
            'player_death': '–°–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞',
            'manual': '–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
        }
    
    def add_item_effect(
        self,
        user_id: int,
        item_name: str,
        effect_type: str,
        effect_data: dict = None,
        game_id: str = None,
        chat_id: int = None,
        duration_rounds: int = 1,
        remaining_uses: int = 1,
        trigger_conditions: dict = None
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            item_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            effect_type: –¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
            effect_data: –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            game_id: ID –∏–≥—Ä—ã
            chat_id: ID —á–∞—Ç–∞
            duration_rounds: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞—É–Ω–¥–∞—Ö
            remaining_uses: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            trigger_conditions: –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expires_at = None
            if duration_rounds > 0:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ = 1 —á–∞—Å
                expires_at = (datetime.now() + timedelta(hours=duration_rounds)).isoformat()
            
            success = add_enhanced_active_effect(
                user_id=user_id,
                item_name=item_name,
                effect_type=effect_type,
                effect_data=effect_data,
                game_id=game_id,
                chat_id=chat_id,
                expires_at=expires_at,
                duration_rounds=duration_rounds,
                remaining_uses=remaining_uses,
                triggered_by='item_use',
                trigger_conditions=trigger_conditions,
                auto_remove=True
            )
            
            if success:
                logger.info(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç {item_name} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ {item_name}: {e}")
            return False
    
    def get_user_effects(
        self,
        user_id: int,
        game_id: str = None,
        chat_id: int = None,
        status: str = 'active'
    ) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game_id: ID –∏–≥—Ä—ã
            chat_id: ID —á–∞—Ç–∞
            status: –°—Ç–∞—Ç—É—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        try:
            return get_enhanced_active_effects(
                user_id=user_id,
                game_id=game_id,
                chat_id=chat_id,
                status=status
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    def trigger_effects_for_event(
        self,
        user_id: int,
        event_type: str,
        event_data: dict = None,
        game_id: str = None
    ) -> List[Dict]:
        """
        –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            game_id: ID –∏–≥—Ä—ã
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            effects = self.get_user_effects(user_id, game_id=game_id)
            
            triggered_effects = []
            
            for effect in effects:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                if self._should_trigger_effect(effect, event_type, event_data):
                    # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                    success = trigger_effect(
                        effect_id=effect['id'],
                        triggered_by=event_type,
                        trigger_data=event_data
                    )
                    
                    if success:
                        triggered_effects.append(effect)
                        logger.info(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç {effect['item_name']} —Å—Ä–∞–±–æ—Ç–∞–ª –æ—Ç {event_type}")
            
            return triggered_effects
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
            return []
    
    def _should_trigger_effect(self, effect: Dict, event_type: str, event_data: dict = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        
        Args:
            effect: –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: –î–æ–ª–∂–µ–Ω –ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if effect['effect_status'] != 'active' or effect['remaining_uses'] <= 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            trigger_conditions = effect.get('trigger_conditions', {})
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            if not trigger_conditions:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            if 'event_types' in trigger_conditions:
                if event_type not in trigger_conditions['event_types']:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if 'game_phase' in trigger_conditions and event_data:
                if event_data.get('game_phase') != trigger_conditions['game_phase']:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            if 'min_players' in trigger_conditions and event_data:
                if event_data.get('player_count', 0) < trigger_conditions['min_players']:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {e}")
            return False
    
    def cleanup_expired_effects(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        try:
            return cleanup_expired_effects()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return 0
    
    def get_effect_statistics(self, user_id: int = None, game_id: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game_id: ID –∏–≥—Ä—ã
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        try:
            return get_effect_statistics(user_id=user_id, game_id=game_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return {}
    
    def format_effect_info(self, effect: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            effect: –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        try:
            info = f"üéØ **{effect['item_name']}**
"
            info += f"üìä –¢–∏–ø: {self.effect_types.get(effect['effect_type'], effect['effect_type'])}
"
            info += f"üìà –°—Ç–∞—Ç—É—Å: {effect['effect_status']}
"
            info += f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {effect['remaining_uses']}
"
            
            if effect.get('used_at'):
                info += f"‚è∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {effect['used_at']}
"
            
            if effect.get('expires_at'):
                info += f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {effect['expires_at']}
"
            
            if effect.get('triggered_by'):
                info += f"üé™ –°—Ä–∞–±–æ—Ç–∞–ª –æ—Ç: {self.trigger_types.get(effect['triggered_by'], effect['triggered_by'])}
"
            
            return info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
effect_manager = ActiveEffectManager()
