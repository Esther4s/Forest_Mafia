#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±–µ–∑ –ë–î
"""

import asyncio
import logging
import sys
import os
import unittest
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime, timedelta
import json
import time
import random

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['BOT_TOKEN'] = 'test_token_123456789'
os.environ['DATABASE_URL'] = 'sqlite:///test_forest_mafia.db'

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from config import Config, BOT_TOKEN, DATABASE_URL, MIN_PLAYERS, MAX_PLAYERS
from game_logic import Game, GamePhase, Role, Team, Player
from night_actions import NightActions
from night_interface import NightInterface
from global_settings import GlobalSettings
from forest_mafia_settings import ForestWolvesSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TestConfigSystem(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_config_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config = Config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.assertIsNotNone(config.bot_token)
        self.assertIsNotNone(config.database_url)
        self.assertIsInstance(config.min_players, int)
        self.assertIsInstance(config.max_players, int)
        
        print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {config.bot_token[:10]}...")
        print(f"‚úÖ URL –ë–î: {config.database_url}")
        print(f"‚úÖ –ú–∏–Ω. –∏–≥—Ä–æ–∫–æ–≤: {config.min_players}")
        print(f"‚úÖ –ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤: {config.max_players}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = config.get_game_settings()
        self.assertIn('min_players', settings)
        self.assertIn('max_players', settings)
        self.assertIn('night_duration', settings)
        self.assertIn('day_duration', settings)
        self.assertIn('voting_duration', settings)
        self.assertIn('role_distribution', settings)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_role_distribution(self):
        """–¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π...")
        
        config = Config()
        distribution = config.role_distribution
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        expected_roles = ['wolves', 'fox', 'hares', 'mole', 'beaver']
        for role in expected_roles:
            self.assertIn(role, distribution)
            self.assertGreater(distribution[role], 0)
            self.assertLessEqual(distribution[role], 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ 1.0
        total = sum(distribution.values())
        self.assertAlmostEqual(total, 1.0, places=2)
        
        print(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: {distribution}")
        print(f"‚úÖ –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {total:.2f}")
        print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


class TestGameLogic(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.game = Game(chat_id=12345)
    
    def test_game_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã...")
        
        self.assertEqual(self.game.chat_id, 12345)
        self.assertEqual(self.game.phase, GamePhase.WAITING)
        self.assertEqual(len(self.game.players), 0)
        self.assertIsNone(self.game.day_number)
        
        print("‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_player_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        players_data = [
            (1, "wolf1"), (2, "wolf2"), (3, "fox"),
            (4, "hare1"), (5, "hare2"), (6, "mole"), (7, "beaver")
        ]
        
        for user_id, username in players_data:
            result = self.game.add_player(user_id, username)
            self.assertTrue(result)
            print(f"‚úÖ –ò–≥—Ä–æ–∫ {username} –¥–æ–±–∞–≤–ª–µ–Ω")
        
        self.assertEqual(len(self.game.players), 7)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        result = self.game.remove_player(1)
        self.assertTrue(result)
        self.assertEqual(len(self.game.players), 6)
        print("‚úÖ –ò–≥—Ä–æ–∫ wolf1 —É–¥–∞–ª—ë–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        alive_players = self.game.get_alive_players()
        self.assertEqual(len(alive_players), 6)
        print(f"‚úÖ –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(alive_players)}")
        
        print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_game_start(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        for i in range(6):
            self.game.add_player(i, f"player_{i}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        result = self.game.start_game()
        self.assertTrue(result)
        self.assertEqual(self.game.phase, GamePhase.NIGHT)
        self.assertEqual(self.game.day_number, 1)
        
        print("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –§–∞–∑–∞: {self.game.phase.value}")
        print(f"‚úÖ –î–µ–Ω—å: {self.game.day_number}")
        
        print("‚úÖ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_voting_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        for i in range(6):
            self.game.add_player(i, f"player_{i}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        self.game.start_game()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        self.game.phase = GamePhase.VOTING
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        votes = [
            (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 0)
        ]
        
        for voter_id, target_id in votes:
            success = self.game.vote(voter_id, target_id)
            self.assertTrue(success)
            print(f"‚úÖ –ì–æ–ª–æ—Å {voter_id} -> {target_id}: {success}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        vote_counts, skip_votes = self.game._count_votes()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {vote_counts}")
        print(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤: {skip_votes}")
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_game_end_conditions(self):
        """–¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        for i in range(6):
            self.game.add_player(i, f"player_{i}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        self.game.start_game()
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞
        game_end = self.game.check_game_end()
        self.assertFalse(game_end)
        print("‚úÖ –ò–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        # –£–±–∏–≤–∞–µ–º –≤—Å–µ—Ö –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ
        for player in self.game.players.values():
            if player.user_id != 0:
                player.is_alive = False
        
        # –¢–µ–ø–µ—Ä—å –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫–æ–Ω—á–µ–Ω–∞
        winner = self.game.check_game_end()
        self.assertIsNotNone(winner)
        print(f"‚úÖ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.value}")
        
        print("‚úÖ –£—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


class TestNightActions(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.game = Game(chat_id=12345)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        players_data = [
            (1, "wolf1"), (2, "wolf2"), (3, "fox"),
            (4, "hare1"), (5, "hare2"), (6, "mole"), (7, "beaver")
        ]
        
        for user_id, username in players_data:
            self.game.add_player(user_id, username)
        
        self.game.start_game()
        self.night_actions = NightActions(self.game)
    
    def test_wolf_actions(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤–æ–ª–∫–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ–ª–∫–æ–≤...")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.game.players[1].role = Role.WOLF
        self.game.players[1].team = Team.PREDATORS
        self.game.players[2].role = Role.WOLF
        self.game.players[2].team = Team.PREDATORS
        self.game.players[3].role = Role.FOX
        self.game.players[3].team = Team.PREDATORS
        self.game.players[4].role = Role.HARE
        self.game.players[4].team = Team.HERBIVORES
        
        # –í–æ–ª–∫ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
        can_attack_hare = self.night_actions.set_wolf_target(1, 4)
        self.assertTrue(can_attack_hare)
        print("‚úÖ –í–æ–ª–∫ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∑–∞–π—Ü–∞")
        
        # –í–æ–ª–∫ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤–æ–ª–∫–∞
        can_attack_wolf = self.night_actions.set_wolf_target(1, 2)
        self.assertFalse(can_attack_wolf)
        print("‚úÖ –í–æ–ª–∫ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤–æ–ª–∫–∞")
        
        # –í–æ–ª–∫ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ª–∏—Å—É
        can_attack_fox = self.night_actions.set_wolf_target(1, 3)
        self.assertFalse(can_attack_fox)
        print("‚úÖ –í–æ–ª–∫ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ª–∏—Å—É")
        
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏—è –≤–æ–ª–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_fox_actions(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –ª–∏—Å—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ª–∏—Å—ã...")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.game.players[3].role = Role.FOX
        self.game.players[3].team = Team.PREDATORS
        self.game.players[4].role = Role.HARE
        self.game.players[4].team = Team.HERBIVORES
        self.game.players[6].role = Role.MOLE
        self.game.players[6].team = Team.HERBIVORES
        self.game.players[7].role = Role.BEAVER
        self.game.players[7].team = Team.HERBIVORES
        self.game.players[1].role = Role.WOLF
        self.game.players[1].team = Team.PREDATORS
        
        # –õ–∏—Å–∞ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
        can_steal_hare = self.night_actions.set_fox_target(3, 4)
        self.assertTrue(can_steal_hare)
        print("‚úÖ –õ–∏—Å–∞ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –∑–∞–π—Ü–∞")
        
        can_steal_mole = self.night_actions.set_fox_target(3, 6)
        self.assertTrue(can_steal_mole)
        print("‚úÖ –õ–∏—Å–∞ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –∫—Ä–æ—Ç–∞")
        
        # –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –±–æ–±—Ä–∞ (–æ–Ω –∑–∞—â–∏—â–µ–Ω)
        can_steal_beaver = self.night_actions.set_fox_target(3, 7)
        self.assertFalse(can_steal_beaver)
        print("‚úÖ –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –±–æ–±—Ä–∞ (–æ–Ω –∑–∞—â–∏—â–µ–Ω)")
        
        # –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –≤–æ–ª–∫–∞
        can_steal_wolf = self.night_actions.set_fox_target(3, 1)
        self.assertFalse(can_steal_wolf)
        print("‚úÖ –õ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –≤–æ–ª–∫–∞")
        
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏—è –ª–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_mole_actions(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –∫—Ä–æ—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫—Ä–æ—Ç–∞...")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.game.players[6].role = Role.MOLE
        self.game.players[6].team = Team.HERBIVORES
        self.game.players[4].role = Role.HARE
        self.game.players[4].team = Team.HERBIVORES
        self.game.players[1].role = Role.WOLF
        self.game.players[1].team = Team.PREDATORS
        self.game.players[3].role = Role.FOX
        self.game.players[3].team = Team.PREDATORS
        
        # –ö—Ä–æ—Ç –º–æ–∂–µ—Ç –∫–æ–ø–∞—Ç—å –ø–æ–¥ –ª—é–±–æ–≥–æ
        can_dig_hare = self.night_actions.set_mole_target(6, 4)
        self.assertTrue(can_dig_hare)
        print("‚úÖ –ö—Ä–æ—Ç –º–æ–∂–µ—Ç –∫–æ–ø–∞—Ç—å –ø–æ–¥ –∑–∞–π—Ü–∞")
        
        can_dig_wolf = self.night_actions.set_mole_target(6, 1)
        self.assertTrue(can_dig_wolf)
        print("‚úÖ –ö—Ä–æ—Ç –º–æ–∂–µ—Ç –∫–æ–ø–∞—Ç—å –ø–æ–¥ –≤–æ–ª–∫–∞")
        
        can_dig_fox = self.night_actions.set_mole_target(6, 3)
        self.assertTrue(can_dig_fox)
        print("‚úÖ –ö—Ä–æ—Ç –º–æ–∂–µ—Ç –∫–æ–ø–∞—Ç—å –ø–æ–¥ –ª–∏—Å—É")
        
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏—è –∫—Ä–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_beaver_actions(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –±–æ–±—Ä–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–æ–±—Ä–∞...")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.game.players[7].role = Role.BEAVER
        self.game.players[7].team = Team.HERBIVORES
        self.game.players[4].role = Role.HARE
        self.game.players[4].team = Team.HERBIVORES
        self.game.players[1].role = Role.WOLF
        self.game.players[1].team = Team.PREDATORS
        self.game.players[3].role = Role.FOX
        self.game.players[3].team = Team.PREDATORS
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–ø–∞—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–±—Ä–∞
        self.game.players[4].stolen_supplies = 1  # –£ –∑–∞–π—Ü–∞ —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã
        self.game.players[1].stolen_supplies = 1  # –£ –≤–æ–ª–∫–∞ —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã
        self.game.players[3].stolen_supplies = 1  # –£ –ª–∏—Å—ã —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã
        
        # –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –∑–∞—â–∏—â–∞—Ç—å —Ç–µ—Ö, —É –∫–æ–≥–æ —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã
        can_protect_hare = self.night_actions.set_beaver_target(7, 4)
        self.assertTrue(can_protect_hare)
        print("‚úÖ –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –∑–∞—â–∏—â–∞—Ç—å –∑–∞–π—Ü–∞ (—É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã)")
        
        can_protect_wolf = self.night_actions.set_beaver_target(7, 1)
        self.assertTrue(can_protect_wolf)
        print("‚úÖ –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –∑–∞—â–∏—â–∞—Ç—å –≤–æ–ª–∫–∞ (—É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã)")
        
        can_protect_fox = self.night_actions.set_beaver_target(7, 3)
        self.assertTrue(can_protect_fox)
        print("‚úÖ –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –∑–∞—â–∏—â–∞—Ç—å –ª–∏—Å—É (—É –∫–æ—Ç–æ—Ä–æ–π —É–∫—Ä–∞–ª–∏ –ø—Ä–∏–ø–∞—Å—ã)")
        
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏—è –±–æ–±—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_night_processing(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π...")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.game.players[1].role = Role.WOLF
        self.game.players[1].team = Team.PREDATORS
        self.game.players[3].role = Role.FOX
        self.game.players[3].team = Team.PREDATORS
        self.game.players[4].role = Role.HARE
        self.game.players[4].team = Team.HERBIVORES
        self.game.players[6].role = Role.MOLE
        self.game.players[6].team = Team.HERBIVORES
        self.game.players[7].role = Role.BEAVER
        self.game.players[7].team = Team.HERBIVORES
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.night_actions.set_wolf_target(1, 4)  # wolf1 –∞—Ç–∞–∫—É–µ—Ç hare1
        self.night_actions.set_fox_target(3, 4)   # fox –≤–æ—Ä—É–µ—Ç —É hare1
        self.night_actions.set_beaver_target(7, 4) # beaver –∑–∞—â–∏—â–∞–µ—Ç hare1
        self.night_actions.set_mole_target(6, 4)  # mole –∫–æ–ø–∞–µ—Ç –ø–æ–¥ hare1
        
        print("‚úÖ –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        results = self.night_actions.process_all_actions()
        
        self.assertIn('wolves', results)
        self.assertIn('fox', results)
        self.assertIn('beaver', results)
        self.assertIn('mole', results)
        self.assertIn('deaths', results)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {results}")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


class TestPlayerSystem(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–≥—Ä–æ–∫–æ–≤"""
    
    def test_player_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞...")
        
        # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞
        player = Player(
            user_id=123,
            username="test_user",
            role=Role.WOLF,
            team=Team.PREDATORS
        )
        
        self.assertEqual(player.user_id, 123)
        self.assertEqual(player.username, "test_user")
        self.assertEqual(player.role, Role.WOLF)
        self.assertEqual(player.team, Team.PREDATORS)
        self.assertTrue(player.is_alive)
        self.assertEqual(player.supplies, 2)
        
        print("‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ ID: {player.user_id}")
        print(f"‚úÖ –ò–º—è: {player.username}")
        print(f"‚úÖ –†–æ–ª—å: {player.role.value}")
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞: {player.team.value}")
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_player_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞...")
        
        # –í–∞–ª–∏–¥–Ω—ã–π –∏–≥—Ä–æ–∫
        valid_player = Player(123, "test", Role.HARE, Team.HERBIVORES)
        self.assertTrue(valid_player.is_alive)
        print("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
        wolf = Player(1, "wolf", Role.WOLF, Team.PREDATORS)
        self.assertEqual(wolf.team, Team.PREDATORS)
        print("‚úÖ –í–æ–ª–∫ –≤ –∫–æ–º–∞–Ω–¥–µ —Ö–∏—â–Ω–∏–∫–æ–≤")
        
        hare = Player(2, "hare", Role.HARE, Team.HERBIVORES)
        self.assertEqual(hare.team, Team.HERBIVORES)
        print("‚úÖ –ó–∞—è—Ü –≤ –∫–æ–º–∞–Ω–¥–µ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö")
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    def test_supplies_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ø–∞—Å–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ø–∞—Å–∞–º–∏...")
        
        player = Player(123, "test", Role.HARE, Team.HERBIVORES)
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ 2 –ø—Ä–∏–ø–∞—Å–∞
        self.assertEqual(player.supplies, 2)
        print("‚úÖ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ 2 –ø—Ä–∏–ø–∞—Å–∞")
        
        # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏–ø–∞—Å—ã
        player.supplies -= 1
        self.assertEqual(player.supplies, 1)
        print("‚úÖ –ü—Ä–∏–ø–∞—Å—ã —É–º–µ–Ω—å—à–µ–Ω—ã –¥–æ 1")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ø–∞—Å—ã
        player.supplies = player.max_supplies
        self.assertEqual(player.supplies, 2)
        print("‚úÖ –ü—Ä–∏–ø–∞—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ 2")
        
        print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ø–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


class TestErrorHandling(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def test_invalid_operations(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        game = Game(chat_id=12345)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –±–µ–∑ –∏–≥—Ä–æ–∫–æ–≤
        result = game.start_game()
        self.assertFalse(result)
        print("‚úÖ –ò–≥—Ä–∞ –±–µ–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        result = game.vote(1, 999)
        self.assertFalse(result)
        print("‚úÖ –ì–æ–ª–æ—Å –∑–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            invalid_player = Player(None, "test", Role.HARE, Team.HERBIVORES)
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏)")
        except Exception as e:
            print(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–≥—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {type(e).__name__}")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


class TestPerformance(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_large_game_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        game = Game(chat_id=12345)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        start_time = time.time()
        
        for i in range(12):  # MAX_PLAYERS
            game.add_player(i, f"player_{i}")
        
        add_time = time.time() - start_time
        self.assertLess(add_time, 1.0)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ 12 –∏–≥—Ä–æ–∫–æ–≤: {add_time:.3f}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        start_time = time.time()
        for i in range(12):
            game.vote(i, (i + 1) % 12)
        
        vote_time = time.time() - start_time
        self.assertLess(vote_time, 0.5)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        print(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ 12 –∏–≥—Ä–æ–∫–æ–≤: {vote_time:.3f}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        start_time = time.time()
        night_actions = NightActions(game)
        for i in range(0, 12, 2):
            night_actions.set_wolf_target(i, (i + 1) % 12)
        
        night_time = time.time() - start_time
        self.assertLess(night_time, 0.5)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {night_time:.3f}—Å")
        
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ\n")


def run_comprehensive_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–û–¢–ê –õ–ï–° –ò –í–û–õ–ö–ò")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—å—é—Ç
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_classes = [
        TestConfigSystem,
        TestGameLogic,
        TestNightActions,
        TestPlayerSystem,
        TestErrorHandling,
        TestPerformance
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(
        verbosity=2,
        stream=sys.stdout,
        descriptions=True,
        failfast=False
    )
    
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
    print(f"üí• –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    
    if result.failures:
        print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print("\nüí• –û–®–ò–ë–ö–ò:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun) * 100
    print(f"\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
    else:
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_comprehensive_tests()
    sys.exit(0 if success else 1)
