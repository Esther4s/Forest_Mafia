#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ç–∞–ø–æ–≤ –∏–≥—Ä—ã –¥–ª—è –õ–µ—Å –∏ –≤–æ–ª–∫–∏ Bot
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —ç—Ç–∞–ø–æ–≤ –∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
"""

import asyncio
import logging
from typing import Dict, Optional, Callable, Any
from datetime import datetime, timedelta
from enum import Enum

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from game_logic import Game, GamePhase, Role, Team
from config import config

logger = logging.getLogger(__name__)


class PhaseTransition(Enum):
    """–ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏"""
    WAITING_TO_NIGHT = "waiting_to_night"
    NIGHT_TO_DAY = "night_to_day"
    DAY_TO_VOTING = "day_to_voting"
    VOTING_TO_NIGHT = "voting_to_night"
    ANY_TO_GAME_OVER = "any_to_game_over"


class GamePhaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ç–∞–ø–æ–≤ –∏–≥—Ä—ã"""
    
    def __init__(self):
        self.logger = logger
        self.phase_timers: Dict[int, asyncio.Task] = {}  # chat_id -> timer_task
        self.phase_callbacks: Dict[PhaseTransition, Callable] = {}
        self._setup_default_callbacks()
    
    def _setup_default_callbacks(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
        self.phase_callbacks = {
            PhaseTransition.WAITING_TO_NIGHT: self._handle_waiting_to_night,
            PhaseTransition.NIGHT_TO_DAY: self._handle_night_to_day,
            PhaseTransition.DAY_TO_VOTING: self._handle_day_to_voting,
            PhaseTransition.VOTING_TO_NIGHT: self._handle_voting_to_night,
            PhaseTransition.ANY_TO_GAME_OVER: self._handle_game_over
        }
    
    async def start_phase(self, game: Game, phase: GamePhase, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —ç—Ç–∞–ø –∏–≥—Ä—ã
        
        Args:
            game: –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
            phase: –≠—Ç–∞–ø –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            await self._cancel_phase_timer(game.chat_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É
            game.phase = phase
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç—Ç–∞–ø–∞
            duration = self._get_phase_duration(phase)
            game.phase_end_time = datetime.now() + timedelta(seconds=duration)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–∞–ø–∞
            success = await self._execute_phase_handler(game, phase, context)
            
            if success:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —ç—Ç–∞–ø–∞
                await self._start_phase_timer(game, context)
                self.logger.info(f"‚úÖ –≠—Ç–∞–ø {phase.value} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø {phase.value} –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç—Ç–∞–ø–∞ {phase.value}: {e}")
            return False
    
    def _get_phase_duration(self, phase: GamePhase) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        durations = {
            GamePhase.WAITING: 0,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            GamePhase.NIGHT: config.night_duration,
            GamePhase.DAY: config.day_duration,
            GamePhase.VOTING: config.voting_duration,
            GamePhase.GAME_OVER: 0  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        }
        return durations.get(phase, 60)
    
    async def _execute_phase_handler(self, game: Game, phase: GamePhase, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–∞–ø–∞"""
        try:
            if phase == GamePhase.NIGHT:
                return await self._handle_night_phase(game, context)
            elif phase == GamePhase.DAY:
                return await self._handle_day_phase(game, context)
            elif phase == GamePhase.VOTING:
                return await self._handle_voting_phase(game, context)
            elif phase == GamePhase.GAME_OVER:
                return await self._handle_game_over_phase(game, context)
            else:
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —ç—Ç–∞–ø–∞ {phase.value}: {e}")
            return False
    
    async def _handle_waiting_to_night(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É
            game.phase = GamePhase.NIGHT
            game.current_round += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            from bot import ForestWolvesBot
            bot = ForestWolvesBot.get_instance()
            if bot:
                bot.save_game_state(game.chat_id)
            
            self.logger.info(f"üåô –ò–≥—Ä–∞ {game.chat_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É (—Ä–∞—É–Ω–¥ {game.current_round})")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ: {e}")
            return False
    
    async def _handle_night_to_day(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –Ω–æ—á–∏ –∫ –¥–Ω—é"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ –¥–Ω–µ–≤–Ω—É—é —Ñ–∞–∑—É
            game.phase = GamePhase.DAY
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            from bot import ForestWolvesBot
            bot = ForestWolvesBot.get_instance()
            if bot:
                bot.save_game_state(game.chat_id)
            
            self.logger.info(f"‚òÄÔ∏è –ò–≥—Ä–∞ {game.chat_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω—É—é —Ñ–∞–∑—É")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ: {e}")
            return False
    
    async def _handle_day_to_voting(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –¥–Ω—è –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ —Ñ–∞–∑—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            game.phase = GamePhase.VOTING
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            from bot import ForestWolvesBot
            bot = ForestWolvesBot.get_instance()
            if bot:
                bot.save_game_state(game.chat_id)
            
            self.logger.info(f"üó≥Ô∏è –ò–≥—Ä–∞ {game.chat_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ñ–∞–∑—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é: {e}")
            return False
    
    async def _handle_voting_to_night(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫ –Ω–æ—á–∏"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É
            game.phase = GamePhase.NIGHT
            game.current_round += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            from bot import ForestWolvesBot
            bot = ForestWolvesBot.get_instance()
            if bot:
                bot.save_game_state(game.chat_id)
            
            self.logger.info(f"üåô –ò–≥—Ä–∞ {game.chat_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É (—Ä–∞—É–Ω–¥ {game.current_round})")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ: {e}")
            return False
    
    async def _handle_game_over(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ —Ñ–∞–∑—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            game.phase = GamePhase.GAME_OVER
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            from bot import ForestWolvesBot
            bot = ForestWolvesBot.get_instance()
            if bot:
                bot.save_game_state(game.chat_id)
            
            self.logger.info(f"üèÅ –ò–≥—Ä–∞ {game.chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")
            return False
    
    async def _handle_night_phase(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ—á–∏
            night_message = await self._send_night_message(game, context)
            
            if night_message:
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._pin_stage_message(context, game, "night", night_message.message_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
                await self._send_roles_to_players(game, context)
                
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã: {e}")
            return False
    
    async def _handle_day_phase(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Ñ–∞–∑—É"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–Ω—è
            day_message = await self._send_day_message(game, context)
            
            if day_message:
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._pin_stage_message(context, game, "day", day_message.message_id)
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã: {e}")
            return False
    
    async def _handle_voting_phase(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–∑—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            voting_message = await self._send_voting_message(game, context)
            
            if voting_message:
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._pin_stage_message(context, game, "voting", voting_message.message_id)
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def _handle_game_over_phase(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
            await self._send_game_over_message(game, context)
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            await self._cancel_phase_timer(game.chat_id)
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")
            return False
    
    async def _send_night_message(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ—á–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üé≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", callback_data="view_my_role")],
                [InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É", url="https://t.me/Forest_fuss_bot")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            night_text = (
                "üåô **–ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å** üåô\n\n"
                "üå≤ –í—Å–µ –∑–≤–µ—Ä—É—à–∫–∏ –∑–∞—Å—ã–ø–∞—é—Ç –≤ —Å–≤–æ–∏—Ö —É–∫—Ä—ã—Ç–∏—è—Ö...\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                "üê∫ –•–∏—â–Ω–∏–∫–∏ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –æ—Ö–æ—Ç—É...\n"
                "ü¶´ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ —Å–ø—è—Ç –±–µ—Å–ø–æ–∫–æ–π–Ω–æ...\n\n"
                "üé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=game.chat_id,
                text=night_text,
                parse_mode='Markdown',
                reply_markup=reply_markup,
                message_thread_id=game.thread_id
            )
            
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ—á–∏: {e}")
            return None
    
    async def _send_day_message(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–Ω—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="day_end_discussion")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            day_text = (
                "‚òÄÔ∏è **–ù–∞—Å—Ç—É–ø–∏–ª–æ —É—Ç—Ä–æ** ‚òÄÔ∏è\n\n"
                "üå≤ –í—Å–µ –∑–≤–µ—Ä—É—à–∫–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –Ω–∞ –ª–µ—Å–Ω–æ–π –ø–æ–ª—è–Ω–µ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                "üí¨ –û–±—Å—É–∂–¥–∞–π—Ç–µ, –∫–æ–≥–æ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –≤ —Ö–∏—â–Ω–∏—á–µ—Å—Ç–≤–µ!\n"
                "üïê –£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=game.chat_id,
                text=day_text,
                parse_mode='Markdown',
                reply_markup=reply_markup,
                message_thread_id=game.thread_id
            )
            
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–Ω–µ: {e}")
            return None
    
    async def _send_voting_message(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            voting_text = (
                "üó≥Ô∏è **–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ** üó≥Ô∏è\n\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n"
                f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {config.voting_duration // 60} –º–∏–Ω—É—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ!\n\n"
                "**–ü—Ä–∞–≤–∏–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–æ–ø—É—Å–∫\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–±—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=game.chat_id,
                text=voting_text,
                parse_mode='Markdown',
                message_thread_id=game.thread_id
            )
            
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {e}")
            return None
    
    async def _send_game_over_message(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = game.check_game_end()
            winner_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if winner == Team.PREDATORS else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            game_over_text = (
                "üå≤ **–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê** üå≤\n\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner_name}\n"
                f"üéÆ –†–∞—É–Ω–¥–æ–≤: {game.current_round}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(game.players)}\n\n"
                "üå≤ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üå≤"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=game_over_text,
                parse_mode='Markdown',
                message_thread_id=game.thread_id
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
    
    async def _send_roles_to_players(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            for player in game.players.values():
                try:
                    role_info = self._get_role_info(player.role)
                    team_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if player.team == Team.PREDATORS else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
                    
                    role_message = (
                        f"üé≠ **–í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ:**\n\n"
                        f"üë§ {role_info['name']}\n"
                        f"üè¥ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n\n"
                        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{role_info['description']}\n\n"
                        f"üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üå≤"
                    )
                    
                    await context.bot.send_message(
                        chat_id=player.user_id,
                        text=role_message,
                        parse_mode='Markdown'
                    )
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–∞–º: {e}")
    
    def _get_role_info(self, role: Role) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞—ë—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})
    
    async def _start_phase_timer(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —ç—Ç–∞–ø–∞"""
        try:
            duration = self._get_phase_duration(game.phase)
            
            if duration > 0:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞
                timer_task = asyncio.create_task(
                    self._phase_timer_task(game, context, duration)
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
                self.phase_timers[game.chat_id] = timer_task
                
                self.logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä —ç—Ç–∞–ø–∞ {game.phase.value} –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —ç—Ç–∞–ø–∞: {e}")
    
    async def _phase_timer_task(self, game: Game, context: ContextTypes.DEFAULT_TYPE, duration: int):
        """–ó–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞ —ç—Ç–∞–ø–∞"""
        try:
            # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç—Ç–∞–ø–∞
            await asyncio.sleep(duration)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            if game.phase != GamePhase.GAME_OVER:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
                await self._transition_to_next_phase(game, context)
            
        except asyncio.CancelledError:
            self.logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä —ç—Ç–∞–ø–∞ {game.phase.value} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ —ç—Ç–∞–ø–∞: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
            self.phase_timers.pop(game.chat_id, None)
    
    async def _transition_to_next_phase(self, game: Game, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"""
        try:
            current_phase = game.phase
            
            if current_phase == GamePhase.NIGHT:
                # –ù–æ—á—å -> –î–µ–Ω—å
                await self.start_phase(game, GamePhase.DAY, context)
            elif current_phase == GamePhase.DAY:
                # –î–µ–Ω—å -> –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                await self.start_phase(game, GamePhase.VOTING, context)
            elif current_phase == GamePhase.VOTING:
                # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ -> –°–ª–µ–¥—É—é—â–∞—è –Ω–æ—á—å
                game.current_round += 1
                await self.start_phase(game, GamePhase.NIGHT, context)
            
            self.logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç {current_phase.value} –∫ {game.phase.value}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É: {e}")
    
    async def _cancel_phase_timer(self, chat_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä —ç—Ç–∞–ø–∞"""
        try:
            if chat_id in self.phase_timers:
                timer_task = self.phase_timers[chat_id]
                if not timer_task.done():
                    timer_task.cancel()
                    try:
                        await timer_task
                    except asyncio.CancelledError:
                        pass
                
                del self.phase_timers[chat_id]
                self.logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä —ç—Ç–∞–ø–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—Ç–º–µ–Ω–µ–Ω")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞ —ç—Ç–∞–ø–∞: {e}")
    
    async def _pin_stage_message(self, context: ContextTypes.DEFAULT_TYPE, game: Game, stage: str, message_id: int):
        """–ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        try:
            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
            await self._unpin_previous_stage_message(context, game, stage)
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.pin_chat_message(
                chat_id=game.chat_id,
                message_id=message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            game.set_stage_pinned_message(stage, message_id)
            
            self.logger.info(f"üìå –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {stage} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {message_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞: {e}")
    
    async def _unpin_previous_stage_message(self, context: ContextTypes.DEFAULT_TYPE, game: Game, current_stage: str):
        """–û—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        try:
            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
            for stage, message_id in game.stage_pinned_messages.items():
                if stage != current_stage:
                    try:
                        await context.bot.unpin_chat_message(
                            chat_id=game.chat_id,
                            message_id=message_id
                        )
                        self.logger.info(f"üìå –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {stage} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ: {message_id}")
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {stage}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID
            game.clear_all_stage_pinned_messages()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–∞–ø–æ–≤: {e}")
    
    async def repeat_current_phase(self, game: Game, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        
        Args:
            game: –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–∞–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if game.phase == GamePhase.WAITING:
                return False
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
            success = await self.start_phase(game, game.phase, context)
            
            if success:
                self.logger.info(f"üîÑ –≠—Ç–∞–ø {game.phase.value} –ø–æ–≤—Ç–æ—Ä–µ–Ω –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–∞–ø {game.phase.value}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —ç—Ç–∞–ø–∞: {e}")
            return False
    
    async def cleanup_game(self, chat_id: int):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä—ã"""
        try:
            await self._cancel_phase_timer(chat_id)
            self.logger.info(f"üßπ –†–µ—Å—É—Ä—Å—ã –∏–≥—Ä—ã {chat_id} –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–≥—Ä—ã {chat_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç—Ç–∞–ø–æ–≤
phase_manager = GamePhaseManager()
