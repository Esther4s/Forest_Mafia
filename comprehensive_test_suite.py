#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
import subprocess
import time
import traceback
import json
import tempfile
from typing import Dict, List, Optional, Tuple
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from game_logic import Game, GamePhase, Role, Team, Player
    from night_actions import NightActions
    from night_interface import NightInterface
    from config import config, BOT_TOKEN, DATABASE_URL
    from database_adapter import DatabaseAdapter
    from database_psycopg2 import init_db, close_db, create_tables
    from telegram import Bot
    from telegram.ext import Application
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


class ComprehensiveTestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.test_results = {}
        self.docker_containers = []
        self.temp_files = []
        
    def log_test(self, test_name: str, success: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}: {message}")
        self.test_results[test_name] = {
            'success': success,
            'message': message,
            'timestamp': datetime.now().isoformat()
        }
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        for container in self.docker_containers:
            try:
                subprocess.run(['docker', 'stop', container], check=False, capture_output=True)
                subprocess.run(['docker', 'rm', container], check=False, capture_output=True)
                print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container}: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for temp_file in self.temp_files:
            try:
                os.remove(temp_file)
                print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {temp_file}: {e}")
    
    def test_docker_build(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–∞"""
        print("\nüê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile
            if not os.path.exists('Dockerfile'):
                self.log_test("Docker Build", False, "Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
            result = subprocess.run([
                'docker', 'build', '-t', 'forest-mafia-test', '.'
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.log_test("Docker Build", True, "–û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.log_test("Docker Build", False, f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_test("Docker Build", False, "–¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç)")
            return False
        except Exception as e:
            self.log_test("Docker Build", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_docker_compose(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker Compose...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose.yml
            if not os.path.exists('docker-compose.yml'):
                self.log_test("Docker Compose", False, "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            result = subprocess.run([
                'docker-compose', 'config'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                self.log_test("Docker Compose", True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                return True
            else:
                self.log_test("Docker Compose", False, f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {result.stderr}")
                return False
                
        except Exception as e:
            self.log_test("Docker Compose", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_docker_run(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        print("\nüê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            env_content = f"""BOT_TOKEN=test_token_123456789
DATABASE_URL=sqlite:///test.db
ENVIRONMENT=test
LOG_LEVEL=DEBUG
"""
            with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                f.write(env_content)
                env_file = f.name
                self.temp_files.append(env_file)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            result = subprocess.run([
                'docker', 'run', '-d',
                '--name', 'forest-mafia-test-container',
                '--env-file', env_file,
                'forest-mafia-test'
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                container_id = result.stdout.strip()
                self.docker_containers.append('forest-mafia-test-container')
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                time.sleep(5)
                status_result = subprocess.run([
                    'docker', 'ps', '--filter', 'name=forest-mafia-test-container', '--format', '{{.Status}}'
                ], capture_output=True, text=True)
                
                if 'Up' in status_result.stdout:
                    self.log_test("Docker Run", True, "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    self.log_test("Docker Run", False, "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                    return False
            else:
                self.log_test("Docker Run", False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            self.log_test("Docker Run", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_database_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db = init_db()
            if db is None:
                self.log_test("Database Connection", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables_created = create_tables()
            if not tables_created:
                self.log_test("Database Connection", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            from database_psycopg2 import execute_query
            result = execute_query("SELECT 1 as test")
            if result:
                self.log_test("Database Connection", True, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
                close_db()
                return True
            else:
                self.log_test("Database Connection", False, "–ó–∞–ø—Ä–æ—Å –∫ –ë–î –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è")
                return False
                
        except Exception as e:
            self.log_test("Database Connection", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_bot_configuration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
                self.log_test("Bot Configuration", False, "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not hasattr(config, 'bot_token'):
                self.log_test("Bot Configuration", False, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            game_settings = config.get_game_settings()
            required_keys = ['min_players', 'max_players', 'night_duration', 'day_duration']
            
            for key in required_keys:
                if key not in game_settings:
                    self.log_test("Bot Configuration", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {key}")
                    return False
            
            self.log_test("Bot Configuration", True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except Exception as e:
            self.log_test("Bot Configuration", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_game_logic(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É"""
        print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
            game = Game(chat_id=12345)
            if not game:
                self.log_test("Game Logic", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            test_players = [
                (111, "–í–æ–ª–∫1"), (222, "–õ–∏—Å–∞1"), (333, "–ó–∞—è—Ü1"), 
                (444, "–ó–∞—è—Ü2"), (555, "–ö—Ä–æ—Ç1"), (666, "–ë–æ–±—ë—Ä1")
            ]
            
            for user_id, username in test_players:
                if not game.add_player(user_id, username):
                    self.log_test("Game Logic", False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ {username}")
                    return False
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            if not game.start_game():
                self.log_test("Game Logic", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
            if len(game.players) != len(test_players):
                self.log_test("Game Logic", False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∏–º–µ—é—Ç —Ä–æ–ª–∏
            for player in game.players.values():
                if not player.role or not player.team:
                    self.log_test("Game Logic", False, f"–ò–≥—Ä–æ–∫ {player.username} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏")
                    return False
            
            self.log_test("Game Logic", True, "–ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            self.log_test("Game Logic", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_night_actions(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        print("\nüåô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –∏–≥—Ä–æ–∫–∞–º–∏
            game = Game(chat_id=12345)
            test_players = [
                (111, "–í–æ–ª–∫1"), (222, "–õ–∏—Å–∞1"), (333, "–ó–∞—è—Ü1"), 
                (444, "–ó–∞—è—Ü2"), (555, "–ö—Ä–æ—Ç1"), (666, "–ë–æ–±—ë—Ä1")
            ]
            
            for user_id, username in test_players:
                game.add_player(user_id, username)
            
            game.start_game()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            night_actions = NightActions(game)
            if not night_actions:
                self.log_test("Night Actions", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å NightActions")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            night_interface = NightInterface(game, night_actions)
            if not night_interface:
                self.log_test("Night Actions", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å NightInterface")
                return False
            
            self.log_test("Night Actions", True, "–ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            self.log_test("Night Actions", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_telegram_integration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram"""
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã Telegram
            from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
            from telegram.ext import Application, CommandHandler, CallbackQueryHandler
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
            app = Application.builder().token("test_token").build()
            if not app:
                self.log_test("Telegram Integration", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            keyboard = [[InlineKeyboardButton("–¢–µ—Å—Ç", callback_data="test")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if not reply_markup:
                self.log_test("Telegram Integration", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
                return False
            
            self.log_test("Telegram Integration", True, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            self.log_test("Telegram Integration", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_file_structure(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
        
        required_files = [
            'bot.py',
            'config.py',
            'game_logic.py',
            'night_actions.py',
            'night_interface.py',
            'database.py',
            'database_adapter.py',
            'requirements.txt',
            'Dockerfile',
            'docker-compose.yml'
        ]
        
        missing_files = []
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            self.log_test("File Structure", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        self.log_test("File Structure", True, "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
    
    def test_dependencies(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –ß–∏—Ç–∞–µ–º requirements.txt
            with open('requirements.txt', 'r', encoding='utf-8') as f:
                requirements = f.read().strip().split('\n')
            
            if not requirements or requirements == ['']:
                self.log_test("Dependencies", False, "requirements.txt –ø—É—Å—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            required_packages = [
                'python-telegram-bot',
                'sqlalchemy',
                'psycopg2-binary',
                'python-dotenv'
            ]
            
            missing_packages = []
            for package in required_packages:
                if not any(package in req for req in requirements):
                    missing_packages.append(package)
            
            if missing_packages:
                self.log_test("Dependencies", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
                return False
            
            self.log_test("Dependencies", True, "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("Dependencies", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏'\n")
        print("=" * 60)
        
        tests = [
            ("File Structure", self.test_file_structure),
            ("Dependencies", self.test_dependencies),
            ("Docker Build", self.test_docker_build),
            ("Docker Compose", self.test_docker_compose),
            ("Database Connection", self.test_database_connection),
            ("Bot Configuration", self.test_bot_configuration),
            ("Game Logic", self.test_game_logic),
            ("Night Actions", self.test_night_actions),
            ("Telegram Integration", self.test_telegram_integration),
            ("Docker Run", self.test_docker_run),
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed_tests += 1
            except Exception as e:
                self.log_test(test_name, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                traceback.print_exc()
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result['success'] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{status}: {test_name}")
            if result['message']:
                print(f"    üí¨ {result['message']}")
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é.")
            return True
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_suite = ComprehensiveTestSuite()
    
    try:
        success = test_suite.run_all_tests()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('test_results.json', 'w', encoding='utf-8') as f:
            json.dump(test_suite.test_results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        test_suite.cleanup()
        return 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        test_suite.cleanup()
        return 1


if __name__ == "__main__":
    sys.exit(main())
