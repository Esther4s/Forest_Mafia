#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞
"""

import re

def check_html_formatting():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–µ—Å—Ç–∞ —Å HTML-—Ç–µ–≥–∞–º–∏ –≤ bot.py"""
    print("üîç –ü–†–û–í–ï–†–ö–ê HTML-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –í –ë–û–¢–ï")
    print("=" * 50)
    
    with open('bot.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å HTML-—Ç–µ–≥–∞–º–∏
    html_pattern = r'<[^>]+>'
    lines = content.split('\n')
    
    issues = []
    html_lines = []
    
    for i, line in enumerate(lines, 1):
        if re.search(html_pattern, line):
            html_lines.append((i, line.strip()))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å HTML-—Ç–µ–≥–∞–º–∏: {len(html_lines)}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å HTML-—Ç–µ–≥–∞–º–∏
    for line_num, line in html_lines:
        # –ò—â–µ–º reply_text –∏–ª–∏ edit_message_text –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö
        is_reply_text = 'reply_text' in line
        is_edit_text = 'edit_message_text' in line
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
        if not (is_reply_text or is_edit_text):
            # –ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 3 —Å—Ç—Ä–æ–∫–∞—Ö
            for j in range(1, 4):
                if line_num + j - 1 < len(lines):
                    next_line = lines[line_num + j - 1]
                    if 'reply_text' in next_line or 'edit_message_text' in next_line:
                        is_reply_text = 'reply_text' in next_line
                        is_edit_text = 'edit_message_text' in next_line
                        break
        
        if is_reply_text or is_edit_text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ parse_mode='HTML'
            if 'parse_mode' not in line:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
                has_parse_mode = False
                for j in range(1, 5):
                    if line_num + j - 1 < len(lines):
                        next_line = lines[line_num + j - 1]
                        if 'parse_mode' in next_line and 'HTML' in next_line:
                            has_parse_mode = True
                            break
                
                if not has_parse_mode:
                    issues.append((line_num, line))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if issues:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° HTML-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï–ú:")
        print()
        for line_num, line in issues:
            print(f"–°—Ç—Ä–æ–∫–∞ {line_num}: {line}")
            print()
    else:
        print("‚úÖ –í–°–ï HTML-–¢–ï–ì–ò –ö–û–†–†–ï–ö–¢–ù–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–´!")
        print("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ç–µ–≥–∞–º–∏ –∏–º–µ—é—Ç parse_mode='HTML'")
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —Å HTML-—Ç–µ–≥–∞–º–∏: {len(html_lines)}")
    print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(issues)}")
    
    return len(issues) == 0

if __name__ == "__main__":
    success = check_html_formatting()
    exit(0 if success else 1)
