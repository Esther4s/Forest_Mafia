# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è ForestMafia Bot –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω (Windows PowerShell)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\deploy_production.ps1

param(
    [switch]$SkipTests,
    [switch]$Force
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—à–∏–±–æ–∫
$ErrorActionPreference = "Stop"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch ($Level) {
        "ERROR" { "Red" }
        "WARNING" { "Yellow" }
        "SUCCESS" { "Green" }
        default { "White" }
    }
    Write-Host "[$timestamp] $Message" -ForegroundColor $color
}

function Write-Success { param([string]$Message) Write-Log $Message "SUCCESS" }
function Write-Error { param([string]$Message) Write-Log $Message "ERROR" }
function Write-Warning { param([string]$Message) Write-Log $Message "WARNING" }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function Test-Environment {
    Write-Log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if (-not $env:BOT_TOKEN) {
        Write-Error "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    }
    
    if (-not $env:DATABASE_URL) {
        Write-Error "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    }
    
    Write-Success "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -ne 0) {
            throw "Python –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
        Write-Log "–ù–∞–π–¥–µ–Ω: $pythonVersion"
    }
    catch {
        Write-Error "Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!"
        exit 1
    }
    
    try {
        $pipVersion = pip --version 2>&1
        if ($LASTEXITCODE -ne 0) {
            throw "pip –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
        Write-Log "–ù–∞–π–¥–µ–Ω: $pipVersion"
    }
    catch {
        Write-Error "pip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!"
        exit 1
    }
    
    Write-Success "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Install-Dependencies {
    Write-Log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    try {
        pip install -r requirements.txt --no-cache-dir
        Write-Success "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: $_"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function Test-Database {
    Write-Log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    $testScript = @"
import os
import psycopg2
from urllib.parse import urlparse

try:
    url = urlparse(os.environ['DATABASE_URL'])
    conn = psycopg2.connect(
        host=url.hostname,
        port=url.port,
        database=url.path[1:],
        user=url.username,
        password=url.password
    )
    conn.close()
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
    exit(1)
"@
    
    try {
        python -c $testScript
        Write-Success "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $_"
        exit 1
    }
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
function Invoke-Migrations {
    Write-Log "–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    $migrationsPath = "alembic\versions"
    if (Test-Path $migrationsPath) {
        $migrations = Get-ChildItem $migrationsPath -Filter "*.py"
        if ($migrations.Count -gt 0) {
            try {
                alembic upgrade head
                Write-Success "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
            }
            catch {
                Write-Warning "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: $_"
                Write-Log "–°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –≤—Ä—É—á–Ω—É—é..."
                Invoke-SchemaCreation
            }
        }
        else {
            Write-Log "–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –≤—Ä—É—á–Ω—É—é..."
            Invoke-SchemaCreation
        }
    }
    else {
        Write-Log "–ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –≤—Ä—É—á–Ω—É—é..."
        Invoke-SchemaCreation
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function Invoke-SchemaCreation {
    Write-Log "–°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    $schemaScript = @"
import os
import psycopg2
from urllib.parse import urlparse

# –ß–∏—Ç–∞–µ–º —Å—Ö–µ–º—É
with open('fixed_database_schema.sql', 'r', encoding='utf-8') as f:
    schema = f.read()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
url = urlparse(os.environ['DATABASE_URL'])
conn = psycopg2.connect(
    host=url.hostname,
    port=url.port,
    database=url.path[1:],
    user=url.username,
    password=url.password
)

# –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ö–µ–º—É
with conn.cursor() as cur:
    cur.execute(schema)
    conn.commit()

conn.close()
print('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
"@
    
    try {
        python -c $schemaScript
        Write-Success "‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $_"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
function Test-Code {
    Write-Log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏..."
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python
        python -m py_compile bot.py
        Write-Log "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        $importScript = @"
import sys
sys.path.append('.')
try:
    import bot
    print('‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
except ImportError as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}')
    sys.exit(1)
"@
        python -c $importScript
        Write-Success "‚úÖ –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: $_"
        exit 1
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ Windows —Å–µ—Ä–≤–∏—Å–∞
function New-WindowsService {
    Write-Log "–°–æ–∑–¥–∞–µ–º Windows —Å–µ—Ä–≤–∏—Å..."
    
    $serviceName = "ForestMafiaBot"
    $serviceDisplayName = "ForestMafia Bot"
    $serviceDescription = "Telegram Bot for ForestMafia Game"
    $servicePath = (Get-Location).Path
    $pythonPath = (Get-Command python).Source
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å
    $existingService = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    if ($existingService) {
        if ($Force) {
            Write-Log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å..."
            Stop-Service -Name $serviceName -Force
            Write-Log "–£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å..."
            sc.exe delete $serviceName
        }
        else {
            Write-Warning "–°–µ—Ä–≤–∏—Å $serviceName —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è."
            return
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    try {
        $serviceArgs = @(
            "create", $serviceName,
            "binPath= `"$pythonPath`" `"$servicePath\bot.py`"",
            "DisplayName= `"$serviceDisplayName`"",
            "start= auto"
        )
        & sc.exe $serviceArgs
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        & sc.exe description $serviceName $serviceDescription
        
        Write-Success "‚úÖ Windows —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: $_"
        exit 1
    }
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
function Start-WindowsService {
    Write-Log "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å..."
    
    $serviceName = "ForestMafiaBot"
    
    try {
        Start-Service -Name $serviceName
        Start-Sleep -Seconds 5
        
        $service = Get-Service -Name $serviceName
        if ($service.Status -eq "Running") {
            Write-Success "‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        }
        else {
            Write-Error "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –°—Ç–∞—Ç—É—Å: $($service.Status)"
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $_"
        exit 1
    }
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
function Test-Bot {
    Write-Log "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞..."
    
    $serviceName = "ForestMafiaBot"
    $service = Get-Service -Name $serviceName
    
    if ($service.Status -eq "Running") {
        Write-Success "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        Write-Log "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: Get-Service -Name $serviceName"
        Write-Log "üìã –õ–æ–≥–∏: Get-EventLog -LogName Application -Source $serviceName -Newest 10"
        Write-Log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: Restart-Service -Name $serviceName"
    }
    else {
        Write-Warning "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°—Ç–∞—Ç—É—Å: $($service.Status)"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Log "üå≤ ForestMafia Bot - –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω (Windows)"
    Write-Log "=================================================="
    
    Test-Environment
    Test-Dependencies
    Install-Dependencies
    Test-Database
    Invoke-Migrations
    Test-Code
    New-WindowsService
    Start-WindowsService
    Test-Bot
    
    Write-Success "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    Write-Log "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:"
    Write-Log "  - –°—Ç–∞—Ç—É—Å: Get-Service -Name ForestMafiaBot"
    Write-Log "  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Stop-Service -Name ForestMafiaBot"
    Write-Log "  - –ó–∞–ø—É—Å–∫: Start-Service -Name ForestMafiaBot"
    Write-Log "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: Restart-Service -Name ForestMafiaBot"
}

# –ó–∞–ø—É—Å–∫
Main
