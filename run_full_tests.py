#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
"""

import os
import sys
import subprocess
import time
import json
from datetime import datetime
from typing import Dict, List, Tuple


class FullTestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = datetime.now()
        
    def log_section(self, title: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 80)
        print(f"üß™ {title}")
        print("=" * 80)
    
    def run_script(self, script_name: str, description: str) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç"""
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫: {description}")
        print(f"üìÑ –°–∫—Ä–∏–ø—Ç: {script_name}")
        print("-" * 60)
        
        try:
            result = subprocess.run(
                [sys.executable, script_name],
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.stdout:
                print("üì§ –í—ã–≤–æ–¥:")
                print(result.stdout)
            
            if result.stderr:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
                print(result.stderr)
            
            success = result.returncode == 0
            message = "–£—Å–ø–µ—à–Ω–æ" if success else f"–û—à–∏–±–∫–∞ (–∫–æ–¥: {result.returncode})"
            
            print(f"\n{'‚úÖ' if success else '‚ùå'} –†–µ–∑—É–ª—å—Ç–∞—Ç: {message}")
            return success, message
            
        except subprocess.TimeoutExpired:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)")
            return False, "–¢–∞–π–º–∞—É—Ç"
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"
    
    def check_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        python_version = sys.version_info
        if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
            print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}")
            return False
        print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}.{python_version.micro}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            'bot.py',
            'config.py',
            'game_logic.py',
            'database.py',
            'requirements.txt',
            'Dockerfile',
            'docker-compose.yml'
        ]
        
        missing_files = []
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker: {result.stdout.strip()}")
            else:
                print("‚ö†Ô∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except FileNotFoundError:
            print("‚ö†Ô∏è Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
        try:
            result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker Compose: {result.stdout.strip()}")
            else:
                print("‚ö†Ô∏è Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except FileNotFoundError:
            print("‚ö†Ô∏è Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        
        return True
    
    def run_basic_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"""
        self.log_section("–ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´")
        
        # –¢–µ—Å—Ç 1: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç
        if os.path.exists('test_all.py'):
            success, message = self.run_script('test_all.py', '–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã')
            self.test_results['basic_tests'] = {'success': success, 'message': message}
            if not success:
                return False
        else:
            print("‚ö†Ô∏è –§–∞–π–ª test_all.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã")
            self.test_results['basic_tests'] = {'success': True, 'message': '–ü—Ä–æ–ø—É—â–µ–Ω–æ'}
        
        return True
    
    def run_database_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.log_section("–¢–ï–°–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        success, message = self.run_script('database_test.py', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        self.test_results['database_tests'] = {'success': success, 'message': message}
        return success
    
    def run_docker_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã Docker"""
        self.log_section("–¢–ï–°–¢–´ DOCKER")
        
        success, message = self.run_script('docker_test.py', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker')
        self.test_results['docker_tests'] = {'success': success, 'message': message}
        return success
    
    def run_comprehensive_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        self.log_section("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´")
        
        success, message = self.run_script('comprehensive_test_suite.py', '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
        self.test_results['comprehensive_tests'] = {'success': success, 'message': message}
        return success
    
    def run_integration_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        self.log_section("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´")
        
        print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        try:
            from bot import ForestWolvesBot
            from game_logic import Game, GamePhase, Role, Team, Player
            from config import config, BOT_TOKEN
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            self.test_results['integration_tests'] = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}'}
            return False
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
        try:
            bot = ForestWolvesBot()
            if bot:
                print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                self.test_results['integration_tests'] = {'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞'}
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            self.test_results['integration_tests'] = {'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}'}
            return False
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        try:
            game = Game(chat_id=12345)
            if game:
                print("‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")
                self.test_results['integration_tests'] = {'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'}
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {e}")
            self.test_results['integration_tests'] = {'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {e}'}
            return False
        
        self.test_results['integration_tests'] = {'success': True, 'message': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç'}
        return True
    
    def run_deployment_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é"""
        self.log_section("–¢–ï–°–¢–´ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ")
        
        print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é...")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_vars = ['BOT_TOKEN', 'DATABASE_URL']
        missing_vars = []
        
        for var in env_vars:
            if not os.environ.get(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        else:
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            if BOT_TOKEN and BOT_TOKEN != "your_bot_token_here":
                print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.test_results['deployment_tests'] = {'success': False, 'message': '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            self.test_results['deployment_tests'] = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}'}
            return False
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤
        docker_files = ['Dockerfile', 'docker-compose.yml']
        missing_docker = []
        
        for file in docker_files:
            if not os.path.exists(file):
                missing_docker.append(file)
        
        if missing_docker:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Docker —Ñ–∞–π–ª—ã: {', '.join(missing_docker)}")
            self.test_results['deployment_tests'] = {'success': False, 'message': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Docker —Ñ–∞–π–ª—ã: {missing_docker}'}
            return False
        else:
            print("‚úÖ Docker —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            with open('requirements.txt', 'r') as f:
                requirements = f.read()
            
            if requirements.strip():
                print("‚úÖ requirements.txt –Ω–µ –ø—É—Å—Ç")
            else:
                print("‚ùå requirements.txt –ø—É—Å—Ç")
                self.test_results['deployment_tests'] = {'success': False, 'message': 'requirements.txt –ø—É—Å—Ç'}
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
            self.test_results['deployment_tests'] = {'success': False, 'message': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}'}
            return False
        
        self.test_results['deployment_tests'] = {'success': True, 'message': '–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é'}
        return True
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        report = f"""
# –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ "–õ–ï–° –ò –í–û–õ–ö–ò"

## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è**: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}
- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥
- **–í–µ—Ä—Å–∏—è Python**: {sys.version}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤

"""
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result['success'])
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result['success'] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            report += f"### {test_name.replace('_', ' ').title()}\n"
            report += f"- **–°—Ç–∞—Ç—É—Å**: {status}\n"
            report += f"- **–°–æ–æ–±—â–µ–Ω–∏–µ**: {result['message']}\n\n"
        
        report += f"""
## –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤**: {total_tests}
- **–ü—Ä–æ–π–¥–µ–Ω–æ**: {passed_tests}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ**: {total_tests - passed_tests}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞**: {(passed_tests / total_tests * 100):.1f}%

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
        
        if passed_tests == total_tests:
            report += "- ‚úÖ **–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ**\n"
            report += "- –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n"
            report += "- –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é\n"
        else:
            report += "- ‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê**\n"
            report += "- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º\n"
            report += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ\n"
        
        return report
    
    def save_report(self, report: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'test_report_{timestamp}.md'
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ '–õ–ï–° –ò –í–û–õ–ö–ò'")
        print("=" * 80)
        print(f"‚è∞ –ù–∞—á–∞–ª–æ: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self.check_environment():
            print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_suites = [
            ("–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã", self.run_basic_tests),
            ("–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.run_database_tests),
            ("–¢–µ—Å—Ç—ã Docker", self.run_docker_tests),
            ("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã", self.run_comprehensive_tests),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", self.run_integration_tests),
            ("–¢–µ—Å—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é", self.run_deployment_tests),
        ]
        
        all_passed = True
        
        for suite_name, suite_func in test_suites:
            try:
                if not suite_func():
                    all_passed = False
                    print(f"\n‚ùå {suite_name} –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
                else:
                    print(f"\n‚úÖ {suite_name} –ø—Ä–æ–π–¥–µ–Ω—ã!")
            except Exception as e:
                print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {suite_name}: {e}")
                all_passed = False
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        print("\n" + "=" * 80)
        print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê")
        print("=" * 80)
        
        report = self.generate_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        json_filename = f'test_results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        try:
            with open(json_filename, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2)
            print(f"üìÑ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {json_filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 80)
        if all_passed:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ!")
            print("üöÄ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        print("=" * 80)
        
        return all_passed


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = FullTestRunner()
    
    try:
        success = runner.run_all_tests()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
