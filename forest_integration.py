#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ—Å–∞–º–∏
"""

import logging
from typing import Optional

from telegram import Update, Bot
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

from forest_system import init_forest_manager, get_forest_manager, ForestManager
from forest_handlers import ForestCommandHandlers, ForestCallbackHandlers
from summon_system import init_summon_system, get_summon_system, SummonSystem
from database import init_database

logger = logging.getLogger(__name__)


class ForestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤ —Å –±–æ—Ç–æ–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.forest_manager: Optional[ForestManager] = None
        self.summon_system: Optional[SummonSystem] = None
        self.command_handlers: Optional[ForestCommandHandlers] = None
        self.callback_handlers: Optional[ForestCallbackHandlers] = None
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–µ—Å–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            init_database()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ª–µ—Å–æ–≤
            self.forest_manager = init_forest_manager(self.bot)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–∑—ã–≤–∞
            self.summon_system = init_summon_system(self.bot)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.command_handlers = ForestCommandHandlers(self.forest_manager)
            self.callback_handlers = ForestCallbackHandlers(self.forest_manager)
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤: {e}")
            return False
    
    def get_command_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤"""
        if not self.command_handlers:
            raise RuntimeError("–°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        return [
            # –ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ—Å–∞–º–∏
            CommandHandler("create_forest", self.command_handlers.handle_create_forest),
            CommandHandler("forests", self._handle_list_forests),
            CommandHandler("my_forests", self._handle_my_forests),
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –ª–µ—Å–æ–≤ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ regex)
            # /join_forest_*, /leave_forest_*, /summon_forest_*, /list_forest_*, /invite_forest_*
        ]
    
    def get_callback_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤"""
        if not self.callback_handlers:
            raise RuntimeError("–°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        return [
            # Callback-—ã –¥–ª—è –ª–µ—Å–æ–≤
            CallbackQueryHandler(self.callback_handlers.handle_join_forest_callback, pattern="^join_forest_"),
            CallbackQueryHandler(self.callback_handlers.handle_forest_info_callback, pattern="^forest_info_"),
            CallbackQueryHandler(self.callback_handlers.handle_accept_invite_callback, pattern="^accept_invite_"),
            CallbackQueryHandler(self.callback_handlers.handle_decline_invite_callback, pattern="^decline_invite_"),
            CallbackQueryHandler(self.callback_handlers.handle_ask_info_callback, pattern="^ask_info_"),
        ]
    
    def get_dynamic_command_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ª–µ—Å–æ–≤"""
        if not self.command_handlers:
            raise RuntimeError("–°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        return [
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å ID –ª–µ—Å–∞
            CommandHandler("join_forest", self._handle_dynamic_join_forest),
            CommandHandler("leave_forest", self._handle_dynamic_leave_forest),
            CommandHandler("summon_forest", self._handle_dynamic_summon_forest),
            CommandHandler("list_forest", self._handle_dynamic_list_forest),
            CommandHandler("invite_forest", self._handle_dynamic_invite_forest),
        ]
    
    async def _handle_list_forests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forests - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–µ—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–µ—Å–æ–≤ –∏–∑ –ë–î
            from database import get_db_session, Forest
            session = get_db_session()
            
            try:
                forests = session.query(Forest).all()
                
                if not forests:
                    await update.message.reply_text("üå≤ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ª–µ—Å–æ–≤.")
                    return
                
                message = "üå≤ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ—Å–∞:** üå≤\n\n"
                
                for i, forest in enumerate(forests, 1):
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    member_count = len(forest.members)
                    max_count = forest.max_size or "‚àû"
                    
                    message += (
                        f"{i}. **{forest.name}**\n"
                        f"   üìù {forest.description}\n"
                        f"   üë• {member_count}/{max_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                        f"   üîí {'–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if forest.privacy == 'private' else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n"
                        f"   üÜî ID: `{forest.id}`\n\n"
                    )
                
                message += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
                message += "‚Ä¢ /join_forest_<id> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–µ—Å—É\n"
                message += "‚Ä¢ /create_forest <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –ª–µ—Å\n"
                message += "‚Ä¢ /my_forests - –º–æ–∏ –ª–µ—Å–∞"
                
                await update.message.reply_text(message, parse_mode='Markdown')
                
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ—Å–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ—Å–æ–≤.")
    
    async def _handle_my_forests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_forests - –º–æ–∏ –ª–µ—Å–∞"""
        user = update.effective_user
        
        try:
            from database import get_db_session, Forest, ForestMember
            session = get_db_session()
            
            try:
                # –õ–µ—Å–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                created_forests = session.query(Forest).filter(Forest.creator_id == user.id).all()
                
                # –õ–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                member_forests = session.query(Forest).join(ForestMember).filter(
                    ForestMember.user_id == user.id
                ).all()
                
                message = f"üå≤ **–í–∞—à–∏ –ª–µ—Å–∞, {user.first_name}:** üå≤\n\n"
                
                if created_forests:
                    message += "**üèóÔ∏è –°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –ª–µ—Å–∞:**\n"
                    for forest in created_forests:
                        member_count = len(forest.members)
                        max_count = forest.max_size or "‚àû"
                        
                        message += (
                            f"‚Ä¢ **{forest.name}** (ID: `{forest.id}`)\n"
                            f"  üë• {member_count}/{max_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                            f"  üìù {forest.description}\n\n"
                        )
                
                if member_forests:
                    message += "**üåø –õ–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ:**\n"
                    for forest in member_forests:
                        if forest.creator_id != user.id:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–µ—Å–∞
                            member_count = len(forest.members)
                            max_count = forest.max_size or "‚àû"
                            
                            message += (
                                f"‚Ä¢ **{forest.name}** (ID: `{forest.id}`)\n"
                                f"  üë• {member_count}/{max_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                                f"  üìù {forest.description}\n\n"
                            )
                
                if not created_forests and not member_forests:
                    message += "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ª–µ—Å–æ–≤ –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ª–µ—Å—É.\n\n"
                    message += "**–°–æ–∑–¥–∞–π—Ç–µ –ª–µ—Å:**\n"
                    message += "‚Ä¢ /create_forest <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                    message += "**–ò–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É:**\n"
                    message += "‚Ä¢ /forests - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–µ—Å–æ–≤"
                
                await update.message.reply_text(message, parse_mode='Markdown')
                
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–∏—Ö –ª–µ—Å–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ª–µ—Å–æ–≤.")
    
    async def _handle_dynamic_join_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–µ—Å—É"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        if not command.startswith('/join_forest_'):
            return
        
        forest_id_str = command.replace('/join_forest_', '')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å forest_id
        temp_context = context
        temp_context.args = [forest_id_str]
        
        await self.command_handlers.handle_join_forest(update, temp_context)
    
    async def _handle_dynamic_leave_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∏–¥–∞–Ω–∏—è –ª–µ—Å–∞"""
        command = update.message.text
        if not command.startswith('/leave_forest_'):
            return
        
        forest_id_str = command.replace('/leave_forest_', '')
        temp_context = context
        temp_context.args = [forest_id_str]
        
        await self.command_handlers.handle_leave_forest(update, temp_context)
    
    async def _handle_dynamic_summon_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å–æ–∑—ã–≤–∞ –ª–µ—Å–∞"""
        command = update.message.text
        if not command.startswith('/summon_forest_'):
            return
        
        forest_id_str = command.replace('/summon_forest_', '')
        temp_context = context
        temp_context.args = [forest_id_str]
        
        await self.command_handlers.handle_summon_forest(update, temp_context)
    
    async def _handle_dynamic_list_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞"""
        command = update.message.text
        if not command.startswith('/list_forest_'):
            return
        
        forest_id_str = command.replace('/list_forest_', '')
        temp_context = context
        temp_context.args = [forest_id_str]
        
        await self.command_handlers.handle_list_forest(update, temp_context)
    
    async def _handle_dynamic_invite_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ª–µ—Å"""
        command = update.message.text
        if not command.startswith('/invite_forest_'):
            return
        
        forest_id_str = command.replace('/invite_forest_', '')
        temp_context = context
        temp_context.args = [forest_id_str] + (context.args or [])  # –î–æ–±–∞–≤–ª—è–µ–º ID –ª–µ—Å–∞ –∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º
        
        await self.command_handlers.handle_invite_forest(update, temp_context)
    
    def get_help_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ª–µ—Å–æ–≤"""
        return (
            "üå≤ **–ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤:** üå≤\n\n"
            "**–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
            "‚Ä¢ /create_forest <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –ª–µ—Å\n"
            "‚Ä¢ /forests - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–µ—Å–æ–≤\n"
            "‚Ä¢ /my_forests - –º–æ–∏ –ª–µ—Å–∞\n\n"
            "**–£—á–∞—Å—Ç–∏–µ –≤ –ª–µ—Å–∞—Ö:**\n"
            "‚Ä¢ /join_forest_<id> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–µ—Å—É\n"
            "‚Ä¢ /leave_forest_<id> - –ø–æ–∫–∏–Ω—É—Ç—å –ª–µ—Å\n"
            "‚Ä¢ /list_forest_<id> - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞\n"
            "‚Ä¢ /summon_forest_<id> - —Å–æ–∑–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞\n"
            "‚Ä¢ /invite_forest_<id> @username - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –ª–µ—Å\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ /create_forest –õ–µ—Å –í–æ–ª–∫–æ–≤ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã\n"
            "‚Ä¢ /join_forest_les_volkov\n"
            "‚Ä¢ /summon_forest_les_volkov\n\n"
            "**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** ID –ª–µ—Å–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –ª–µ—Å–æ–≤ (/forests)"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
forest_integration: Optional[ForestIntegration] = None

def init_forest_integration(bot: Bot) -> ForestIntegration:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤"""
    global forest_integration
    forest_integration = ForestIntegration(bot)
    forest_integration.initialize()
    return forest_integration

def get_forest_integration() -> ForestIntegration:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤"""
    if forest_integration is None:
        raise RuntimeError("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return forest_integration
