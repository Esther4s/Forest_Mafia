
import json
import os
from typing import Dict, Any

class GlobalSettings:
    def __init__(self, settings_file: str = "bot_settings.json"):
        self.settings_file = settings_file
        self.default_settings = {
            "test_mode": False,
            "min_players_normal": 3,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 6 –Ω–∞ 3
            "min_players_test": 3,
            "max_players": 12,
            "night_duration": 60,
            "day_duration": 300,
            "voting_duration": 120,
            "role_distribution": {
                "wolves": 0.25,
                "fox": 0.15,
                "hares": 0.35,
                "mole": 0.15,
                "beaver": 0.10
            },
            "auto_end_conditions": {
                "max_rounds": 25,
                "max_game_duration_hours": 3,
                "min_alive_players": 3
            },
            "forest_wolves_features": {
                "fox_death_threshold": 2,
                "beaver_protection_enabled": True,
                "mole_revelation_threshold": 0.8,
                "herbivore_survival_threshold": 0.7
            }
        }
        self.settings = self.load_settings()
    
    def load_settings(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    loaded_settings = json.load(f)
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                settings = self.default_settings.copy()
                settings.update(loaded_settings)
                return settings
            except (json.JSONDecodeError, IOError):
                return self.default_settings.copy()
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.save_settings(self.default_settings)
            return self.default_settings.copy()
    
    def save_settings(self, settings: Dict[str, Any] = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            settings_to_save = settings or self.settings
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings_to_save, f, ensure_ascii=False, indent=2)
            return True
        except IOError:
            return False
    
    def get(self, key: str, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return self.settings.get(key, default)
    
    def set(self, key: str, value: Any) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª"""
        self.settings[key] = value
        return self.save_settings()
    
    def toggle_test_mode(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"""
        current = self.get("test_mode", True)
        return self.set("test_mode", not current)
    
    def is_test_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"""
        return self.get("test_mode", True)
    
    def get_min_players(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 3 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        return 3
    
    def update_role_distribution(self, role: str, percentage: float) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π"""
        role_dist = self.get("role_distribution", {})
        role_dist[role] = percentage
        return self.set("role_distribution", role_dist)
    
    def update_timer(self, timer_type: str, duration: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞"""
        timer_key = f"{timer_type}_duration"
        return self.set(timer_key, duration)
    
    def update_auto_end_condition(self, condition: str, value: Any) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        auto_end = self.get("auto_end_conditions", {})
        auto_end[condition] = value
        return self.set("auto_end_conditions", auto_end)
    
    def update_forest_feature(self, feature: str, value: Any) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏"""
        features = self.get("forest_wolves_features", {})
        features[feature] = value
        return self.set("forest_wolves_features", features)
    
    def get_settings_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        test_mode = "–í–ö–õ" if self.is_test_mode() else "–í–´–ö–õ"
        min_players = self.get_min_players()
        max_players = self.get("max_players", 12)
        
        auto_end = self.get("auto_end_conditions", {})
        forest_features = self.get("forest_wolves_features", {})
        
        return (
            f"‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {test_mode}\n"
            f"üë• –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {min_players}\n"
            f"üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {max_players}\n"
            f"üåô –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—á–∏: {self.get('night_duration', 60)}—Å\n"
            f"‚òÄÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {self.get('day_duration', 300)}—Å\n"
            f"üó≥Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {self.get('voting_duration', 120)}—Å\n\n"
            f"üå≤ –õ–µ—Å –∏ –í–æ–ª–∫–∏:\n"
            f"ü¶ä –ü–æ—Ä–æ–≥ —Å–º–µ—Ä—Ç–∏ –ª–∏—Å—ã: {forest_features.get('fox_death_threshold', 2)}\n"
            f"ü¶¶ –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞: {'–í–ö–õ' if forest_features.get('beaver_protection_enabled', True) else '–í–´–ö–õ'}\n"
            f"ü¶´ –ü–æ—Ä–æ–≥ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫—Ä–æ—Ç–∞: {int(forest_features.get('mole_revelation_threshold', 0.8) * 100)}%\n"
            f"üåø –ü–æ—Ä–æ–≥ –≤—ã–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: {int(forest_features.get('herbivore_survival_threshold', 0.7) * 100)}%\n\n"
            f"‚è∞ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:\n"
            f"üéÆ –ú–∞–∫—Å–∏–º—É–º —Ä–∞—É–Ω–¥–æ–≤: {auto_end.get('max_rounds', 25)}\n"
            f"‚è±Ô∏è –ú–∞–∫—Å–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏: {auto_end.get('max_game_duration_hours', 3)}—á\n"
            f"üë• –ú–∏–Ω–∏–º—É–º –∂–∏–≤—ã—Ö: {auto_end.get('min_alive_players', 3)}"
        )
    
    def reset_to_defaults(self) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.settings = self.default_settings.copy()
        return self.save_settings()
    
    def export_settings(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Å—Ç—Ä–æ–∫—É"""
        return json.dumps(self.settings, ensure_ascii=False, indent=2)
    
    def import_settings(self, settings_json: str) -> bool:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏"""
        try:
            imported_settings = json.loads(settings_json)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            for key in imported_settings:
                if key in self.default_settings:
                    self.settings[key] = imported_settings[key]
            return self.save_settings()
        except (json.JSONDecodeError, KeyError):
            return False
