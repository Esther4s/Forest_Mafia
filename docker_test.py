#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
"""

import subprocess
import os
import time
import tempfile
import json
from typing import Dict, List, Optional


class DockerTestSuite:
    """–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Docker"""
    
    def __init__(self):
        self.containers = []
        self.images = []
        self.temp_files = []
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        for container in self.containers:
            try:
                subprocess.run(['docker', 'stop', container], check=False, capture_output=True)
                subprocess.run(['docker', 'rm', container], check=False, capture_output=True)
                print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container}: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
        for image in self.images:
            try:
                subprocess.run(['docker', 'rmi', image], check=False, capture_output=True)
                print(f"‚úÖ –û–±—Ä–∞–∑ {image} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞ {image}: {e}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for temp_file in self.temp_files:
            try:
                os.remove(temp_file)
                print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {temp_file}: {e}")
    
    def test_docker_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker...")
        
        try:
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
        except FileNotFoundError:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
            return False
    
    def test_docker_compose_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker Compose"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose...")
        
        try:
            result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
        except FileNotFoundError:
            print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose: {e}")
            return False
    
    def test_dockerfile_syntax(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Dockerfile"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Dockerfile...")
        
        if not os.path.exists('Dockerfile'):
            print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            # –ß–∏—Ç–∞–µ–º Dockerfile
            with open('Dockerfile', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
            required_directives = ['FROM', 'WORKDIR', 'COPY', 'RUN', 'CMD']
            missing_directives = []
            
            for directive in required_directives:
                if directive not in content:
                    missing_directives.append(directive)
            
            if missing_directives:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã: {', '.join(missing_directives)}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
            if 'FROM python:' not in content:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ Python")
                return False
            
            print("‚úÖ Dockerfile —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Dockerfile: {e}")
            return False
    
    def test_docker_compose_syntax(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å docker-compose.yml"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ docker-compose.yml...")
        
        if not os.path.exists('docker-compose.yml'):
            print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            result = subprocess.run(['docker-compose', 'config'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ docker-compose.yml —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ docker-compose.yml: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ docker-compose.yml: {e}")
            return False
    
    def test_docker_build(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–∞"""
        print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
            result = subprocess.run([
                'docker', 'build', '-t', 'forest-mafia-test:latest', '.'
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                self.images.append('forest-mafia-test:latest')
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå –¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç)")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
            return False
    
    def test_docker_run_basic(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            env_content = """BOT_TOKEN=test_token_123456789
DATABASE_URL=sqlite:///test.db
ENVIRONMENT=test
LOG_LEVEL=DEBUG
"""
            with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                f.write(env_content)
                env_file = f.name
                self.temp_files.append(env_file)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            result = subprocess.run([
                'docker', 'run', '-d',
                '--name', 'forest-mafia-test-basic',
                '--env-file', env_file,
                'forest-mafia-test:latest'
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                self.containers.append('forest-mafia-test-basic')
                
                # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                time.sleep(10)
                status_result = subprocess.run([
                    'docker', 'ps', '--filter', 'name=forest-mafia-test-basic', '--format', '{{.Status}}'
                ], capture_output=True, text=True)
                
                if 'Up' in status_result.stdout:
                    print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
                else:
                    print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def test_docker_compose_up(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose"""
        print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker Compose...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª –¥–ª—è compose
            env_content = """BOT_TOKEN=test_token_123456789
DATABASE_URL=postgresql://forest_mafia:forest_mafia_password@postgres:5432/forest_mafia
POSTGRES_USER=forest_mafia
POSTGRES_PASSWORD=forest_mafia_password
ENVIRONMENT=test
LOG_LEVEL=DEBUG
"""
            with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
                f.write(env_content)
                env_file = f.name
                self.temp_files.append(env_file)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ compose
            result = subprocess.run([
                'docker-compose', '--env-file', env_file, 'up', '-d'
            ], capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                print("‚úÖ Docker Compose –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                self.containers.extend(['forest-mafia-bot', 'forest-mafia-postgres'])
                
                # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                time.sleep(15)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                bot_status = subprocess.run([
                    'docker', 'ps', '--filter', 'name=forest-mafia-bot', '--format', '{{.Status}}'
                ], capture_output=True, text=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PostgreSQL
                postgres_status = subprocess.run([
                    'docker', 'ps', '--filter', 'name=forest-mafia-postgres', '--format', '{{.Status}}'
                ], capture_output=True, text=True)
                
                if 'Up' in bot_status.stdout and 'Up' in postgres_status.stdout:
                    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
                    return True
                else:
                    print("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Docker Compose: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Docker Compose: {e}")
            return False
    
    def test_docker_logs(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞
            result = subprocess.run([
                'docker', 'logs', 'forest-mafia-bot', '--tail', '50'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                logs = result.stdout
                print("‚úÖ –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
                error_keywords = ['ERROR', 'CRITICAL', 'Exception', 'Traceback']
                errors_found = []
                
                for keyword in error_keywords:
                    if keyword in logs:
                        errors_found.append(keyword)
                
                if errors_found:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö: {', '.join(errors_found)}")
                    print("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                    print(logs[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    return False
                else:
                    print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
            return False
    
    def test_docker_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            result = subprocess.run([
                'docker', 'inspect', 'forest-mafia-bot', '--format', '{{.State.Status}}'
            ], capture_output=True, text=True)
            
            if result.returncode == 0 and 'running' in result.stdout:
                print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                stats_result = subprocess.run([
                    'docker', 'stats', 'forest-mafia-bot', '--no-stream', '--format', '{{.CPUPerc}} {{.MemUsage}}'
                ], capture_output=True, text=True)
                
                if stats_result.returncode == 0:
                    print(f"üìä –†–µ—Å—É—Ä—Å—ã: {stats_result.stdout.strip()}")
                
                return True
            else:
                print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ Docker —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Docker —Ç–µ—Å—Ç–æ–≤\n")
        print("=" * 50)
        
        tests = [
            ("Docker Installation", self.test_docker_installed),
            ("Docker Compose Installation", self.test_docker_compose_installed),
            ("Dockerfile Syntax", self.test_dockerfile_syntax),
            ("Docker Compose Syntax", self.test_docker_compose_syntax),
            ("Docker Build", self.test_docker_build),
            ("Docker Run Basic", self.test_docker_run_basic),
            ("Docker Compose Up", self.test_docker_compose_up),
            ("Docker Logs", self.test_docker_logs),
            ("Docker Health", self.test_docker_health),
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed_tests += 1
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
                print()
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("=" * 50)
        print(f"üèÅ Docker —Ç–µ—Å—Ç—ã: {passed_tests}/{total_tests} –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í—Å–µ Docker —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ Docker —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_suite = DockerTestSuite()
    
    try:
        success = test_suite.run_all_tests()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        test_suite.cleanup()
        return 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        test_suite.cleanup()
        return 1


if __name__ == "__main__":
    import sys
    sys.exit(main())
