#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã active_effects
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
"""

import psycopg2
import json
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_database_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        with open('database_url.txt', 'r') as f:
            database_url = f.read().strip()
        
        conn = psycopg2.connect(database_url)
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def improve_active_effects_table():
    """–£–ª—É—á—à–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É active_effects, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    
    conn = get_database_connection()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã active_effects...")
            
            # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            new_columns = [
                {
                    'name': 'used_at',
                    'definition': 'TIMESTAMP',
                    'description': '–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞'
                },
                {
                    'name': 'triggered_by',
                    'definition': 'VARCHAR(100)',
                    'description': '–ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞'
                },
                {
                    'name': 'duration_rounds',
                    'definition': 'INTEGER DEFAULT 1',
                    'description': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞'
                },
                {
                    'name': 'remaining_uses',
                    'definition': 'INTEGER DEFAULT 1',
                    'description': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π'
                },
                {
                    'name': 'effect_status',
                    'definition': 'VARCHAR(50) DEFAULT \'active\'',
                    'description': '–°—Ç–∞—Ç—É—Å —ç—Ñ—Ñ–µ–∫—Ç–∞ (active, expired, used, cancelled)'
                },
                {
                    'name': 'trigger_conditions',
                    'definition': 'JSONB DEFAULT \'{}\'::jsonb',
                    'description': '–£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞'
                },
                {
                    'name': 'last_triggered_at',
                    'definition': 'TIMESTAMP',
                    'description': '–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è'
                },
                {
                    'name': 'auto_remove',
                    'definition': 'BOOLEAN DEFAULT TRUE',
                    'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏'
                },
                {
                    'name': 'updated_at',
                    'definition': 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP',
                    'description': '–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
                }
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'active_effects'
            """)
            existing_columns = [row[0] for row in cursor.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            for column in new_columns:
                if column['name'] not in existing_columns:
                    try:
                        cursor.execute(f"""
                            ALTER TABLE active_effects 
                            ADD COLUMN {column['name']} {column['definition']}
                        """)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column['name']} - {column['description']}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column['name']}: {e}")
                else:
                    logger.info(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {column['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_active_effects_status ON active_effects(effect_status)",
                "CREATE INDEX IF NOT EXISTS idx_active_effects_triggered_by ON active_effects(triggered_by)",
                "CREATE INDEX IF NOT EXISTS idx_active_effects_used_at ON active_effects(used_at)",
                "CREATE INDEX IF NOT EXISTS idx_active_effects_last_triggered ON active_effects(last_triggered_at)",
                "CREATE INDEX IF NOT EXISTS idx_active_effects_remaining_uses ON active_effects(remaining_uses)"
            ]
            
            for index_sql in indexes:
                try:
                    cursor.execute(index_sql)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_sql.split('idx_')[1].split(' ON')[0]}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
            trigger_function = """
                CREATE OR REPLACE FUNCTION update_active_effects_updated_at()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.updated_at = CURRENT_TIMESTAMP;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
            """
            
            cursor.execute(trigger_function)
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            trigger_sql = """
                DROP TRIGGER IF EXISTS trigger_active_effects_updated_at ON active_effects;
                CREATE TRIGGER trigger_active_effects_updated_at
                    BEFORE UPDATE ON active_effects
                    FOR EACH ROW
                    EXECUTE FUNCTION update_active_effects_updated_at();
            """
            
            cursor.execute(trigger_sql)
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                cursor.execute("""
                    UPDATE active_effects 
                    SET effect_status = 'active',
                        updated_at = CURRENT_TIMESTAMP
                    WHERE effect_status IS NULL
                """)
                
                updated_rows = cursor.rowcount
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            conn.commit()
            logger.info("üéâ –¢–∞–±–ª–∏—Ü–∞ active_effects —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'active_effects'
                ORDER BY ordinal_position
            """)
            
            columns_info = cursor.fetchall()
            logger.info("\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã active_effects:")
            logger.info("-" * 80)
            for col in columns_info:
                logger.info(f"{col[0]:<20} | {col[1]:<15} | {col[2]:<10} | {col[3] or 'None'}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def create_cleanup_function():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    conn = get_database_connection()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            cleanup_function = """
                CREATE OR REPLACE FUNCTION cleanup_expired_effects()
                RETURNS INTEGER AS $$
                DECLARE
                    deleted_count INTEGER;
                BEGIN
                    -- –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å auto_remove = TRUE
                    DELETE FROM active_effects 
                    WHERE (expires_at IS NOT NULL AND expires_at < NOW())
                       OR (effect_status = 'expired')
                       OR (remaining_uses <= 0 AND auto_remove = TRUE);
                    
                    GET DIAGNOSTICS deleted_count = ROW_COUNT;
                    
                    -- –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    RAISE NOTICE '–£–¥–∞–ª–µ–Ω–æ % –∏—Å—Ç–µ–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤', deleted_count;
                    
                    RETURN deleted_count;
                END;
                $$ LANGUAGE plpgsql;
            """
            
            cursor.execute(cleanup_function)
            conn.commit()
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è cleanup_expired_effects()")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False
    finally:
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã active_effects...")
    
    # –£–ª—É—á—à–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    if improve_active_effects_table():
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
        if create_cleanup_function():
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏")
        
        logger.info("\nüéâ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã active_effects –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("\nüìù –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        logger.info("‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        logger.info("‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è")
        logger.info("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        logger.info("‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        logger.info("‚Ä¢ –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è")
        logger.info("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")

if __name__ == "__main__":
    main()
