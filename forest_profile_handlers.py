#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–µ—Å–æ–≤
–ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import logging
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

from forest_profiles import ForestProfileHandlers, get_forest_profile_manager
from forest_analytics import ForestAnalyticsManager, get_forest_analytics_manager
from user_forest_profile import UserForestProfileHandlers, get_user_forest_profile_manager
from forest_system import get_forest_manager

logger = logging.getLogger(__name__)


class ExtendedForestProfileHandlers:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–µ—Å–æ–≤"""
    
    def __init__(self):
        self.forest_manager = get_forest_manager()
        self.forest_profile_manager = get_forest_profile_manager()
        self.forest_analytics_manager = get_forest_analytics_manager()
        self.user_forest_profile_manager = get_user_forest_profile_manager()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.forest_profile_handlers = ForestProfileHandlers(self.forest_profile_manager)
        self.user_forest_profile_handlers = UserForestProfileHandlers(self.user_forest_profile_manager)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ª–µ—Å–æ–≤
        from forest_handlers import (
            handle_create_forest, handle_join_forest, handle_leave_forest, handle_forests,
            handle_my_forests_profile, handle_forest_profile, handle_forest_analytics,
            handle_top_forests, handle_help_forests, handle_summon_forest
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.handle_create_forest = handle_create_forest
        self.handle_join_forest = handle_join_forest
        self.handle_leave_forest = handle_leave_forest
        self.handle_forests = handle_forests
        self.handle_my_forests_profile = handle_my_forests_profile
        self.handle_forest_profile = handle_forest_profile
        self.handle_forest_analytics = handle_forest_analytics
        self.handle_top_forests = handle_top_forests
        self.handle_help_forests = handle_help_forests
        self.handle_summon_forest = handle_summon_forest
    
    def get_command_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        return [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ª–µ—Å–æ–≤
            CommandHandler("create_forest", self.handle_create_forest),
            CommandHandler("forests", self.handle_forests),
            CommandHandler("join_forest", self.handle_join_forest),
            CommandHandler("leave_forest", self.handle_leave_forest),
            CommandHandler("summon_forest", self.handle_summon_forest),
            
            # –ü—Ä–æ—Ñ–∏–ª–∏ –ª–µ—Å–æ–≤
            CommandHandler("forest_profile", self.forest_profile_handlers.handle_forest_profile),
            CommandHandler("forest_stats", self.forest_profile_handlers.handle_forest_stats),
            CommandHandler("my_forests_profile", self.forest_profile_handlers.handle_my_forests_profile),
            
            # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–µ—Å–∞–º–∏
            CommandHandler("profile", self.user_forest_profile_handlers.handle_user_profile),
            CommandHandler("profile_compact", self.user_forest_profile_handlers.handle_compact_profile),
            CommandHandler("my_forests_profile", self.user_forest_profile_handlers.handle_user_forests),
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–µ—Å–æ–≤
            CommandHandler("forest_analytics", self.handle_forest_analytics),
            CommandHandler("forest_ranking", self.handle_forest_ranking),
            CommandHandler("forest_comparison", self.handle_forest_comparison),
            CommandHandler("top_forests", self.handle_top_forests),
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–µ—Å–∞—Ö
            CommandHandler("user_forest_stats", self.handle_user_forest_stats),
            CommandHandler("forest_members_ranking", self.handle_forest_members_ranking),
        ]
    
    def get_callback_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        return [
            # Callback-—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–µ—Å–æ–≤
            CallbackQueryHandler(self.handle_forest_profile_callback, pattern="^forest_profile_"),
            CallbackQueryHandler(self.handle_forest_stats_callback, pattern="^forest_stats_"),
            CallbackQueryHandler(self.handle_forest_analytics_callback, pattern="^forest_analytics_"),
            
            # Callback-—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            CallbackQueryHandler(self.handle_user_profile_callback, pattern="^user_profile_"),
            CallbackQueryHandler(self.handle_my_forests_callback, pattern="^my_forests$"),
            CallbackQueryHandler(self.handle_show_all_forests_callback, pattern="^show_all_forests$"),
            
            # Callback-—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            CallbackQueryHandler(self.handle_forest_ranking_callback, pattern="^forest_ranking_"),
            CallbackQueryHandler(self.handle_forest_comparison_callback, pattern="^forest_comparison_"),
        ]
    
    async def handle_forest_analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forest_analytics"""
        if not context.args:
            await update.message.reply_text(
                "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–µ—Å–∞** üìä\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forest_analytics <ID_–ª–µ—Å–∞>\n"
                "–ü—Ä–∏–º–µ—Ä: /forest_analytics les_i_volki\n\n"
                "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ª–µ—Å–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
            )
            return
        
        forest_id = context.args[0]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ª–µ—Å–∞
            analytics = await self.forest_analytics_manager.get_forest_analytics(forest_id)
            
            if not analytics:
                await update.message.reply_text("‚ùå –õ–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = self.forest_analytics_manager.format_analytics_report(analytics)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"forest_stats_{forest_id}"),
                    InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"forest_ranking_{forest_id}")
                ],
                [
                    InlineKeyboardButton("üå≤ –ü—Ä–æ—Ñ–∏–ª—å –ª–µ—Å–∞", callback_data=f"forest_profile_{forest_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                report_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ—Å–∞.")
    
    async def handle_forest_ranking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forest_ranking"""
        if not context.args:
            await update.message.reply_text(
                "üèÜ **–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞** üèÜ\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forest_ranking <ID_–ª–µ—Å–∞>\n"
                "–ü—Ä–∏–º–µ—Ä: /forest_ranking les_i_volki\n\n"
                "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏."
            )
            return
        
        forest_id = context.args[0]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            engagements = await self.forest_analytics_manager.get_member_engagement_ranking(forest_id)
            
            if not engagements:
                await update.message.reply_text("‚ùå –í –ª–µ—Å—É –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            ranking_text = self.forest_analytics_manager.format_engagement_ranking(engagements)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–µ—Å–∞", callback_data=f"forest_analytics_{forest_id}"),
                    InlineKeyboardButton("üå≤ –ü—Ä–æ—Ñ–∏–ª—å –ª–µ—Å–∞", callback_data=f"forest_profile_{forest_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                ranking_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª–µ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª–µ—Å–∞.")
    
    async def handle_forest_comparison(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forest_comparison"""
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–µ—Å–æ–≤** ‚öñÔ∏è\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forest_comparison <ID1> <ID2> [ID3] ...\n"
                "–ü—Ä–∏–º–µ—Ä: /forest_comparison les_i_volki les_volkov les_foxes\n\n"
                "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º."
            )
            return
        
        forest_ids = context.args
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–µ—Å–æ–≤
            comparison = await self.forest_analytics_manager.get_forest_comparison(forest_ids)
            
            if not comparison or not comparison["forests"]:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–µ—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            text = "‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–µ—Å–æ–≤** ‚öñÔ∏è\n\n"
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            text += f"üìä **–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è {comparison['total_forests']} –ª–µ—Å–æ–≤:**\n\n"
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            text += "| –õ–µ—Å | –£—á–∞—Å—Ç–Ω–∏–∫–∏ | –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å | –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å | Retention |\n"
            text += "|-----|-----------|------------|---------------|----------|\n"
            
            for forest in comparison["forests"]:
                text += f"| {forest.forest_name[:15]}... | {forest.total_members} | {forest.activity_rate:.1f}% | {forest.engagement_score:.1f} | {forest.member_retention_rate:.1f}% |\n"
            
            text += "\n"
            
            # –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            text += "üèÜ **–õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            text += f"‚Ä¢ –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {comparison['best_activity'].forest_name} ({comparison['best_activity'].activity_rate:.1f}%)\n"
            text += f"‚Ä¢ –õ—É—á—à–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {comparison['best_engagement'].forest_name} ({comparison['best_engagement'].engagement_score:.1f})\n"
            text += f"‚Ä¢ –õ—É—á—à–∏–π retention: {comparison['best_retention'].forest_name} ({comparison['best_retention'].member_retention_rate:.1f}%)\n"
            text += f"‚Ä¢ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {comparison['most_active'].forest_name} ({comparison['most_active'].total_members})\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ª–µ—Å–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ª–µ—Å–æ–≤.")
    
    async def handle_top_forests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top_forests"""
        try:
            from database import get_db_session, Forest
            session = get_db_session()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–µ—Å–∞
                forests = session.query(Forest).all()
                
                if not forests:
                    await update.message.reply_text("üå≤ –ü–æ–∫–∞ –Ω–µ—Ç –ª–µ—Å–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ—Å–∞
                forest_analytics = []
                for forest in forests:
                    analytics = await self.forest_analytics_manager.get_forest_analytics(forest.id)
                    if analytics:
                        forest_analytics.append(analytics)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª—É –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                forest_analytics.sort(key=lambda x: x.engagement_score, reverse=True)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø –ª–µ—Å–æ–≤
                text = "üèÜ **–¢–æ–ø –ª–µ—Å–æ–≤ –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏** üèÜ\n\n"
                
                for i, analytics in enumerate(forest_analytics[:10], 1):
                    if i == 1:
                        emoji = "ü•á"
                    elif i == 2:
                        emoji = "ü•à"
                    elif i == 3:
                        emoji = "ü•â"
                    else:
                        emoji = "üèÖ"
                    
                    text += f"{emoji} **{analytics.forest_name}**\n"
                    text += f"   üìä –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {analytics.engagement_score:.1f}/100\n"
                    text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {analytics.total_members}\n"
                    text += f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {analytics.activity_rate:.1f}%\n"
                    text += f"   üÜî ID: `{analytics.forest_id}`\n\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
                
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ª–µ—Å–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ª–µ—Å–æ–≤.")
    
    async def handle_user_forest_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user_forest_stats"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await self.user_forest_profile_manager.get_user_forest_profile(user.id)
            
            if not profile:
                await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–µ—Å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            forest_stats = profile.forest_stats
            
            text = f"üå≤ **–õ–µ—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {profile.first_name}** üå≤\n\n"
            
            text += "üìä **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            text += f"‚Ä¢ –õ–µ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {forest_stats.created_forests}\n"
            text += f"‚Ä¢ –õ–µ—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫: {forest_stats.member_forests}\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ª–µ—Å–æ–≤: {forest_stats.total_forests}\n"
            text += f"‚Ä¢ –î–Ω–µ–π –≤ –ª–µ—Å–∞—Ö: {forest_stats.days_in_forests}\n\n"
            
            text += "üìû **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã–∑–æ–≤–∞—Ö:**\n"
            text += f"‚Ä¢ –í—ã–∑–æ–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {forest_stats.total_summons_received}\n"
            text += f"‚Ä¢ –í—ã–∑–æ–≤–æ–≤ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è: {forest_stats.total_summons_responded}\n"
            text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–∏–∫–æ–≤: {forest_stats.response_rate:.1f}%\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—Å–æ–≤: {forest_stats.avg_forest_activity:.1f}%\n\n"
            
            # –ë–∞–ª–ª –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            engagement_emoji = "üî•" if forest_stats.forest_engagement_score >= 80 else "üìà" if forest_stats.forest_engagement_score >= 60 else "üìä"
            text += f"{engagement_emoji} **–ë–∞–ª–ª –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ª–µ—Å–∞—Ö: {forest_stats.forest_engagement_score:.1f}/100**\n\n"
            
            # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ª–µ—Å
            if forest_stats.most_active_forest:
                text += f"üåü **–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ª–µ—Å:** {forest_stats.most_active_forest['name']}\n\n"
            
            # –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if forest_stats.recent_forest_activity:
                text += "üïê **–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–µ—Å–∞—Ö:**\n"
                for activity in forest_stats.recent_forest_activity[:3]:
                    time_str = activity["timestamp"].strftime("%d.%m %H:%M")
                    text += f"‚Ä¢ {activity['description']} ({time_str})\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üë§ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="full_profile"),
                    InlineKeyboardButton("üå≤ –ú–æ–∏ –ª–µ—Å–∞", callback_data="my_forests")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def handle_forest_members_ranking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forest_members_ranking"""
        if not context.args:
            await update.message.reply_text(
                "üèÜ **–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞** üèÜ\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forest_members_ranking <ID_–ª–µ—Å–∞>\n"
                "–ü—Ä–∏–º–µ—Ä: /forest_members_ranking les_i_volki\n\n"
                "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏."
            )
            return
        
        forest_id = context.args[0]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            engagements = await self.forest_analytics_manager.get_member_engagement_ranking(forest_id)
            
            if not engagements:
                await update.message.reply_text("‚ùå –í –ª–µ—Å—É –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            ranking_text = self.forest_analytics_manager.format_engagement_ranking(engagements)
            
            await update.message.reply_text(ranking_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    async def handle_forest_profile_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ª–µ—Å–∞"""
        query = update.callback_query
        forest_id = query.data.replace("forest_profile_", "")
        
        try:
            profile = await self.forest_profile_manager.get_forest_profile(forest_id)
            if profile:
                profile_text = self.forest_profile_manager.format_forest_profile(profile)
                await query.edit_message_text(profile_text, parse_mode='Markdown')
            else:
                await query.answer("‚ùå –õ–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –ø—Ä–æ—Ñ–∏–ª—è –ª–µ—Å–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ª–µ—Å–∞")
    
    async def handle_forest_stats_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–µ—Å–∞"""
        query = update.callback_query
        forest_id = query.data.replace("forest_stats_", "")
        
        try:
            analytics = await self.forest_analytics_manager.get_forest_analytics(forest_id)
            if analytics:
                stats_text = self.forest_analytics_manager.format_analytics_report(analytics)
                await query.edit_message_text(stats_text, parse_mode='Markdown')
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–µ—Å–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def handle_forest_analytics_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ—Å–∞"""
        query = update.callback_query
        forest_id = query.data.replace("forest_analytics_", "")
        
        try:
            analytics = await self.forest_analytics_manager.get_forest_analytics(forest_id)
            if analytics:
                analytics_text = self.forest_analytics_manager.format_analytics_report(analytics)
                await query.edit_message_text(analytics_text, parse_mode='Markdown')
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ—Å–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    async def handle_user_profile_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        user = update.effective_user
        
        try:
            profile = await self.user_forest_profile_manager.get_user_forest_profile(user.id)
            if profile:
                profile_text = self.user_forest_profile_manager.format_user_forest_profile(profile)
                await query.edit_message_text(profile_text, parse_mode='Markdown')
            else:
                await query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    
    async def handle_my_forests_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–æ–∏—Ö –ª–µ—Å–æ–≤"""
        query = update.callback_query
        user = update.effective_user
        
        try:
            forests_info = await self.forest_profile_manager.get_user_forests(user.id)
            forests_text = self.forest_profile_manager.format_user_forests(forests_info)
            await query.edit_message_text(forests_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –º–æ–∏—Ö –ª–µ—Å–æ–≤: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ—Å–æ–≤")
    
    async def handle_show_all_forests_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ª–µ—Å–æ–≤"""
        query = update.callback_query
        
        try:
            from database import get_db_session, Forest
            session = get_db_session()
            
            try:
                forests = session.query(Forest).all()
                
                if not forests:
                    text = "üå≤ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ª–µ—Å–æ–≤."
                else:
                    text = "üå≤ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ—Å–∞:** üå≤\n\n"
                    
                    for i, forest in enumerate(forests, 1):
                        member_count = len(forest.members)
                        max_count = forest.max_size or "‚àû"
                        
                        text += (
                            f"{i}. **{forest.name}**\n"
                            f"   üìù {forest.description}\n"
                            f"   üë• {member_count}/{max_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                            f"   üîí {'–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if forest.privacy == 'private' else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n"
                            f"   üÜî ID: `{forest.id}`\n\n"
                        )
                
                await query.edit_message_text(text, parse_mode='Markdown')
                
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –≤—Å–µ—Ö –ª–µ—Å–æ–≤: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ—Å–æ–≤")
    
    async def handle_forest_ranking_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª–µ—Å–∞"""
        query = update.callback_query
        forest_id = query.data.replace("forest_ranking_", "")
        
        try:
            engagements = await self.forest_analytics_manager.get_member_engagement_ranking(forest_id)
            if engagements:
                ranking_text = self.forest_analytics_manager.format_engagement_ranking(engagements)
                await query.edit_message_text(ranking_text, parse_mode='Markdown')
            else:
                await query.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª–µ—Å–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
    
    async def handle_forest_comparison_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–µ—Å–æ–≤"""
        query = update.callback_query
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è callback —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        await query.answer("‚ÑπÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /forest_comparison")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
extended_forest_profile_handlers: Optional[ExtendedForestProfileHandlers] = None

def init_extended_forest_profile_handlers() -> ExtendedForestProfileHandlers:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–µ—Å–æ–≤"""
    global extended_forest_profile_handlers
    extended_forest_profile_handlers = ExtendedForestProfileHandlers()
    return extended_forest_profile_handlers

def get_extended_forest_profile_handlers() -> ExtendedForestProfileHandlers:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–µ—Å–æ–≤"""
    if extended_forest_profile_handlers is None:
        raise RuntimeError("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    return extended_forest_profile_handlers
