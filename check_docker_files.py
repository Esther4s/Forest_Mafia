#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Docker
"""

import os
import re

def check_dockerfile():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Dockerfile"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile...")
    
    if not os.path.exists('Dockerfile'):
        print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open('Dockerfile', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
    required_directives = ['FROM', 'WORKDIR', 'COPY', 'RUN', 'CMD']
    missing = [d for d in required_directives if d not in content]
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã: {', '.join(missing)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
    if 'FROM python:' not in content:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ Python")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if 'pip install' not in content:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    
    print("‚úÖ Dockerfile –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç docker-compose.yml"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml...")
    
    if not os.path.exists('docker-compose.yml'):
        print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open('docker-compose.yml', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    required_sections = ['version', 'services', 'volumes', 'networks']
    missing = [s for s in required_sections if s not in content]
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {', '.join(missing)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    if 'forest-mafia-bot' not in content:
        print("‚ùå –°–µ—Ä–≤–∏—Å forest-mafia-bot –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if 'postgres' not in content:
        print("‚ùå –°–µ—Ä–≤–∏—Å postgres –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt...")
    
    if not os.path.exists('requirements.txt'):
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open('requirements.txt', 'r', encoding='utf-8') as f:
        content = f.read().strip()
    
    if not content:
        print("‚ùå requirements.txt –ø—É—Å—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    required_packages = [
        'python-telegram-bot',
        'sqlalchemy',
        'psycopg2-binary',
        'python-dotenv'
    ]
    
    missing = []
    for package in required_packages:
        if package not in content:
            missing.append(package)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
        return False
    
    print("‚úÖ requirements.txt –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def check_env_example():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã .env —Ñ–∞–π–ª–æ–≤"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ .env —Ñ–∞–π–ª–æ–≤...")
    
    env_files = ['env_example.txt', 'production.env.example', '.env.example']
    found_files = []
    
    for file in env_files:
        if os.path.exists(file):
            found_files.append(file)
    
    if not found_files:
        print("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã .env —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã .env: {', '.join(found_files)}")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê DOCKER –§–ê–ô–õ–û–í")
    print("=" * 40)
    
    tests = [
        ("Dockerfile", check_dockerfile),
        ("Docker Compose", check_docker_compose),
        ("Requirements", check_requirements),
        ("Env Examples", check_env_example),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 40)
    print(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï DOCKER –§–ê–ô–õ–´ –ö–û–†–†–ï–ö–¢–ù–´!")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä–∫–µ –∏ –¥–µ–ø–ª–æ—é")
        print("üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è:")
        print("   docker build -t forest-mafia-bot .")
        print("   docker-compose up -d")
        return True
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –§–ê–ô–õ–´ –¢–†–ï–ë–£–Æ–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")
        return False

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
