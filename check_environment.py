#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import sys

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        print(f"‚úÖ DATABASE_URL: {database_url[:30]}...")
        
        # –ü–∞—Ä—Å–∏–º URL
        try:
            from urllib.parse import urlparse
            parsed = urlparse(database_url)
            print(f"  - –•–æ—Å—Ç: {parsed.hostname}")
            print(f"  - –ü–æ—Ä—Ç: {parsed.port}")
            print(f"  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {parsed.path[1:]}")
            print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {parsed.username}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {e}")
    else:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
    bot_token = os.environ.get('BOT_TOKEN')
    if bot_token:
        print(f"‚úÖ BOT_TOKEN: {bot_token[:10]}...")
    else:
        print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_vars = ['LOG_LEVEL', 'ENVIRONMENT', 'DEBUG']
    for var in env_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ö†Ô∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print("\nüéâ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ü–†–û–í–ï–†–ï–ù–´!")
    return True

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î")
    print("=" * 40)
    
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    
    try:
        import psycopg2
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            tables = cursor.fetchall()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            
            cursor.close()
            conn.close()
            return True
        else:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = check_environment()
    
    if env_ok:
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        db_ok = test_database_connection()
        
        if db_ok:
            print("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢!")
            return True
        else:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•!")
            return False
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò –û–ö–†–£–ñ–ï–ù–ò–Ø!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
