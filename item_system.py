#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –õ–µ—Å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç—ã
"""

import logging
from typing import Dict, List, Any, Optional, Tuple
from enum import Enum
from game_logic import Role, Team, GamePhase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ItemType(Enum):
    """–¢–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    BOOST = "boost"           # –£—Å–∏–ª–µ–Ω–∏—è (–¥–µ–π—Å—Ç–≤—É—é—Ç –æ–¥–Ω—É –∏–≥—Ä—É)
    CONSUMABLE = "consumable" # –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ (—Ç—Ä–∞—Ç—è—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
    PERMANENT = "permanent"   # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ (–¥–µ–π—Å—Ç–≤—É—é—Ç –≤—Å—é –∏–≥—Ä—É)

class ItemEffect:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    
    def __init__(self, item_name: str, item_type: ItemType, description: str):
        self.item_name = item_name
        self.item_type = item_type
        self.description = description
    
    def can_use(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        
        Returns:
            Tuple[bool, str]: (–º–æ–∂–Ω–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        return True, "–ü—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—à–Ω–æ_–ø—Ä–∏–º–µ–Ω–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        return True, "–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω"

class ActiveRoleBoost(ItemEffect):
    """üé≠ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å - –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏"""
    
    def __init__(self):
        super().__init__(
            "üé≠ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å",
            ItemType.BOOST,
            "–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏ (–≤–æ–ª–∫, –ª–∏—Å–∞, –∫—Ä–æ—Ç, –±–æ–±—ë—Ä) –¥–æ 99%. –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ active_role_boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"active_role_boost": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üé≠ –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–≤—ã—à–µ–Ω –¥–æ 99%!"
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å–∏–ª–µ–Ω–∏–µ —Ä–æ–ª–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class ForestMask(ItemEffect):
    """üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ - —Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–ª—å –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞"""
    
    def __init__(self):
        super().__init__(
            "üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞",
            ItemType.CONSUMABLE,
            "–û–¥–∏–Ω —Ä–∞–∑ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞. –¢—Ä–∞—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ."
        )
    
    def can_use(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"""
        try:
            from database_psycopg2 import has_item_in_inventory
            
            if has_item_in_inventory(user_id, self.item_name):
                return True, "üåø –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            else:
                return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–µ—Å–Ω–æ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∫—É (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–æ—Ç–∞)"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"mask_active": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í–∞—à–∞ —Ä–æ–ª—å —Å–∫—Ä—ã—Ç–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å–∫–∏—Ä–æ–≤–∫—É"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class BeaverProtection(ItemEffect):
    """üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞ - —Å–ø–∞—Å–∞–µ—Ç –æ—Ç –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–æ–≤"""
    
    def __init__(self):
        super().__init__(
            "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞",
            ItemType.CONSUMABLE,
            "–°–ø–∞—Å–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–æ–≤. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞—Ç–∞–∫–µ."
        )
    
    def can_use(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"""
        try:
            from database_psycopg2 import has_item_in_inventory
            
            if has_item_in_inventory(user_id, self.item_name):
                return True, "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            else:
                return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—â–∏—Ç—ã –±–æ–±—Ä–∞"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ –≤–æ–ª–∫–æ–≤)"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"protection_active": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–æ–≤."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class GoldenNut(ItemEffect):
    """üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫ - —É–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∏–≥—Ä—É"""
    
    def __init__(self):
        super().__init__(
            "üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫",
            ItemType.BOOST,
            "–£–¥–≤–∞–∏–≤–∞–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ä–µ—à–∫–∏ –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É. –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ double_reward –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"double_reward": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É –±—É–¥–µ—Ç —É–¥–≤–æ–µ–Ω–∞."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class NightVision(ItemEffect):
    """üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö –≤ –Ω–æ—á–∏"""
    
    def __init__(self):
        super().__init__(
            "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
            ItemType.CONSUMABLE,
            "–í –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ –∏–≥—Ä–æ–∫ –≤–∏–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö (–∫—Ç–æ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–ª/–∞—Ç–∞–∫–æ–≤–∞–ª). –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def can_use(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏ –Ω–æ—á–Ω–∞—è –ª–∏ —Ñ–∞–∑–∞"""
        try:
            from database_psycopg2 import has_item_in_inventory
            
            if not has_item_in_inventory(user_id, self.item_name):
                return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ—á–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞
            if game_state.get('phase') != GamePhase.NIGHT:
                return False, "‚ùå –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é"
            
            return True, "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"night_vision_active": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –í—ã –≤–∏–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class SharpNose(ItemEffect):
    """üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    
    def __init__(self):
        super().__init__(
            "üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö",
            ItemType.BOOST,
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ. –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ reveal_roles –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"reveal_roles": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç—Ä—ã–π –Ω—é—Ö"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class ForestElixir(ItemEffect):
    """üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä - –≤–æ—Å–∫—Ä–µ—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞"""
    
    def __init__(self):
        super().__init__(
            "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä",
            ItemType.CONSUMABLE,
            "–í–æ—Å–∫—Ä–µ—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –µ–≥–æ —É–±–∏–ª–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏."
        )
    
    def can_use(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏ –º–µ—Ä—Ç–≤ –ª–∏ –∏–≥—Ä–æ–∫"""
        try:
            from database_psycopg2 import has_item_in_inventory
            
            if not has_item_in_inventory(user_id, self.item_name):
                return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–µ—Å–Ω–æ–≥–æ —ç–ª–∏–∫—Å–∏—Ä–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤
            if game_state.get('player_alive', True):
                return False, "‚ùå –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏"
            
            return True, "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–í–æ—Å–∫—Ä–µ—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        try:
            from database_psycopg2 import remove_item_from_inventory
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            success = remove_item_from_inventory(user_id, self.item_name, 1)
            
            if success:
                return True, "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –í—ã –≤–æ—Å–∫—Ä–µ—à–µ–Ω—ã!"
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class TreeOfLife(ItemEffect):
    """üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏ - –¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å"""
    
    def __init__(self):
        super().__init__(
            "üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏",
            ItemType.PERMANENT,
            "–î–∞—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å –Ω–∞ –≤—Å—é –∏–≥—Ä—É (—É–º–µ—Ä–µ—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–≤—É—Ö –∞—Ç–∞–∫). –î–µ–π—Å—Ç–≤—É–µ—Ç –≤—Å—é –∏–≥—Ä—É."
        )
    
    def can_use(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"""
        try:
            from database_psycopg2 import has_item_in_inventory
            
            if has_item_in_inventory(user_id, self.item_name):
                return True, "üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            else:
                return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä–µ–≤–∞ –∂–∏–∑–Ω–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
    
    def apply_effect(self, user_id: int, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å"""
        try:
            from database_psycopg2 import update_item_flags
            
            flags = {"extra_life_active": True}
            success = update_item_flags(user_id, self.item_name, flags)
            
            if success:
                return True, "üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–µ–≤–æ –∂–∏–∑–Ω–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {self.item_name}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"

class ItemSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        self.items = {
            "üé≠ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å": ActiveRoleBoost(),
            "üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞": ForestMask(),
            "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞": BeaverProtection(),
            "üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫": GoldenNut(),
            "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ": NightVision(),
            "üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö": SharpNose(),
            "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä": ForestElixir(),
            "üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏": TreeOfLife()
        }
    
    def get_item_effect(self, item_name: str) -> Optional[ItemEffect]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        return self.items.get(item_name)
    
    def can_use_item(self, user_id: int, item_name: str, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
        item_effect = self.get_item_effect(item_name)
        if not item_effect:
            return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        
        return item_effect.can_use(user_id, game_state)
    
    def use_item(self, user_id: int, item_name: str, game_state: Dict[str, Any]) -> Tuple[bool, str]:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç"""
        item_effect = self.get_item_effect(item_name)
        if not item_effect:
            return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        can_use, check_message = item_effect.can_use(user_id, game_state)
        if not can_use:
            return False, check_message
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        success, message = item_effect.apply_effect(user_id, game_state)
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–Ω—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if success and item_effect.item_type == ItemType.CONSUMABLE:
            try:
                from database_psycopg2 import remove_item_from_inventory
                remove_item_from_inventory(user_id, item_name, 1)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_name}: {e}")
        
        return success, message
    
    def get_item_info(self, item_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ"""
        item_effect = self.get_item_effect(item_name)
        if not item_effect:
            return None
        
        return {
            'name': item_effect.item_name,
            'type': item_effect.item_type.value,
            'description': item_effect.description
        }
    
    def get_all_items(self) -> Dict[str, ItemEffect]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        return self.items.copy()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
item_system = ItemSystem()
