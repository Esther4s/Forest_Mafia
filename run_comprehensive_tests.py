#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã ForestMafia
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∫–∞–∫ —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
"""

import asyncio
import logging
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from comprehensive_system_test import ComprehensiveSystemTest
from test_buttons_and_callbacks import ButtonsAndCallbacksTest
from test_night_actions_comprehensive import NightActionsComprehensiveTest
from test_database_comprehensive import DatabaseComprehensiveTest
from test_commands_comprehensive import CommandsComprehensiveTest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('comprehensive_test_results.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class MasterTestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.test_suites = []
        self.results = {}
        self.start_time = None
        self.end_time = None
        
    def add_test_suite(self, test_suite_class, name, description):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä"""
        self.test_suites.append({
            'class': test_suite_class,
            'name': name,
            'description': description
        })
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ FORESTMAFIA")
        logger.info("=" * 80)
        logger.info(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üë®‚Äçüíª –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        logger.info("=" * 80)
        
        self.start_time = time.time()
        
        total_passed = 0
        total_failed = 0
        
        for i, test_suite in enumerate(self.test_suites, 1):
            logger.info(f"\nüìã –¢–ï–°–¢–û–í–´–ô –ù–ê–ë–û–† {i}/{len(self.test_suites)}: {test_suite['name']}")
            logger.info(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {test_suite['description']}")
            logger.info("-" * 60)
            
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
                suite_instance = test_suite['class']()
                suite_instance.setUp()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
                suite_start_time = time.time()
                success = suite_instance.run_all_tests()
                suite_end_time = time.time()
                suite_duration = suite_end_time - suite_start_time
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.results[test_suite['name']] = {
                    'success': success,
                    'duration': suite_duration,
                    'passed': getattr(suite_instance, 'passed_tests', 0),
                    'failed': getattr(suite_instance, 'failed_tests', 0)
                }
                
                if success:
                    total_passed += 1
                    logger.info(f"‚úÖ {test_suite['name']} - –ü–†–û–ô–î–ï–ù ({suite_duration:.2f}—Å)")
                else:
                    total_failed += 1
                    logger.error(f"‚ùå {test_suite['name']} - –ü–†–û–í–ê–õ–ï–ù ({suite_duration:.2f}—Å)")
                
                suite_instance.tearDown()
                
            except Exception as e:
                total_failed += 1
                logger.error(f"üí• {test_suite['name']} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
                self.results[test_suite['name']] = {
                    'success': False,
                    'duration': 0,
                    'passed': 0,
                    'failed': 1,
                    'error': str(e)
                }
        
        self.end_time = time.time()
        total_duration = self.end_time - self.start_time
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_final_results(total_passed, total_failed, total_duration)
        
        return total_failed == 0
    
    def print_final_results(self, total_passed, total_failed, total_duration):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "=" * 80)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_suites = total_passed + total_failed
        success_rate = (total_passed / total_suites * 100) if total_suites > 0 else 0
        
        logger.info(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: {total_suites}")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {total_passed}")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_failed}")
        logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        logger.info(f"   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–±–æ—Ä–∞–º
        logger.info(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for suite_name, result in self.results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result['success'] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            duration = result['duration']
            passed = result.get('passed', 0)
            failed = result.get('failed', 0)
            
            logger.info(f"   ‚Ä¢ {suite_name}: {status} ({duration:.2f}—Å)")
            if passed > 0 or failed > 0:
                logger.info(f"     - –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}")
                logger.info(f"     - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
            
            if 'error' in result:
                logger.info(f"     - –û—à–∏–±–∫–∞: {result['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if total_failed == 0:
            logger.info("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        else:
            logger.info("   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:")
            for suite_name, result in self.results.items():
                if not result['success']:
                    logger.info(f"     - {suite_name}: —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        logger.info(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        logger.info(f"   ‚Ä¢ –ù–∞—á–∞–ª–æ: {datetime.fromtimestamp(self.start_time).strftime('%H:%M:%S')}")
        logger.info(f"   ‚Ä¢ –ö–æ–Ω–µ—Ü: {datetime.fromtimestamp(self.end_time).strftime('%H:%M:%S')}")
        logger.info(f"   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        if total_failed == 0:
            logger.info(f"\nüèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê –ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        else:
            logger.info(f"\n‚ö†Ô∏è –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        
        logger.info("=" * 80)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üå≤ ForestMafia Bot - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã üå≤")
    print("=" * 80)
    print("üë®‚Äçüíª –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–µ–Ω—å–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä
    master_runner = MasterTestRunner()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
    master_runner.add_test_suite(
        ComprehensiveSystemTest,
        "–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏, –∫–æ–º–∞–Ω–¥, —Ñ–∞–∑ –∏ –º–µ—Ö–∞–Ω–∏–∫"
    )
    
    master_runner.add_test_suite(
        ButtonsAndCallbacksTest,
        "–ö–Ω–æ–ø–∫–∏ –∏ Callbacks",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫, callback handlers –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"
    )
    
    master_runner.add_test_suite(
        NightActionsComprehensiveTest,
        "–ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Ä–æ–ª–µ–π –∏ —Ñ–∞–∑ –∏–≥—Ä—ã"
    )
    
    master_runner.add_test_suite(
        DatabaseComprehensiveTest,
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –º–∏–≥—Ä–∞—Ü–∏–π –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"
    )
    
    master_runner.add_test_suite(
        CommandsComprehensiveTest,
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    try:
        success = master_runner.run_all_tests()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('test_summary.txt', 'w', encoding='utf-8') as f:
            f.write(f"ForestMafia Bot - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–ï–®–ù–û' if success else '–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´'}\n")
            f.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {master_runner.end_time - master_runner.start_time:.2f} —Å–µ–∫—É–Ω–¥\n\n")
            
            for suite_name, result in master_runner.results.items():
                status = "–ü–†–û–ô–î–ï–ù" if result['success'] else "–ü–†–û–í–ê–õ–ï–ù"
                f.write(f"{suite_name}: {status} ({result['duration']:.2f}—Å)\n")
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
