#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã inventory –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from database_psycopg2 import init_db, close_db

def create_inventory_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É inventory –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return False
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = init_db()
        
        with db.get_connection() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ inventory
                check_query = """
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'inventory'
                    );
                """
                cursor.execute(check_query)
                exists = cursor.fetchone()[0]
                
                if exists:
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ inventory —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return True
                
                print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É inventory...")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É inventory
                create_table_sql = """
                    CREATE TABLE IF NOT EXISTS inventory (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        item_name VARCHAR(255) NOT NULL,
                        count INTEGER DEFAULT 1,
                        flags JSONB DEFAULT '{}'::jsonb,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                        UNIQUE(user_id, item_name)
                    );
                """
                
                cursor.execute(create_table_sql)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
                create_index_sql = """
                    CREATE INDEX IF NOT EXISTS idx_inventory_user_id ON inventory(user_id);
                """
                cursor.execute(create_index_sql)
                
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ inventory —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_inventory_user_id —Å–æ–∑–¥–∞–Ω!")
                
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã inventory: {e}")
        return False
    finally:
        close_db()

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory...")
    success = create_inventory_table()
    
    if success:
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ inventory —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        sys.exit(0)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã inventory!")
        sys.exit(1)
