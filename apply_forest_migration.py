#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –ª–µ—Å–æ–≤
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from database import init_database, get_db_session
from database import Forest, ForestMember, ForestInvite, ForestSetting

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def apply_forest_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ª–µ—Å–æ–≤"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        init_database()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = get_db_session()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ª–µ—Å–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQLAlchemy
            from database import Base
            Base.metadata.create_all(bind=session.bind)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ª–µ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É forests
            from sqlalchemy import text
            result = session.execute(text("SELECT COUNT(*) FROM forests")).scalar()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'forests' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–ø–∏—Å–µ–π: {result})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É forest_members
            result = session.execute(text("SELECT COUNT(*) FROM forest_members")).scalar()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'forest_members' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–ø–∏—Å–µ–π: {result})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É forest_invites
            result = session.execute(text("SELECT COUNT(*) FROM forest_invites")).scalar()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'forest_invites' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–ø–∏—Å–µ–π: {result})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É forest_settings
            result = session.execute(text("SELECT COUNT(*) FROM forest_settings")).scalar()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'forest_settings' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–ø–∏—Å–µ–π: {result})")
            
            logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            session.rollback()
            return False
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_forest_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–µ—Å–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤...")
        
        from forest_system import ForestManager
        from telegram import Bot
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º)
        class MockBot:
            def __init__(self):
                pass
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ª–µ—Å–æ–≤
        forest_manager = ForestManager(MockBot())
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–µ—Å–∞
        logger.info("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ—Å–∞...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ—Å–∞, –Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        # —ç—Ç–æ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


if __name__ == "__main__":
    print("üå≤ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤ üå≤")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if apply_forest_migration():
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        if test_forest_system():
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏!")
        sys.exit(1)
    
    print("\nüå≤ –°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üå≤")
