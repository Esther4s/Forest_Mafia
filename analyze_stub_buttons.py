#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–æ–ø–æ–∫ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –≤ –±–æ—Ç–µ
"""

import re
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def analyze_bot_buttons():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–ª—É—à–∫–∏"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≥–ª—É—à–µ–∫...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–æ—Ç–∞
    with open('bot.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å callback_data
    button_pattern = r'InlineKeyboardButton\([^,]+,\s*callback_data="([^"]+)"\)'
    buttons = re.findall(button_pattern, content)
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫ —Å callback_data")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    handler_pattern = r'def handle_([^(]+)\([^)]*\):'
    handlers = re.findall(handler_pattern, content)
    
    print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–∏–ø–∞–º
    button_groups = {
        'welcome': [],
        'game_control': [],
        'settings': [],
        'timers': [],
        'roles': [],
        'voting': [],
        'night_actions': [],
        'day_actions': [],
        'other': []
    }
    
    for button in buttons:
        if button.startswith('welcome_'):
            button_groups['welcome'].append(button)
        elif button in ['join_game', 'start_game', 'leave_registration', 'cancel_game', 'end_game']:
            button_groups['game_control'].append(button)
        elif button.startswith('settings_'):
            button_groups['settings'].append(button)
        elif button.startswith('timer_') or button.startswith('set_'):
            button_groups['timers'].append(button)
        elif button.startswith('role_'):
            button_groups['roles'].append(button)
        elif button.startswith('vote_') or button.startswith('wolf_vote_'):
            button_groups['voting'].append(button)
        elif button.startswith('night_'):
            button_groups['night_actions'].append(button)
        elif button.startswith('day_'):
            button_groups['day_actions'].append(button)
        else:
            button_groups['other'].append(button)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø –∫–Ω–æ–ø–æ–∫:")
    
    for group_name, group_buttons in button_groups.items():
        if group_buttons:
            print(f"\nüîπ {group_name.upper()} ({len(group_buttons)} –∫–Ω–æ–ø–æ–∫):")
            for button in group_buttons:
                print(f"  ‚Ä¢ {button}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥–ª—É—à–∫–∞–º–∏
    print("\nüö® –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ó–ê–ì–õ–£–®–ö–ò:")
    
    potential_stubs = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–ª–µ–π
    role_buttons = [b for b in buttons if b.startswith('role_')]
    if role_buttons:
        print(f"\nüé≠ –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–ª–µ–π (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–ª—É—à–∫–∏):")
        for button in role_buttons:
            print(f"  ‚Ä¢ {button}")
            potential_stubs.append({
                'button': button,
                'type': 'role_settings',
                'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π',
                'priority': 'medium'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
    timer_buttons = [b for b in buttons if b.startswith('set_')]
    if timer_buttons:
        print(f"\n‚è±Ô∏è –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–ª—É—à–∫–∏):")
        for button in timer_buttons:
            print(f"  ‚Ä¢ {button}")
            potential_stubs.append({
                'button': button,
                'type': 'timer_settings',
                'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–∑ –∏–≥—Ä—ã',
                'priority': 'medium'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    global_settings_buttons = [b for b in buttons if b.startswith('settings_global')]
    if global_settings_buttons:
        print(f"\nüåê –ö–Ω–æ–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–ª—É—à–∫–∏):")
        for button in global_settings_buttons:
            print(f"  ‚Ä¢ {button}")
            potential_stubs.append({
                'button': button,
                'type': 'global_settings',
                'description': '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
                'priority': 'low'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    reset_buttons = [b for b in buttons if 'reset' in b]
    if reset_buttons:
        print(f"\nüìä –ö–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–ª—É—à–∫–∏):")
        for button in reset_buttons:
            print(f"  ‚Ä¢ {button}")
            potential_stubs.append({
                'button': button,
                'type': 'reset_stats',
                'description': '–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã',
                'priority': 'low'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    night_buttons = [b for b in buttons if b.startswith('night_')]
    if night_buttons:
        print(f"\nüåô –ö–Ω–æ–ø–∫–∏ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–ª—É—à–∫–∏):")
        for button in night_buttons:
            print(f"  ‚Ä¢ {button}")
            potential_stubs.append({
                'button': button,
                'type': 'night_actions',
                'description': '–ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤',
                'priority': 'high'
            })
    
    return potential_stubs

def check_handler_implementation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–æ—Ç–∞
    with open('bot.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥–ª—É—à–∫–∞–º–∏
    handlers_to_check = [
        'handle_timer_values',
        'handle_role_settings', 
        'show_global_settings',
        'reset_game_stats',
        'toggle_test_mode',
        'show_night_duration_options',
        'show_day_duration_options',
        'show_vote_duration_options'
    ]
    
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:")
    
    for handler in handlers_to_check:
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        pattern = rf'async def {handler}\([^)]*\):'
        if re.search(pattern, content):
            print(f"  ‚úÖ {handler} - –Ω–∞–π–¥–µ–Ω")
            
            # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–æ–¥–∞
            method_pattern = rf'async def {handler}\([^)]*\):(.*?)(?=async def|\Z)'
            match = re.search(method_pattern, content, re.DOTALL)
            if match:
                method_content = match.group(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
                if 'pass' in method_content or 'NotImplemented' in method_content:
                    print(f"    üö® {handler} - —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É!")
                elif len(method_content.strip()) < 100:
                    print(f"    ‚ö†Ô∏è {handler} - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
                else:
                    print(f"    ‚úÖ {handler} - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            print(f"  ‚ùå {handler} - –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–Ω–∞–ª–∏–∑ –∫–Ω–æ–ø–æ–∫ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –≤ –±–æ—Ç–µ '–õ–µ—Å –∏ –í–æ–ª–∫–∏'")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    potential_stubs = analyze_bot_buttons()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    check_handler_implementation()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–ª—É—à–µ–∫
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –°–ü–ò–°–û–ö –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –ó–ê–ì–õ–£–®–ï–ö:")
    print("=" * 60)
    
    if potential_stubs:
        for i, stub in enumerate(potential_stubs, 1):
            priority_emoji = {
                'high': 'üî¥',
                'medium': 'üü°', 
                'low': 'üü¢'
            }
            print(f"{i}. {priority_emoji.get(stub['priority'], '‚ö™')} {stub['button']}")
            print(f"   –¢–∏–ø: {stub['type']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {stub['description']}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {stub['priority']}")
            print()
    else:
        print("‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–≥–ª—É—à–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:")
    print("1. üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤")
    print("2. üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π –∏ —Ç–∞–π–º–µ—Ä–æ–≤")
    print("3. üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    main()
