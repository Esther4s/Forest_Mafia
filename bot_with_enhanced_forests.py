#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë–æ—Ç "–õ–µ—Å –∏ –í–æ–ª–∫–∏" —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–µ—Å–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø—Ä–æ—Ñ–∏–ª–∏ –ª–µ—Å–æ–≤, –∞–Ω–∞–ª–∏—Ç–∏–∫—É, —Ä–µ–π—Ç–∏–Ω–≥–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import asyncio
import logging
from typing import Dict, Optional

from telegram import Update, Bot, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
from config import BOT_TOKEN
from database import init_database

# –ò–º–ø–æ—Ä—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤
from enhanced_forest_integration import init_enhanced_forest_integration, get_enhanced_forest_integration

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ForestWolvesBotWithEnhancedForests:
    """–ë–æ—Ç –õ–µ—Å –∏ –í–æ–ª–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–µ—Å–æ–≤"""
    
    def __init__(self):
        self.bot_token = BOT_TOKEN
        self.application = None
        self.enhanced_forest_integration = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–µ—Å–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            init_database()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.bot_token).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–µ—Å–æ–≤
            self.enhanced_forest_integration = init_enhanced_forest_integration(self.application.bot)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            await self._add_command_handlers()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
            await self._add_callback_handlers()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self._set_bot_commands()
            
            logger.info("‚úÖ –ë–æ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–µ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def _add_command_handlers(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("help", self._handle_help))
        self.application.add_handler(CommandHandler("help_forests", self._handle_help_forests))
        self.application.add_handler(CommandHandler("rules", self._handle_rules))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤
        forest_handlers = self.enhanced_forest_integration.get_command_handlers()
        for handler in forest_handlers:
            self.application.add_handler(handler)
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    async def _add_callback_handlers(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤"""
        # Callback-—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤
        forest_callbacks = self.enhanced_forest_integration.get_callback_handlers()
        for handler in forest_callbacks:
            self.application.add_handler(handler)
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand("help_forests", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ª–µ—Å–∞–º"),
            BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
            BotCommand("profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand("create_forest", "–°–æ–∑–¥–∞—Ç—å –ª–µ—Å"),
            BotCommand("forests", "–°–ø–∏—Å–æ–∫ –ª–µ—Å–æ–≤"),
            BotCommand("top_forests", "–¢–æ–ø –ª–µ—Å–æ–≤"),
        ]
        
        await self.application.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üå≤ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å –∏ –í–æ–ª–∫–∏ Bot!** üå≤\n\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏' —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ—Å–∞–º–∏.\n\n"
            "üéÆ **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é —Å –ª–µ—Å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ—Å–∞–º–∏ (–≥—Ä—É–ø–ø–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ª–µ—Å–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑—ã–≤–∞ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è\n\n"
            "üå≤ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n"
            "‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ /forests - –Ω–∞–π—Ç–∏ –ª–µ—Å–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ /create_forest - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ª–µ—Å\n"
            "‚Ä¢ /help_forests - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ª–µ—Å–∞–º\n\n"
            "üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã –≤ –ª–µ—Å—É! üå≤"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
                InlineKeyboardButton("üå≤ –í—Å–µ –ª–µ—Å–∞", callback_data="show_all_forests")
            ],
            [
                InlineKeyboardButton("üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –ª–µ—Å", callback_data="create_forest"),
                InlineKeyboardButton("üèÜ –¢–æ–ø –ª–µ—Å–æ–≤", callback_data="top_forests")
            ],
            [
                InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="help_forests")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def _handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üå≤ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º** üå≤\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /help_forests - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ª–µ—Å–∞–º\n"
            "‚Ä¢ /rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –ª–µ—Å–∞–º
        help_text += self.enhanced_forest_integration.get_forest_commands_summary()
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def _handle_help_forests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help_forests"""
        help_text = self.enhanced_forest_integration.get_help_text()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
                InlineKeyboardButton("üå≤ –í—Å–µ –ª–µ—Å–∞", callback_data="show_all_forests")
            ],
            [
                InlineKeyboardButton("üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –ª–µ—Å", callback_data="create_forest"),
                InlineKeyboardButton("üèÜ –¢–æ–ø –ª–µ—Å–æ–≤", callback_data="top_forests")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _handle_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules"""
        rules_text = (
            "üå≤ **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏'** üå≤\n\n"
            "**üé≠ –†–æ–ª–∏:**\n"
            "üê∫ **–í–æ–ª–∫–∏** - —Ö–∏—â–Ω–∏–∫–∏, –æ—Ö–æ—Ç—è—Ç—Å—è –ø–æ –Ω–æ—á–∞–º\n"
            "ü¶ä **–õ–∏—Å–∞** - —Ö–∏—â–Ω–∏–∫, –≤–æ—Ä—É–µ—Ç –ø—Ä–∏–ø–∞—Å—ã\n"
            "üê∞ **–ó–∞–π—Ü—ã** - —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "ü¶´ **–ö—Ä–æ—Ç** - —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏\n"
            "ü¶¶ **–ë–æ–±—ë—Ä** - —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π, –∑–∞—â–∏—â–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç\n\n"
            "**üèÜ –ü–æ–±–µ–¥–∞:**\n"
            "‚Ä¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –≤—Å–µ —Ö–∏—â–Ω–∏–∫–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã\n"
            "‚Ä¢ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n\n"
            "**üå≤ –°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤:**\n"
            "‚Ä¢ –õ–µ—Å–∞ - —ç—Ç–æ –≥—Ä—É–ø–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ª–µ—Å–∞ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑—ã–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ cooldown\n\n"
            "**üìä –ü—Ä–æ—Ñ–∏–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ª–µ—Å–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä –∏ –ª–µ—Å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–µ—Å–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üå≤"
        )
        
        await update.message.reply_text(rules_text)
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.application:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–µ—Å–æ–≤...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if self.application:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ForestWolvesBotWithEnhancedForests()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    if not await bot.initialize():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if not await bot.start_bot():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        return
    
    try:
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await bot.stop_bot()


if __name__ == "__main__":
    print("üå≤ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –õ–µ—Å –∏ –í–æ–ª–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–µ—Å–æ–≤ üå≤")
    print("=" * 70)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
