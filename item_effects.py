#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ "–õ–µ—Å–Ω–∞—è –º–∞—Ñ–∏—è"
"""

import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from database_psycopg2 import (
    get_user_inventory, 
    update_user_inventory, 
    add_active_effect, 
    get_active_effects,
    mark_effect_as_used,
    remove_effect
)

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
ITEM_EFFECTS = {
    "üé≠ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å": {
        "effect_type": "role_boost",
        "description": "–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 99% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ",
        "usage_phase": "before_game",
        "is_consumable": True,
        "effect_data": {"role_boost_chance": 0.99}
    },
    "üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞": {
        "effect_type": "mole_protection",
        "description": "–°–∫—Ä—ã–≤–∞–µ—Ç —Ç–≤–æ—é —Ä–æ–ª—å –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑",
        "usage_phase": "any",
        "is_consumable": True,
        "effect_data": {"protection_count": 1}
    },
    "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞": {
        "effect_type": "wolf_protection",
        "description": "–°–ø–∞—Å–∞–µ—Ç —Ç–µ–±—è –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç —É–±–∏–π—Å—Ç–≤–∞ –≤–æ–ª–∫–∞–º–∏",
        "usage_phase": "any",
        "is_consumable": True,
        "effect_data": {"shield": True}
    },
    "üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫": {
        "effect_type": "reward_double",
        "description": "–£–¥–≤–∞–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–µ—à–∫–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É",
        "usage_phase": "before_game",
        "is_consumable": True,
        "effect_data": {"multiplier": 2.0}
    },
    "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ": {
        "effect_type": "night_vision",
        "description": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ—á—å—é",
        "usage_phase": "before_game",
        "is_consumable": True,
        "effect_data": {"night_log": True}
    },
    "üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö": {
        "effect_type": "role_reveal",
        "description": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ",
        "usage_phase": "before_game",
        "is_consumable": True,
        "effect_data": {"reveal_all_roles": True}
    },
    "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä": {
        "effect_type": "resurrection",
        "description": "–í–æ—Å–∫—Ä–µ—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –µ–≥–æ —É–±–∏–ª–∏",
        "usage_phase": "before_game",
        "is_consumable": True,
        "effect_data": {"resurrection_count": 1}
    },
    "üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏": {
        "effect_type": "extra_life",
        "description": "–î–∞—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å –Ω–∞ –≤—Å—é –∏–≥—Ä—É",
        "usage_phase": "before_game",
        "is_consumable": False,
        "effect_data": {"extra_lives": 1}
    }
}


def get_item_info(item_name: str) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    
    Args:
        item_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    
    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∏–ª–∏ None
    """
    return ITEM_EFFECTS.get(item_name)


def can_use_item(user_id: int, item_name: str, game_phase: str = None) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        item_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        game_phase: –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã
    
    Returns:
        Tuple[bool, str]: (–º–æ–∂–Ω–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    inventory = get_user_inventory(user_id)
    if not inventory or item_name not in inventory:
        return False, "–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    item_info = get_item_info(item_name)
    if not item_info:
        return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if item_info["usage_phase"] == "before_game" and game_phase and game_phase != "waiting":
        return False, "–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!"
    
    return True, ""


def apply_item_effect(user_id: int, item_name: str, game_id: str = None, chat_id: int = None) -> Tuple[bool, str]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        item_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        game_id: ID –∏–≥—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        chat_id: ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        can_use, error_msg = can_use_item(user_id, item_name)
        if not can_use:
            return False, error_msg
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        item_info = get_item_info(item_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        success = add_active_effect(
            user_id=user_id,
            item_name=item_name,
            effect_type=item_info["effect_type"],
            effect_data=item_info["effect_data"],
            game_id=game_id,
            chat_id=chat_id
        )
        
        if not success:
            return False, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞!"
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if item_info["is_consumable"]:
            current_count = get_user_inventory(user_id).get(item_name, 0)
            if current_count > 1:
                update_user_inventory(user_id, item_name, current_count - 1)
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
                update_user_inventory(user_id, item_name, 0)
        
        return True, f"–¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª {item_name}!\n\n{item_info['description']}"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞!"


def get_user_active_effects(user_id: int, game_id: str = None, chat_id: int = None) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        game_id: ID –∏–≥—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        chat_id: ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    """
    return get_active_effects(user_id, game_id, chat_id)


def check_role_boost_effect(user_id: int) -> float:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —É—Å–∏–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è (1.0 = –±–µ–∑ —É—Å–∏–ª–µ–Ω–∏—è)
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "role_boost":
            return effect["effect_data"].get("role_boost_chance", 1.0)
    return 1.0


def check_mole_protection_effect(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –∫—Ä–æ—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞—â–∏—â–µ–Ω
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "mole_protection":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç—É –∏ —É–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
            mark_effect_as_used(effect["id"])
            return True
    return False


def check_wolf_protection_effect(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –≤–æ–ª–∫–æ–≤
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞—â–∏—â–µ–Ω
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "wolf_protection":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç—É –∏ —É–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
            mark_effect_as_used(effect["id"])
            return True
    return False


def check_reward_multiplier_effect(user_id: int) -> float:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —É–¥–≤–æ–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        float: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã (1.0 = –±–µ–∑ —É—Å–∏–ª–µ–Ω–∏—è)
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "reward_double":
            return effect["effect_data"].get("multiplier", 1.0)
    return 1.0


def check_night_vision_effect(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –Ω–æ—á–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "night_vision":
            return True
    return False


def check_role_reveal_effect(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ä–æ–ª–µ–π
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "role_reveal":
            return True
    return False


def check_resurrection_effect(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è
    """
    effects = get_user_active_effects(user_id)
    for effect in effects:
        if effect["effect_type"] == "resurrection":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
            mark_effect_as_used(effect["id"])
            return True
    return False


def check_extra_lives_effect(user_id: int) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–∏–∑–Ω–µ–π
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–∏–∑–Ω–µ–π
    """
    effects = get_user_active_effects(user_id)
    total_extra_lives = 0
    for effect in effects:
        if effect["effect_type"] == "extra_life":
            total_extra_lives += effect["effect_data"].get("extra_lives", 0)
    return total_extra_lives


def cleanup_game_effects(game_id: str) -> int:
    """
    –û—á–∏—â–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    
    Args:
        game_id: ID –∏–≥—Ä—ã
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    """
    try:
        from database_psycopg2 import get_connection
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    DELETE FROM active_effects 
                    WHERE game_id = %s
                """, (game_id,))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                if deleted_count > 0:
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä—ã {game_id}")
                
                return deleted_count
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä—ã: {e}")
        return 0
