"""
–°–∏—Å—Ç–µ–º–∞ –∏–≥—Ä–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
–ö–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
"""

import logging
from typing import Dict, Any, Optional, List, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class EffectType(Enum):
    """–¢–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    CONSUMABLE = "consumable"  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
    BOOST = "boost"  # –£—Å–∏–ª–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É
    PERMANENT = "permanent"  # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç

@dataclass
class PlayerState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ"""
    user_id: int
    role: str
    is_alive: bool
    lives: int = 1
    balance: int = 0
    buffs: List[str] = None
    debuffs: List[str] = None
    game_id: str = None
    chat_id: int = None
    
    def __post_init__(self):
        if self.buffs is None:
            self.buffs = []
        if self.debuffs is None:
            self.debuffs = []

@dataclass
class GameState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
    game_id: str
    chat_id: int
    phase: str
    players: Dict[int, PlayerState]
    round_number: int = 1

class ItemEffect:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    
    def __init__(self, item_name: str, effect_type: EffectType, description: str):
        self.item_name = item_name
        self.effect_type = effect_type
        self.description = description
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"""
        return True, "–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω", player_state

class ActiveRoleEffect(ItemEffect):
    """–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å - 99% —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏"""
    
    def __init__(self):
        super().__init__(
            item_name="üé≠ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å",
            effect_type=EffectType.BOOST,
            description="–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏ (–≤–æ–ª–∫, –ª–∏—Å–∞, –∫—Ä–æ—Ç, –±–æ–±—ë—Ä) –¥–æ 99%. –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
        if game_state.phase != "waiting":
            return False, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã"
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞—Ñ—Ñ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏"""
        if "active_role_boost" not in player_state.buffs:
            player_state.buffs.append("active_role_boost")
            return True, "üé≠ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å 99% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å!", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class ForestCamouflageEffect(ItemEffect):
    """–õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ - —Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–ª—å –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞"""
    
    def __init__(self):
        super().__init__(
            item_name="üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞",
            effect_type=EffectType.CONSUMABLE,
            description="–û–¥–∏–Ω —Ä–∞–∑ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞. –¢—Ä–∞—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞"""
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–æ—Ç–∞"""
        if "forest_camouflage" not in player_state.buffs:
            player_state.buffs.append("forest_camouflage")
            return True, "üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ö—Ä–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class BeaverShieldEffect(ItemEffect):
    """–ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é –∞—Ç–∞–∫—É –≤–æ–ª–∫–æ–≤"""
    
    def __init__(self):
        super().__init__(
            item_name="üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞",
            effect_type=EffectType.CONSUMABLE,
            description="–°–ø–∞—Å–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–æ–≤. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞—Ç–∞–∫–µ."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞"""
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–æ–≤"""
        if "beaver_shield" not in player_state.buffs:
            player_state.buffs.append("beaver_shield")
            return True, "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ –≤–æ–ª–∫–æ–≤ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class GoldenNutEffect(ItemEffect):
    """–ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫ - —É–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É"""
    
    def __init__(self):
        super().__init__(
            item_name="üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫",
            effect_type=EffectType.BOOST,
            description="–£–¥–≤–∞–∏–≤–∞–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ä–µ—à–∫–∏ –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É. –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞"""
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞—Ñ—Ñ —É–¥–≤–æ–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã"""
        if "golden_nut_boost" not in player_state.buffs:
            player_state.buffs.append("golden_nut_boost")
            return True, "üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –¥–≤–æ–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class NightVisionEffect(ItemEffect):
    """–ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ - –≤–∏–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ"""
    
    def __init__(self):
        super().__init__(
            item_name="üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
            effect_type=EffectType.CONSUMABLE,
            description="–í –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ –∏–≥—Ä–æ–∫ –≤–∏–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö (–∫—Ç–æ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–ª/–∞—Ç–∞–∫–æ–≤–∞–ª). –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞"""
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"""
        if "night_vision" not in player_state.buffs:
            player_state.buffs.append("night_vision")
            return True, "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class SharpNoseEffect(ItemEffect):
    """–û—Å—Ç—Ä—ã–π –Ω—é—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ"""
    
    def __init__(self):
        super().__init__(
            item_name="üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö",
            effect_type=EffectType.BOOST,
            description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ. –î–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
        if game_state.phase != "waiting":
            return False, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã"
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Å—Ç—Ä—ã–π –Ω—é—Ö"""
        if "sharp_nose" not in player_state.buffs:
            player_state.buffs.append("sharp_nose")
            return True, "üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ä–æ–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class ForestElixirEffect(ItemEffect):
    """–õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä - –≤–æ—Å–∫—Ä–µ—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏"""
    
    def __init__(self):
        super().__init__(
            item_name="üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä",
            effect_type=EffectType.CONSUMABLE,
            description="–í–æ—Å–∫—Ä–µ—à–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –µ–≥–æ —É–±–∏–ª–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞"""
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è"""
        if "forest_elixir" not in player_state.buffs:
            player_state.buffs.append("forest_elixir")
            return True, "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ï—Å–ª–∏ –≤–∞—Å —É–±—å—é—Ç, –≤—ã –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—Ç–µ —Å 1 –∂–∏–∑–Ω—å—é.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class TreeOfLifeEffect(ItemEffect):
    """–î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏ - –¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å –Ω–∞ –≤—Å—é –∏–≥—Ä—É"""
    
    def __init__(self):
        super().__init__(
            item_name="üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏",
            effect_type=EffectType.PERMANENT,
            description="–î–∞—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å –Ω–∞ –≤—Å—é –∏–≥—Ä—É (—É–º–µ—Ä–µ—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–≤—É—Ö –∞—Ç–∞–∫). –î–µ–π—Å—Ç–≤—É–µ—Ç –≤—Å—é –∏–≥—Ä—É."
        )
    
    def can_use(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
        if game_state.phase != "waiting":
            return False, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã"
        return True, ""
    
    def apply_effect(self, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å"""
        if "tree_of_life" not in player_state.buffs:
            player_state.buffs.append("tree_of_life")
            player_state.lives += 1
            return True, f"üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {player_state.lives} –∂–∏–∑–Ω–µ–π.", player_state
        return False, "–≠—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", player_state

class ItemEffectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.effects = {
            "üé≠ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å": ActiveRoleEffect(),
            "üåø –õ–µ—Å–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞": ForestCamouflageEffect(),
            "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞": BeaverShieldEffect(),
            "üå∞ –ó–æ–ª–æ—Ç–æ–π –æ—Ä–µ—à–µ–∫": GoldenNutEffect(),
            "üåô –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ": NightVisionEffect(),
            "üîç –û—Å—Ç—Ä—ã–π –Ω—é—Ö": SharpNoseEffect(),
            "üçÑ –õ–µ—Å–Ω–æ–π —ç–ª–∏–∫—Å–∏—Ä": ForestElixirEffect(),
            "üå≤ –î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏": TreeOfLifeEffect(),
        }
    
    def get_effect(self, item_name: str) -> Optional[ItemEffect]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞"""
        return self.effects.get(item_name)
    
    def can_use_item(self, item_name: str, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
        effect = self.get_effect(item_name)
        if not effect:
            return False, f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        return effect.can_use(player_state, game_state)
    
    def apply_item_effect(self, item_name: str, player_state: PlayerState, game_state: GameState) -> Tuple[bool, str, PlayerState]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"""
        effect = self.get_effect(item_name)
        if not effect:
            return False, f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω", player_state
        
        return effect.apply_effect(player_state, game_state)
    
    def get_item_info(self, item_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ"""
        effect = self.get_effect(item_name)
        if not effect:
            return None
        
        return {
            "item_name": effect.item_name,
            "effect_type": effect.effect_type.value,
            "description": effect.description,
            "is_consumable": effect.effect_type == EffectType.CONSUMABLE
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
effect_manager = ItemEffectManager()

def get_item_info(item_name: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ"""
    return effect_manager.get_item_info(item_name)

def can_use_item(user_id: int, item_name: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return True, ""

def apply_item_effect(user_id: int, item_name: str) -> Tuple[bool, str]:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return True, f"–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ '{item_name}' –ø—Ä–∏–º–µ–Ω–µ–Ω"