#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
"""

import os
import sys
from sqlalchemy import create_engine, text
from database import Base

def fix_database_schema():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['BOT_TOKEN'] = '8314318680:AAG1CDOB-SQhyFfCpqDIBm-U8ANz6Ggw94k'
    os.environ['DATABASE_URL'] = 'postgresql://postgres:JOoSxKXEcnXImgvwCWsfcQQDlnWSDNyD@hopper.proxy.rlwy.net:23049/railway'
    
    database_url = os.environ['DATABASE_URL']
    print(f"üîó DATABASE_URL: {database_url}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(database_url)
        
        with engine.connect() as connection:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            trans = connection.begin()
            
            try:
                print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã players
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'players' 
                    ORDER BY ordinal_position
                """))
                
                existing_columns = [row[0] for row in result]
                print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ players: {existing_columns}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                missing_columns = []
                
                if 'is_online' not in existing_columns:
                    missing_columns.append("is_online BOOLEAN DEFAULT TRUE")
                
                if 'joined_at' not in existing_columns:
                    missing_columns.append("joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                
                if 'died_at' not in existing_columns:
                    missing_columns.append("died_at TIMESTAMP")
                
                if 'death_reason' not in existing_columns:
                    missing_columns.append("death_reason VARCHAR(50)")
                
                if missing_columns:
                    print(f"\n‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                    
                    for column_def in missing_columns:
                        alter_sql = f"ALTER TABLE players ADD COLUMN {column_def}"
                        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {alter_sql}")
                        connection.execute(text(alter_sql))
                    
                    print("‚úÖ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É games
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'games' 
                    ORDER BY ordinal_position
                """))
                
                games_columns = [row[0] for row in result]
                print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ games: {games_columns}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É game_events
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'game_events' 
                    ORDER BY ordinal_position
                """))
                
                events_columns = [row[0] for row in result]
                print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ game_events: {events_columns}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ game_events
                events_missing = []
                if 'event_data' not in events_columns:
                    events_missing.append("event_data JSON")
                
                if events_missing:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ game_events: {events_missing}")
                    for column_def in events_missing:
                        alter_sql = f"ALTER TABLE game_events ADD COLUMN {column_def}"
                        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {alter_sql}")
                        connection.execute(text(alter_sql))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É player_actions
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'player_actions' 
                    ORDER BY ordinal_position
                """))
                
                actions_columns = [row[0] for row in result]
                print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ player_actions: {actions_columns}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ player_actions
                actions_missing = []
                if 'round_number' not in actions_columns:
                    actions_missing.append("round_number INTEGER NOT NULL DEFAULT 0")
                if 'phase' not in actions_columns:
                    actions_missing.append("phase VARCHAR(20) NOT NULL DEFAULT 'night'")
                
                if actions_missing:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ player_actions: {actions_missing}")
                    for column_def in actions_missing:
                        alter_sql = f"ALTER TABLE player_actions ADD COLUMN {column_def}"
                        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {alter_sql}")
                        connection.execute(text(alter_sql))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É votes
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'votes' 
                    ORDER BY ordinal_position
                """))
                
                votes_columns = [row[0] for row in result]
                print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ votes: {votes_columns}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ votes
                votes_missing = []
                if 'phase' not in votes_columns:
                    votes_missing.append("phase VARCHAR(20) NOT NULL DEFAULT 'voting'")
                
                if votes_missing:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ votes: {votes_missing}")
                    for column_def in votes_missing:
                        alter_sql = f"ALTER TABLE votes ADD COLUMN {column_def}"
                        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {alter_sql}")
                        connection.execute(text(alter_sql))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É player_stats
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'player_stats' 
                    ORDER BY ordinal_position
                """))
                
                stats_columns = [row[0] for row in result]
                print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ player_stats: {stats_columns}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É bot_settings
                result = connection.execute(text("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'bot_settings' 
                    ORDER BY ordinal_position
                """))
                
                settings_columns = [row[0] for row in result]
                print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ bot_settings: {settings_columns}")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                trans.commit()
                print("\n‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
                trans.rollback()
                raise
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def test_fixed_schema():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã...")
    
    try:
        from database import init_database, get_db_session, Game, Player, GameEvent
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_manager = init_database(os.environ['DATABASE_URL'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = get_db_session()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
            games_count = session.query(Game).count()
            print(f"üéÆ –ò–≥—Ä –≤ –±–∞–∑–µ: {games_count}")
            
            players_count = session.query(Player).count()
            print(f"üë§ –ò–≥—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ: {players_count}")
            
            events_count = session.query(GameEvent).count()
            print(f"üìù –°–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ: {events_count}")
            
            print("‚úÖ –°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
        finally:
            session.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    print("üå≤ Forest Mafia Bot - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    if fix_database_schema():
        if test_fixed_schema():
            print("\nüéâ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã –Ω–µ –ø—Ä–æ—à–µ–ª.")
            sys.exit(1)
    else:
        print("\nüí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –Ω–µ —É–¥–∞–ª–æ—Å—å.")
        sys.exit(1)
