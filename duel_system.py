"""
–°–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π 1v1 –¥–ª—è Forest Mafia Bot
–†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∂–∏–º "–ï–∂–∏–∫–∏" —Å 7 —Ä–æ–ª—è–º–∏ –∏ 4 —ç—Ç–∞–ø–∞–º–∏
"""

import asyncio
import random
import logging
from enum import Enum
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

class DuelRole(Enum):
    """–†–æ–ª–∏ –≤ –¥—É—ç–ª–∏"""
    WOLF = "wolf"        # üê∫ –í–æ–ª–∫ ‚Äî –∞—Ç–∞–∫—É–µ—Ç –Ω–æ—á—å—é
    HARE = "hare"        # üêá –ó–∞—è—Ü ‚Äî –∑–∞—â–∏—Ç–∞/—É–∫–ª–æ–Ω
    FOX = "fox"          # ü¶ä –õ–∏—Å–∞ ‚Äî –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏
    BEAVER = "beaver"    # ü¶´ –ë–æ–±—Ä ‚Äî –¥–≤–æ–π–Ω–æ–π —â–∏—Ç
    OWL = "owl"          # ü¶â –°–æ–≤–∞ ‚Äî —É–≥–∞–¥—ã–≤–∞–µ—Ç —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    BOAR = "boar"        # üêó –ö–∞–±–∞–Ω ‚Äî –∞—Ç–∞–∫–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É
    HEDGEHOG = "hedgehog" # ü¶î –Å–∂ ‚Äî –ø—Ä–∏ –∞—Ç–∞–∫–µ –æ–±–∞ —Ç–µ—Ä—è—é—Ç –∂–∏–∑–Ω—å

class DuelPhase(Enum):
    """–§–∞–∑—ã –¥—É—ç–ª–∏"""
    WAITING = "waiting"      # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    NIGHT = "night"          # üåë –ù–æ—á—å ‚Äî –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
    DAY = "day"              # ‚òÄÔ∏è –î–µ–Ω—å ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    CASINO = "casino"        # üé∞ –ö–∞–∑–∏–Ω–æ ‚Äî –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    FINAL = "final"          # üîÆ –§–∏–Ω–∞–ª ‚Äî —É–≥–∞–¥–∞–π–∫–∞
    FINISHED = "finished"    # –ó–∞–≤–µ—Ä—à–µ–Ω–∞

class DuelAction(Enum):
    """–î–µ–π—Å—Ç–≤–∏—è –≤ –¥—É—ç–ª–∏"""
    ATTACK = "attack"        # üó° –ê—Ç–∞–∫–∞
    DEFENSE = "defense"      # üõ° –ó–∞—â–∏—Ç–∞
    TRICK = "trick"          # üé≠ –û–±–º–∞–Ω

@dataclass
class DuelPlayer:
    """–ò–≥—Ä–æ–∫ –≤ –¥—É—ç–ª–∏"""
    user_id: int
    username: str
    role: DuelRole
    lives: int = 3
    special_used: bool = False
    last_action: Optional[DuelAction] = None

@dataclass
class Duel:
    """–î—É—ç–ª—å"""
    duel_id: int
    chat_id: int
    player1: DuelPlayer
    player2: DuelPlayer
    phase: DuelPhase = DuelPhase.WAITING
    current_round: int = 0
    winner: Optional[int] = None
    created_at: datetime = None

class DuelSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É—ç–ª—è–º–∏"""
    
    def __init__(self, db_connection=None):
        self.db = db_connection
        self.active_duels: Dict[int, Duel] = {}
        self.duel_invitations: Dict[int, Dict] = {}  # chat_id -> invitation_data
        
        # –†–æ–ª–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
        self.roles_info = {
            DuelRole.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–ê—Ç–∞–∫—É–µ—Ç –Ω–æ—á—å—é —Å —É–¥–≤–æ–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π",
                "special": "–ù–æ—á–Ω–∞—è –∞—Ç–∞–∫–∞: +1 —É—Ä–æ–Ω –≤ —Ñ–∞–∑–µ –Ω–æ—á–∏"
            },
            DuelRole.HARE: {
                "name": "üêá –ó–∞—è—Ü", 
                "description": "–ú–∞—Å—Ç–µ—Ä –∑–∞—â–∏—Ç—ã –∏ —É–∫–ª–æ–Ω–µ–Ω–∏—è",
                "special": "–£–∫–ª–æ–Ω–µ–Ω–∏–µ: 50% —à–∞–Ω—Å –∏–∑–±–µ–∂–∞—Ç—å –∞—Ç–∞–∫–∏"
            },
            DuelRole.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–•–∏—Ç—Ä–∞—è, –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏",
                "special": "–û–±–º–µ–Ω —Ä–æ–ª—è–º–∏: –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –¥—É—ç–ª—å"
            },
            DuelRole.BEAVER: {
                "name": "ü¶´ –ë–æ–±—Ä",
                "description": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å, —Å—Ç–∞–≤–∏—Ç –¥–≤–æ–π–Ω–æ–π —â–∏—Ç",
                "special": "–î–≤–æ–π–Ω–æ–π —â–∏—Ç: –±–ª–æ–∫–∏—Ä—É–µ—Ç 2 –∞—Ç–∞–∫–∏"
            },
            DuelRole.OWL: {
                "name": "ü¶â –°–æ–≤–∞",
                "description": "–ú—É–¥—Ä–∞—è, —É–≥–∞–¥—ã–≤–∞–µ—Ç —Ö–æ–¥—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                "special": "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: —É–≥–∞–¥—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"
            },
            DuelRole.BOAR: {
                "name": "üêó –ö–∞–±–∞–Ω",
                "description": "–ü—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É, –Ω–æ —Å–ª–∞–± –ø—Ä–æ—Ç–∏–≤ –æ–±–º–∞–Ω–∞",
                "special": "–ü—Ä–æ–±–∏–≤–∞–Ω–∏–µ: –∞—Ç–∞–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç—É"
            },
            DuelRole.HEDGEHOG: {
                "name": "ü¶î –Å–∂",
                "description": "–ü—Ä–∏ –∞—Ç–∞–∫–µ —Ä–∞–Ω–∏—Ç –∏ —Å–µ–±—è, –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                "special": "–®–∏–ø—ã: –ø—Ä–∏ –∞—Ç–∞–∫–µ –æ–±–∞ —Ç–µ—Ä—è—é—Ç –∂–∏–∑–Ω—å"
            }
        }
        
        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —Ñ–∞–∑—ã –¥–Ω—è
        self.quiz_questions = [
            {
                "question": "–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã –≤ –õ–µ—Å–Ω—É—é –ú–∞—Ñ–∏—é?",
                "options": ["3", "4", "5", "6"],
                "correct": 2
            },
            {
                "question": "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É –í–æ–ª–∫–æ–≤ –≤ –æ–±—ã—á–Ω–æ–π –∏–≥—Ä–µ?",
                "options": ["–•–∏—â–Ω–∏–∫–∏", "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ", "–í—Å–µ—è–¥–Ω—ã–µ", "–ù–æ—á–Ω—ã–µ"],
                "correct": 0
            },
            {
                "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –õ–∏—Å–∞ –≤ –æ–±—ã—á–Ω–æ–π –∏–≥—Ä–µ?",
                "options": ["–í–æ—Ä—É–µ—Ç –µ–¥—É", "–ö–æ–ø–∞–µ—Ç –Ω–æ—Ä—ã", "–ó–∞—â–∏—â–∞–µ—Ç", "–ì–æ–ª–æ—Å—É–µ—Ç"],
                "correct": 0
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –∂–∏–∑–Ω–µ–π —É –∏–≥—Ä–æ–∫–æ–≤ –≤ –¥—É—ç–ª–∏?",
                "options": ["1", "2", "3", "4"],
                "correct": 2
            },
            {
                "question": "–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥—É—ç–ª–∏?",
                "options": ["–ê—Ç–∞–∫–∞", "–ó–∞—â–∏—Ç–∞", "–û–±–º–∞–Ω", "–õ–µ—á–µ–Ω–∏–µ"],
                "correct": 3
            }
        ]

    def get_role_info(self, role: DuelRole) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        return self.roles_info.get(role, {})

    def create_duel_invitation(self, chat_id: int, inviter_id: int, inviter_name: str) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å"""
        invitation = {
            "chat_id": chat_id,
            "inviter_id": inviter_id,
            "inviter_name": inviter_name,
            "created_at": datetime.now(),
            "expires_at": datetime.now().timestamp() + 300  # 5 –º–∏–Ω—É—Ç
        }
        self.duel_invitations[chat_id] = invitation
        return invitation

    def get_available_players(self, chat_id: int, exclude_user_id: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return [
            {"user_id": 123, "username": "Player1", "display_name": "–ò–≥—Ä–æ–∫ 1"},
            {"user_id": 456, "username": "Player2", "display_name": "–ò–≥—Ä–æ–∫ 2"},
            {"user_id": 789, "username": "Player3", "display_name": "–ò–≥—Ä–æ–∫ 3"}
        ]

    def start_duel(self, chat_id: int, player1_id: int, player1_name: str, 
                   player2_id: int, player2_name: str) -> Duel:
        """–ù–∞—á–∞—Ç—å –¥—É—ç–ª—å –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏"""
        
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª–∏
        roles = list(DuelRole)
        random.shuffle(roles)
        
        player1_role = roles[0]
        player2_role = roles[1]
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        player1 = DuelPlayer(
            user_id=player1_id,
            username=player1_name,
            role=player1_role
        )
        
        player2 = DuelPlayer(
            user_id=player2_id,
            username=player2_name,
            role=player2_role
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
        duel_id = len(self.active_duels) + 1
        duel = Duel(
            duel_id=duel_id,
            chat_id=chat_id,
            player1=player1,
            player2=player2,
            created_at=datetime.now()
        )
        
        self.active_duels[duel_id] = duel
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        if chat_id in self.duel_invitations:
            del self.duel_invitations[chat_id]
        
        return duel

    def get_duel(self, duel_id: int) -> Optional[Duel]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥—É—ç–ª—å –ø–æ ID"""
        return self.active_duels.get(duel_id)

    def get_duel_by_chat(self, chat_id: int) -> Optional[Duel]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å –≤ —á–∞—Ç–µ"""
        for duel in self.active_duels.values():
            if duel.chat_id == chat_id and duel.phase != DuelPhase.FINISHED:
                return duel
        return None

    def process_night_phase(self, duel: Duel, player1_action: DuelAction, 
                           player2_action: DuelAction) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–∑—É –Ω–æ—á–∏"""
        result = {
            "phase": "night",
            "player1_action": player1_action.value,
            "player2_action": player2_action.value,
            "damage": {"player1": 0, "player2": 0},
            "special_effects": [],
            "round_result": ""
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        duel.player1.last_action = player1_action
        duel.player2.last_action = player2_action
        
        # –õ–æ–≥–∏–∫–∞ –±–æ—è
        if player1_action == DuelAction.ATTACK and player2_action == DuelAction.DEFENSE:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤ –∑–∞—â–∏—Ç—ã
            if duel.player1.role == DuelRole.BOAR:
                # –ö–∞–±–∞–Ω –ø—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É
                result["damage"]["player2"] = 1
                result["special_effects"].append("üêó –ö–∞–±–∞–Ω –ø—Ä–æ–±–∏–ª –∑–∞—â–∏—Ç—É!")
            else:
                result["round_result"] = "üõ° –ó–∞—â–∏—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∞—Ç–∞–∫—É!"
                
        elif player1_action == DuelAction.ATTACK and player2_action == DuelAction.ATTACK:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤ –∞—Ç–∞–∫–∏
            if duel.player1.role == DuelRole.HEDGEHOG or duel.player2.role == DuelRole.HEDGEHOG:
                # –Å–∂ —Ä–∞–Ω–∏—Ç –æ–±–æ–∏—Ö
                result["damage"]["player1"] = 1
                result["damage"]["player2"] = 1
                result["special_effects"].append("ü¶î –Å–∂ —Ä–∞–Ω–∏–ª –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!")
            else:
                # –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞ - –æ–±–∞ –ø–æ–ª—É—á–∞—é—Ç —É—Ä–æ–Ω
                result["damage"]["player1"] = 1
                result["damage"]["player2"] = 1
                result["round_result"] = "‚öîÔ∏è –û–±–∞ –∏–≥—Ä–æ–∫–∞ –∞—Ç–∞–∫–æ–≤–∞–ª–∏!"
                
        elif player1_action == DuelAction.DEFENSE and player2_action == DuelAction.DEFENSE:
            result["round_result"] = "üõ° –û–±–∞ –∏–≥—Ä–æ–∫–∞ –∑–∞—â–∏—â–∞–ª–∏—Å—å - –Ω–∏—á—å—è!"
            
        elif player1_action == DuelAction.TRICK and player2_action == DuelAction.ATTACK:
            # –û–±–º–∞–Ω –ø—Ä–æ—Ç–∏–≤ –∞—Ç–∞–∫–∏ - –æ–±–º–∞–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            result["damage"]["player2"] = 1
            result["round_result"] = "üé≠ –û–±–º–∞–Ω –ø–µ—Ä–µ—Ö–∏—Ç—Ä–∏–ª –∞—Ç–∞–∫—É!"
            
        elif player1_action == DuelAction.ATTACK and player2_action == DuelAction.TRICK:
            # –ê—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤ –æ–±–º–∞–Ω–∞ - –æ–±–º–∞–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            result["damage"]["player1"] = 1
            result["round_result"] = "üé≠ –û–±–º–∞–Ω –ø–µ—Ä–µ—Ö–∏—Ç—Ä–∏–ª –∞—Ç–∞–∫—É!"
            
        elif player1_action == DuelAction.TRICK and player2_action == DuelAction.DEFENSE:
            # –û–±–º–∞–Ω –ø—Ä–æ—Ç–∏–≤ –∑–∞—â–∏—Ç—ã - –æ–±–º–∞–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            result["damage"]["player2"] = 1
            result["round_result"] = "üé≠ –û–±–º–∞–Ω –æ–±–º–∞–Ω—É–ª –∑–∞—â–∏—Ç—É!"
            
        elif player1_action == DuelAction.DEFENSE and player2_action == DuelAction.TRICK:
            # –ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –æ–±–º–∞–Ω–∞ - –æ–±–º–∞–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            result["damage"]["player1"] = 1
            result["round_result"] = "üé≠ –û–±–º–∞–Ω –æ–±–º–∞–Ω—É–ª –∑–∞—â–∏—Ç—É!"
            
        elif player1_action == DuelAction.TRICK and player2_action == DuelAction.TRICK:
            result["round_result"] = "üé≠ –û–±–∞ –∏–≥—Ä–æ–∫–∞ –æ–±–º–∞–Ω—ã–≤–∞–ª–∏ - –Ω–∏—á—å—è!"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
        duel.player1.lives -= result["damage"]["player1"]
        duel.player2.lives -= result["damage"]["player2"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if duel.player1.lives <= 0 and duel.player2.lives <= 0:
            duel.winner = None  # –ù–∏—á—å—è
            duel.phase = DuelPhase.FINISHED
        elif duel.player1.lives <= 0:
            duel.winner = duel.player2.user_id
            duel.phase = DuelPhase.FINISHED
        elif duel.player2.lives <= 0:
            duel.winner = duel.player1.user_id
            duel.phase = DuelPhase.FINISHED
        
        return result

    def process_day_phase(self, duel: Duel) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–∑—É –¥–Ω—è (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)"""
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question = random.choice(self.quiz_questions)
        
        result = {
            "phase": "day",
            "question": question["question"],
            "options": question["options"],
            "correct_answer": question["correct"],
            "damage": {"player1": 0, "player2": 0}
        }
        
        return result

    def process_casino_phase(self, duel: Duel) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–∑—É –∫–∞–∑–∏–Ω–æ (–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞)"""
        dice_result = random.randint(1, 6)
        
        result = {
            "phase": "casino",
            "dice_result": dice_result,
            "bonus": {"player1": 0, "player2": 0},
            "bonus_type": ""
        }
        
        if dice_result <= 3:  # –ù–æ—á—å
            result["bonus_type"] = "üåô –ù–æ—á—å"
            # –•–∏—â–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å
            if duel.player1.role in [DuelRole.WOLF, DuelRole.FOX, DuelRole.BOAR]:
                result["bonus"]["player1"] = 1
            if duel.player2.role in [DuelRole.WOLF, DuelRole.FOX, DuelRole.BOAR]:
                result["bonus"]["player2"] = 1
        else:  # –î–µ–Ω—å
            result["bonus_type"] = "‚òÄÔ∏è –î–µ–Ω—å"
            # –ú–∏—Ä–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å
            if duel.player1.role in [DuelRole.HARE, DuelRole.BEAVER, DuelRole.OWL, DuelRole.HEDGEHOG]:
                result["bonus"]["player1"] = 1
            if duel.player2.role in [DuelRole.HARE, DuelRole.BEAVER, DuelRole.OWL, DuelRole.HEDGEHOG]:
                result["bonus"]["player2"] = 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∏–∑–Ω–∏)
        duel.player1.lives = min(3, duel.player1.lives + result["bonus"]["player1"])
        duel.player2.lives = min(3, duel.player2.lives + result["bonus"]["player2"])
        
        return result

    def process_final_phase(self, duel: Duel, player1_guess: str, player2_guess: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ–∞–∑—É (—É–≥–∞–¥–∞–π–∫–∞)"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        secret_number = random.randint(1, 100)
        
        result = {
            "phase": "final",
            "secret_number": secret_number,
            "player1_guess": player1_guess,
            "player2_guess": player2_guess,
            "winner": None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
        try:
            p1_guess = int(player1_guess)
            p2_guess = int(player2_guess)
            
            p1_diff = abs(p1_guess - secret_number)
            p2_diff = abs(p2_guess - secret_number)
            
            if p1_diff < p2_diff:
                result["winner"] = duel.player1.user_id
            elif p2_diff < p1_diff:
                result["winner"] = duel.player2.user_id
            else:
                result["winner"] = None  # –ù–∏—á—å—è
                
        except ValueError:
            # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ, –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
            result["winner"] = duel.player2.user_id if player1_guess.isdigit() else duel.player1.user_id
        
        duel.winner = result["winner"]
        duel.phase = DuelPhase.FINISHED
        
        return result

    def get_duel_status_text(self, duel: Duel) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥—É—ç–ª–∏"""
        if duel.phase == DuelPhase.WAITING:
            return f"‚öîÔ∏è **–î—É—ç–ª—å**\n\nüîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç {duel.player2.username}..."
        
        status = f"‚öîÔ∏è **–î—É—ç–ª—å** - –†–∞—É–Ω–¥ {duel.current_round}\n\n"
        status += f"üê∫ {duel.player1.username}: {duel.player1.lives} ‚ù§Ô∏è\n"
        status += f"üê∫ {duel.player2.username}: {duel.player2.lives} ‚ù§Ô∏è\n\n"
        
        if duel.phase == DuelPhase.NIGHT:
            status += "üåë **–§–∞–∑–∞ –Ω–æ—á–∏**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        elif duel.phase == DuelPhase.DAY:
            status += "‚òÄÔ∏è **–§–∞–∑–∞ –¥–Ω—è**\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:"
        elif duel.phase == DuelPhase.CASINO:
            status += "üé∞ **–§–∞–∑–∞ –∫–∞–∑–∏–Ω–æ**\n–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞..."
        elif duel.phase == DuelPhase.FINAL:
            status += "üîÆ **–§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞**\n–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:"
        elif duel.phase == DuelPhase.FINISHED:
            if duel.winner:
                winner = duel.player1 if duel.winner == duel.player1.user_id else duel.player2
                status += f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.username}**\n"
                status += f"–†–æ–ª—å: {self.get_role_info(winner.role)['name']}"
            else:
                status += "ü§ù **–ù–∏—á—å—è!**"
        
        return status

    def cleanup_duel(self, duel_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –¥—É—ç–ª—å"""
        if duel_id in self.active_duels:
            del self.active_duels[duel_id]
