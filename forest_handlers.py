#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ—Å–∞–º–∏, —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —Å–æ–∑—ã–≤–∞
"""

import logging
from typing import Optional, List
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from forest_system import ForestManager, ForestConfig, ForestPrivacy, get_forest_manager
from database import get_db_session, Forest, ForestMember

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–µ—Å–æ–≤
_forest_manager = None

def get_forest_manager_instance():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–µ—Å–æ–≤"""
    global _forest_manager
    if _forest_manager is None:
        _forest_manager = get_forest_manager()
    return _forest_manager


# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def handle_create_forest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ—Å–∞"""
    logger.info(f"üå≤ handle_create_forest: –ö–æ–º–∞–Ω–¥–∞ /create_forest –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_create_forest(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_create_forest: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_join_forest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–µ—Å—É"""
    logger.info(f"üå≤ handle_join_forest: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_join_forest(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_join_forest: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–µ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_leave_forest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–µ—Å–∞"""
    logger.info(f"üå≤ handle_leave_forest: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_leave_forest(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_leave_forest: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_forests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –ª–µ—Å–æ–≤"""
    logger.info(f"üå≤ handle_forests: –ö–æ–º–∞–Ω–¥–∞ /forests –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_forests(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_forests: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_my_forests_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è –º–æ–∏—Ö –ª–µ—Å–æ–≤"""
    logger.info(f"üå≤ handle_my_forests_profile: –ö–æ–º–∞–Ω–¥–∞ /my_forests_profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_my_forests_profile(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_my_forests_profile: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ª–µ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_forest_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è –ª–µ—Å–∞"""
    logger.info(f"üå≤ handle_forest_profile: –ö–æ–º–∞–Ω–¥–∞ /forest_profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_forest_profile(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_forest_profile: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ª–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_forest_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ—Å–∞"""
    logger.info(f"üå≤ handle_forest_analytics: –ö–æ–º–∞–Ω–¥–∞ /forest_analytics –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_forest_analytics(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_forest_analytics: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_top_forests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ø–∞ –ª–µ—Å–æ–≤"""
    logger.info(f"üå≤ handle_top_forests: –ö–æ–º–∞–Ω–¥–∞ /top_forests –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_top_forests(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_top_forests: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ª–µ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_help_forests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ª–µ—Å–∞–º"""
    logger.info(f"üå≤ handle_help_forests: –ö–æ–º–∞–Ω–¥–∞ /help_forests –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_help_forests(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_help_forests: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_summon_forest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑—ã–≤–∞ –ª–µ—Å–∞"""
    logger.info(f"üå≤ handle_summon_forest: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        forest_manager = get_forest_manager_instance()
        handlers = ForestCommandHandlers(forest_manager)
        await handlers.handle_summon_forest(update, context)
    except Exception as e:
        logger.error(f"‚ùå handle_summon_forest: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑—ã–≤–µ –ª–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


class ForestCommandHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤"""
    
    def __init__(self, forest_manager: ForestManager):
        self.forest_manager = forest_manager
    
    async def handle_create_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ—Å–∞"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "üå≤ **–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ—Å–∞** üå≤\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_forest <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                "–ü—Ä–∏–º–µ—Ä: /create_forest –õ–µ—Å –í–æ–ª–∫–æ–≤ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é\n\n"
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                "‚Ä¢ --private - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ª–µ—Å (—Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º)\n"
                "‚Ä¢ --max <—á–∏—Å–ª–æ> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ --batch <—á–∏—Å–ª–æ> - —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–æ–∑—ã–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6)\n"
                "‚Ä¢ --cooldown <–º–∏–Ω—É—Ç—ã> - cooldown –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = context.args
        forest_name = args[0]
        description = " ".join(args[1:])
        
        # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        privacy = "public"
        max_size = None
        batch_size = 6
        cooldown_minutes = 30
        
        i = 0
        while i < len(args):
            if args[i] == "--private":
                privacy = "private"
            elif args[i] == "--max" and i + 1 < len(args):
                try:
                    max_size = int(args[i + 1])
                    i += 1
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è --max")
                    return
            elif args[i] == "--batch" and i + 1 < len(args):
                try:
                    batch_size = int(args[i + 1])
                    i += 1
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è --batch")
                    return
            elif args[i] == "--cooldown" and i + 1 < len(args):
                try:
                    cooldown_minutes = int(args[i + 1])
                    i += 1
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è --cooldown")
                    return
            i += 1
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ª–µ—Å
            config = await self.forest_manager.create_forest(
                creator_id=user.id,
                name=forest_name,
                description=description,
                privacy=privacy,
                max_size=max_size,
                batch_size=batch_size,
                cooldown_minutes=cooldown_minutes,
                allowed_invokers="admins",
                include_invite_phrase=True,
                default_cta="–ò–≥—Ä–∞—Ç—å",
                tone="mystic",
                max_length=400
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üå≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_forest_{config.forest_id}"),
                    InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"forest_info_{config.forest_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
            message = (
                f"üå≤ **–õ–µ—Å —Å–æ–∑–¥–∞–Ω!** üå≤\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {config.name}\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {config.description}\n"
                f"**–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** {'–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if config.privacy == ForestPrivacy.PRIVATE else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n"
                f"**–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {config.max_size or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}\n"
                f"**–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:** {config.batch_size}\n"
                f"**Cooldown:** {config.cooldown_minutes} –º–∏–Ω\n\n"
                f"**–ö–æ–º–∞–Ω–¥—ã –ª–µ—Å–∞:**\n"
                f"‚Ä¢ /join_forest_{config.forest_id} - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
                f"‚Ä¢ /summon_forest_{config.forest_id} - —Å–æ–∑–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                f"‚Ä¢ /list_forest_{config.forest_id} - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                f"‚Ä¢ /invite_forest_{config.forest_id} @username - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
            )
            
            await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_join_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–µ—Å—É"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        if not command.startswith('/join_forest_'):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        forest_id = command.replace('/join_forest_', '')
        
        try:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ª–µ—Å—É
            success = await self.forest_manager.join_forest(
                forest_id=forest_id,
                user_id=user.id,
                username=user.username,
                first_name=user.first_name
            )
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ—Å–µ
                forest = await self.forest_manager.get_forest_info(forest_id)
                if forest:
                    members = await self.forest_manager.get_forest_members(forest_id)
                    member_count = len(members)
                    max_count = forest.max_size or "‚àû"
                    
                    message = (
                        f"üå≤ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–µ—Å!** üå≤\n\n"
                        f"**–õ–µ—Å:** {forest.name}\n"
                        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {forest.description}\n"
                        f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {member_count}/{max_count}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö!"
                    )
                else:
                    message = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–µ—Å—É!"
                
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–µ—Å—É. –í–æ–∑–º–æ–∂–Ω–æ, –ª–µ—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–µ—Å—É: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–µ—Å—É.")
    
    async def handle_leave_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∏–¥–∞–Ω–∏—è –ª–µ—Å–∞"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        if not command.startswith('/leave_forest_'):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        forest_id = command.replace('/leave_forest_', '')
        
        try:
            success = await self.forest_manager.leave_forest(forest_id, user.id)
            
            if success:
                await update.message.reply_text("üëã –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–µ—Å. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö.")
            else:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –ª–µ—Å—É.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ª–µ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ª–µ—Å–∞.")
    
    async def handle_summon_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑—ã–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        if not command.startswith('/summon_forest_'):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        forest_id = command.replace('/summon_forest_', '')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ—Å–µ
            forest = await self.forest_manager.get_forest_info(forest_id)
            if not forest:
                await update.message.reply_text("‚ùå –õ–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–µ—Å–∞
            config = ForestConfig(
                forest_id=forest_id,
                name=forest.name,
                creator_id=forest.creator_id,
                description=forest.description,
                privacy=ForestPrivacy(forest.privacy),
                max_size=forest.max_size,
                created_at=forest.created_at,
                batch_size=6,
                cooldown_minutes=30,
                allowed_invokers="admins",
                include_invite_phrase=True,
                default_cta="–ò–≥—Ä–∞—Ç—å",
                tone="mystic",
                max_length=400
            )
            
            # –°–æ–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            result = await self.forest_manager.summon_forest_members(
                forest_id=forest_id,
                invoker_id=user.id,
                chat_id=chat_id,
                config=config
            )
            
            if result["success"]:
                message = (
                    f"üå≤ **–°–æ–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!** üå≤\n\n"
                    f"**–£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {result['members_notified']}\n"
                    f"**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞—Ç—á–µ–π:** {result['batches_sent']}\n"
                    f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–µ—Å—É:** {result['total_members']}"
                )
                
                if result["errors"]:
                    message += f"\n\n**–û—à–∏–±–∫–∏:** {len(result['errors'])}"
                
                await update.message.reply_text(message)
            else:
                error_messages = {
                    "cooldown": "‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–∑—ã–≤–æ–º.",
                    "no_members": "‚ùå –í –ª–µ—Å—É –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
                    "no_available": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑—ã–≤–∞ (–≤—Å–µ –Ω–∞ cooldown)."
                }
                
                error_msg = error_messages.get(result.get("error", "unknown"), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑—ã–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                await update.message.reply_text(error_msg)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑—ã–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑—ã–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    async def handle_list_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞"""
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        if not command.startswith('/list_forest_'):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        forest_id = command.replace('/list_forest_', '')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ—Å–µ
            forest = await self.forest_manager.get_forest_info(forest_id)
            if not forest:
                await update.message.reply_text("‚ùå –õ–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            members = await self.forest_manager.get_forest_members(forest_id)
            
            if not members:
                await update.message.reply_text("üå≤ –í –ª–µ—Å—É –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_list = []
            for i, member in enumerate(members, 1):
                name = member.first_name or member.username or f"User{member.user_id}"
                status = "üü¢" if member.is_opt_in else "üî¥"
                member_list.append(f"{i}. {status} {name}")
            
            message = (
                f"üå≤ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–µ—Å–∞ \"{forest.name}\"** üå≤\n\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {forest.description}\n"
                f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(members)}/{forest.max_size or '‚àû'}\n"
                f"**–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** {'–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if forest.privacy == 'private' else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n\n"
                f"**–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n" + "\n".join(member_list) + "\n\n"
                f"üü¢ - –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                f"üî¥ - –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            )
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    async def handle_invite_forest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ª–µ—Å"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command = update.message.text
        if not command.startswith('/invite_forest_'):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        
        forest_id = command.replace('/invite_forest_', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not context.args:
            await update.message.reply_text(
                "üå≤ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–µ—Å** üå≤\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invite_forest_<id> @username\n"
                "–ü—Ä–∏–º–µ—Ä: /invite_forest_les_i_volki @username"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username
        username = context.args[0]
        if not username.startswith('@'):
            username = f"@{username}"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ—Å–µ
            forest = await self.forest_manager.get_forest_info(forest_id)
            if not forest:
                await update.message.reply_text("‚ùå –õ–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = ForestConfig(
                forest_id=forest_id,
                name=forest.name,
                creator_id=forest.creator_id,
                description=forest.description,
                privacy=ForestPrivacy(forest.privacy),
                max_size=forest.max_size,
                created_at=forest.created_at,
                include_invite_phrase=True,
                tone="mystic"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id –ø–æ username)
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üå≤ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!** üå≤\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–µ—Å \"{forest.name}\""
            )
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")


class ForestCallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤"""
    
    def __init__(self, forest_manager: ForestManager):
        self.forest_manager = forest_manager
    
    async def handle_join_forest_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–µ—Å—É"""
        query = update.callback_query
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ callback_data
        callback_data = query.data
        if not callback_data.startswith('join_forest_'):
            return
        
        forest_id = callback_data.replace('join_forest_', '')
        
        try:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ª–µ—Å—É
            success = await self.forest_manager.join_forest(
                forest_id=forest_id,
                user_id=user.id,
                username=user.username,
                first_name=user.first_name
            )
            
            if success:
                await query.answer("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–µ—Å—É!")
                await query.edit_message_text(
                    query.message.text + f"\n\n‚úÖ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–µ—Å—É!"
                )
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–µ—Å—É")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ª–µ—Å—É")
    
    async def handle_forest_info_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ—Å–µ"""
        query = update.callback_query
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ callback_data
        callback_data = query.data
        if not callback_data.startswith('forest_info_'):
            return
        
        forest_id = callback_data.replace('forest_info_', '')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ—Å–µ
            forest = await self.forest_manager.get_forest_info(forest_id)
            if not forest:
                await query.answer("‚ùå –õ–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            members = await self.forest_manager.get_forest_members(forest_id)
            
            message = (
                f"üå≤ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ—Å–µ** üå≤\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {forest.name}\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {forest.description}\n"
                f"**–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** {'–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if forest.privacy == 'private' else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n"
                f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(members)}/{forest.max_size or '‚àû'}\n"
                f"**–°–æ–∑–¥–∞–Ω:** {forest.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"**–ö–æ–º–∞–Ω–¥—ã:**\n"
                f"‚Ä¢ /join_forest_{forest_id} - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
                f"‚Ä¢ /summon_forest_{forest_id} - —Å–æ–∑–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                f"‚Ä¢ /list_forest_{forest_id} - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            )
            
            await query.edit_message_text(message)
            await query.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ—Å–µ: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    async def handle_accept_invite_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        query = update.callback_query
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ—Å–∞ –∏–∑ callback_data
        callback_data = query.data
        if not callback_data.startswith('accept_invite_'):
            return
        
        forest_id = callback_data.replace('accept_invite_', '')
        
        try:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ª–µ—Å—É
            success = await self.forest_manager.join_forest(
                forest_id=forest_id,
                user_id=user.id,
                username=user.username,
                first_name=user.first_name
            )
            
            if success:
                await query.answer("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–µ—Å!")
                await query.edit_message_text(
                    "üå≤ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!** üå≤\n\n"
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–µ—Å—É –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö."
                )
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
    
    async def handle_decline_invite_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        query = update.callback_query
        
        await query.answer("‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await query.edit_message_text(
            "üå≤ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ** üå≤\n\n"
            "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–µ—Å."
        )
    
    async def handle_ask_info_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        query = update.callback_query
        
        await query.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ—Å–µ")
        await query.edit_message_text(
            "üå≤ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ—Å–µ** üå≤\n\n"
            "–õ–µ—Å - —ç—Ç–æ –≥—Ä—É–ø–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –¥–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é.\n\n"
            "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑—ã–≤–∞—Ö\n"
            "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –±–∞—Ç—á–µ–≤—ã—Ö –ø—Ä–∏–∑—ã–≤–∞—Ö\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /join_forest_<id> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
            "‚Ä¢ /leave_forest_<id> - –ø–æ–∫–∏–Ω—É—Ç—å –ª–µ—Å\n"
            "‚Ä¢ /list_forest_<id> - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        )
