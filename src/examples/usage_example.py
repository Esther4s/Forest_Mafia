#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
from datetime import datetime

from ..domain.value_objects import ChatId, UserId, Username, GamePhase, Team, Role
from ..domain.entities import Game, Player
from ..application.services import GameService, UserService, VotingService
from ..application.factories import GameFactory, PlayerFactory, ValueObjectFactory
from ..infrastructure.repositories import (
    GameRepositoryImpl, PlayerRepositoryImpl, UserRepositoryImpl,
    GameEventRepositoryImpl, ChatSettingsRepositoryImpl
)
from ..infrastructure.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def example_game_flow():
    """–ü—Ä–∏–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    game_repo = GameRepositoryImpl()
    player_repo = PlayerRepositoryImpl()
    user_repo = UserRepositoryImpl()
    event_repo = GameEventRepositoryImpl()
    chat_settings_repo = ChatSettingsRepositoryImpl()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    game_service = GameService(game_repo, player_repo, event_repo)
    user_service = UserService(user_repo)
    voting_service = VotingService()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫
    game_factory = GameFactory(None)  # RoleAssignmentService –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
    player_factory = PlayerFactory()
    
    print("üå≤ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã üå≤\n")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...")
    chat_id = ChatId(12345)
    game = game_factory.create_game(chat_id, is_test_mode=True)
    await game_repo.save(game)
    print(f"‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {game.game_id.value}")
    
    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    print("\n2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...")
    players_data = [
        (UserId(1), Username("Alice"), "–ê–ª–∏—Å–∞"),
        (UserId(2), Username("Bob"), "–ë–æ–±"),
        (UserId(3), Username("Charlie"), "–ß–∞—Ä–ª–∏"),
        (UserId(4), Username("Diana"), "–î–∏–∞–Ω–∞"),
        (UserId(5), Username("Eve"), "–ï–≤–∞"),
        (UserId(6), Username("Frank"), "–§—Ä—ç–Ω–∫")
    ]
    
    for user_id, username, first_name in players_data:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_service.get_or_create_user(user_id, username.value, first_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É
        success = await game_service.add_player_to_game(game, user_id, username)
        if success:
            print(f"‚úÖ {first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ")
        else:
            print(f"‚ùå {first_name} –Ω–µ —Å–º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
    
    print(f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ: {len(game.players)}")
    
    # 3. –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    print("\n3. –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã...")
    if game.can_start_game():
        success = await game_service.start_game(game)
        if success:
            print("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
            print(f"üìã –§–∞–∑–∞: {game.phase.value}")
            print(f"üéÆ –†–∞—É–Ω–¥: {game.current_round}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã")
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤
    print("\n4. –†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:")
    for player in game.players.values():
        team_emoji = "ü¶Å" if player.team == Team.PREDATORS else "üåø"
        role_emoji = {
            Role.WOLF: "üê∫",
            Role.FOX: "ü¶ä", 
            Role.HARE: "üê∞",
            Role.MOLE: "ü¶´",
            Role.BEAVER: "ü¶¶"
        }.get(player.role, "‚ùì")
        
        print(f"  {role_emoji} {player.username.value} - {player.role.value} ({team_emoji} {player.team.value})")
    
    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    print("\n5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
    game.start_voting()
    
    # –ò–≥—Ä–æ–∫–∏ –≥–æ–ª–æ—Å—É—é—Ç
    alive_players = list(game.get_alive_players())
    if len(alive_players) >= 2:
        voter = alive_players[0]
        target = alive_players[1]
        
        success = game.vote(voter.user_id, target.user_id)
        if success:
            print(f"‚úÖ {voter.username.value} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {target.username.value}")
        
        # –ï—â–µ –æ–¥–∏–Ω –≥–æ–ª–æ—Å
        if len(alive_players) >= 3:
            voter2 = alive_players[2]
            success2 = game.vote(voter2.user_id, target.user_id)
            if success2:
                print(f"‚úÖ {voter2.username.value} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {target.username.value}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    exiled_player = voting_service.process_voting(game)
    if exiled_player:
        print(f"üó≥Ô∏è –ò–∑–≥–Ω–∞–Ω: {exiled_player.username.value}")
    else:
        print("üó≥Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω")
    
    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:")
    stats = game.get_game_statistics()
    print(f"  üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {stats['alive_players']}")
    print(f"  ü¶Å –•–∏—â–Ω–∏–∫–æ–≤: {stats['predators']}")
    print(f"  üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: {stats['herbivores']}")
    print(f"  üéÆ –†–∞—É–Ω–¥: {stats['current_round']}")
    
    # 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    print("\n7. –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:")
    test_user_id = UserId(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    balance = await user_service.get_balance(test_user_id)
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id.value}: {balance} –æ—Ä–µ—Ö–æ–≤")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    await user_service.update_balance(test_user_id, 100)
    new_balance = await user_service.get_balance(test_user_id)
    print(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –æ—Ä–µ—Ö–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    display_name = await user_service.get_display_name(test_user_id, "Alice", "–ê–ª–∏—Å–∞")
    print(f"üë§ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: {display_name}")
    
    # 8. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    print("\n8. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã...")
    winner = game.check_game_end()
    if winner:
        print(f"üèÜ –ü–æ–±–µ–¥–∏–ª–∏: {winner.value}")
    else:
        print("üéÆ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
    
    await game_service.end_game(game, winner, "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    print("\nüå≤ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! üå≤")


async def example_value_objects():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Value Objects"""
    
    print("\nüîß –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Value Objects:\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Value Objects
    user_id = ValueObjectFactory.create_user_id(12345)
    chat_id = ValueObjectFactory.create_chat_id(67890)
    username = ValueObjectFactory.create_username("test_user")
    
    print(f"User ID: {user_id.value}")
    print(f"Chat ID: {chat_id.value}")
    print(f"Username: {username.value}")
    
    # –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–ø–∞—Å–∞–º–∏
    supplies = ValueObjectFactory.create_supplies(2, 5)
    print(f"–ü—Ä–∏–ø–∞—Å—ã: {supplies.current}/{supplies.maximum}")
    print(f"–ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ: {supplies.is_critical}")
    
    # –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–∏–ø–∞—Å–æ–≤
    new_supplies = supplies.consume(1)
    print(f"–ü–æ—Å–ª–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {new_supplies.current}/{new_supplies.maximum}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ø–∞—Å–æ–≤
    full_supplies = new_supplies.add(10)
    print(f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {full_supplies.current}/{full_supplies.maximum}")
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    start_time = datetime.now()
    game_duration = ValueObjectFactory.create_game_duration(start_time)
    print(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å: {game_duration.start_time}")
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {game_duration.is_finished}")
    print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {game_duration.total_seconds:.1f} —Å–µ–∫—É–Ω–¥")


async def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    print("\n‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:\n")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π User ID
        invalid_user_id = ValueObjectFactory.create_user_id(-1)
    except ValueError as e:
        print(f"‚úÖ –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Chat ID
        invalid_chat_id = ValueObjectFactory.create_chat_id(0)
    except ValueError as e:
        print(f"‚úÖ –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π Username
        invalid_username = ValueObjectFactory.create_username("")
    except ValueError as e:
        print(f"‚úÖ –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–ø–∞—Å–æ–≤, —á–µ–º –µ—Å—Ç—å
        supplies = ValueObjectFactory.create_supplies(1, 5)
        supplies.consume(10)
    except ValueError as e:
        print(f"‚úÖ –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n")
    
    # –ü—Ä–∏–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await example_game_flow()
    
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Value Objects
    await example_value_objects()
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    await example_error_handling()
    
    print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
