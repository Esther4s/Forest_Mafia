#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏ –∏–≥—Ä–∞–º–∏
"""

import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta

from ..domain.entities import Game, Player
from ..domain.value_objects import GameId, ChatId, UserId, Username, GamePhase, Team
from ..domain.repositories import (
    GameRepository, PlayerRepository, UserRepository, 
    GameEventRepository, ChatSettingsRepository
)
from .services import GameService, UserService, VotingService
from .factories import GameFactory, PlayerFactory, ValueObjectFactory

logger = logging.getLogger(__name__)


class BotService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞"""
    
    def __init__(
        self,
        game_repo: GameRepository,
        player_repo: PlayerRepository,
        user_repo: UserRepository,
        event_repo: GameEventRepository,
        chat_settings_repo: ChatSettingsRepository
    ):
        self.game_repo = game_repo
        self.player_repo = player_repo
        self.user_repo = user_repo
        self.event_repo = event_repo
        self.chat_settings_repo = chat_settings_repo
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.game_service = GameService(game_repo, player_repo, event_repo)
        self.user_service = UserService(user_repo)
        self.voting_service = VotingService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫–∏
        self.game_factory = GameFactory(None)  # RoleAssignmentService –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        self.player_factory = PlayerFactory()
        
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        self.active_games: Dict[int, Game] = {}
        
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        self.authorized_chats: set = set()
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –ë–î
            active_games = await self.game_repo.get_all_active()
            for game in active_games:
                self.active_games[game.chat_id.value] = game
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_games)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BotService: {e}")
    
    def is_chat_authorized(self, chat_id: ChatId, thread_id: Optional[int] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —á–∞—Ç"""
        return (chat_id.value, thread_id) in self.authorized_chats
    
    def authorize_chat(self, chat_id: ChatId, thread_id: Optional[int] = None) -> None:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —á–∞—Ç"""
        self.authorized_chats.add((chat_id.value, thread_id))
    
    def deauthorize_chat(self, chat_id: ChatId, thread_id: Optional[int] = None) -> None:
        """–î–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —á–∞—Ç"""
        self.authorized_chats.discard((chat_id.value, thread_id))
    
    async def get_or_create_game(self, chat_id: ChatId, thread_id: Optional[int] = None, is_test_mode: bool = False) -> Game:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if chat_id.value in self.active_games:
            return self.active_games[chat_id.value]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        game = await self.game_service.get_active_game(chat_id, thread_id)
        if game:
            self.active_games[chat_id.value] = game
            return game
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        game = self.game_factory.create_game(chat_id, thread_id, is_test_mode)
        await self.game_repo.save(game)
        self.active_games[chat_id.value] = game
        
        return game
    
    async def join_game(self, chat_id: ChatId, user_id: UserId, username: str, first_name: str = None, thread_id: Optional[int] = None) -> Dict[str, Any]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –∏–≥—Ä–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not self.is_chat_authorized(chat_id, thread_id):
            return {"success": False, "message": "‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä—ã."}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.get_or_create_user(user_id, username, first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        game = await self.get_or_create_game(chat_id, thread_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        if game.phase != GamePhase.WAITING:
            return {"success": False, "message": "‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã."}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        username_obj = ValueObjectFactory.create_username(username)
        success = await self.game_service.add_player_to_game(game, user_id, username_obj)
        
        if success:
            player_count = len(game.players)
            min_players = 3 if game.is_test_mode else 6
            
            if player_count >= min_players:
                message = (
                    f"‚úÖ {first_name or username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n\n"
                    f"üë• –ò–≥—Ä–æ–∫–æ–≤: {player_count}/12\n"
                    f"üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start_game"
                )
            else:
                message = (
                    f"‚úÖ {first_name or username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n\n"
                    f"üë• –ò–≥—Ä–æ–∫–æ–≤: {player_count}/12\n"
                    f"‚è≥ –ù—É–∂–Ω–æ –µ—â–µ {min_players - player_count} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞"
                )
            
            return {"success": True, "message": message, "game": game}
        else:
            if user_id.value in game.players:
                return {"success": False, "message": "‚ùå –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!"}
            else:
                return {"success": False, "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ."}
    
    async def leave_game(self, chat_id: ChatId, user_id: UserId) -> Dict[str, Any]:
        """–ò–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É"""
        game = self.active_games.get(chat_id.value)
        if not game:
            return {"success": False, "message": "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."}
        
        success = await self.game_service.remove_player_from_game(game, user_id)
        
        if success:
            player_count = len(game.players)
            return {
                "success": True, 
                "message": f"üëã –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n\nüë• –ò–≥—Ä–æ–∫–æ–≤: {player_count}/12",
                "game": game
            }
        else:
            return {"success": False, "message": "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å."}
    
    async def start_game(self, chat_id: ChatId) -> Dict[str, Any]:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
        game = self.active_games.get(chat_id.value)
        if not game:
            return {"success": False, "message": "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."}
        
        if not game.can_start_game():
            player_count = len(game.players)
            min_players = 3 if game.is_test_mode else 6
            return {
                "success": False, 
                "message": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.\nüë• –ò–≥—Ä–æ–∫–æ–≤: {player_count}/12\n‚è≥ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players} –∏–≥—Ä–æ–∫–æ–≤"
            }
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        success = await self.game_service.start_game(game)
        if success:
            return {
                "success": True, 
                "message": f"üå≤ **–ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!** üå≤\n\nüë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}\nüé≠ –†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!\nüåô –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –Ω–æ—á—å...",
                "game": game
            }
        else:
            return {"success": False, "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."}
    
    async def end_game(self, chat_id: ChatId, reason: str = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É") -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
        game = self.active_games.get(chat_id.value)
        if not game:
            return {"success": False, "message": "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = game.check_game_end()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        await self.game_service.end_game(game, winner, reason)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        if chat_id.value in self.active_games:
            del self.active_games[chat_id.value]
        
        winner_text = f"üèÜ –ü–æ–±–µ–¥–∏–ª–∏: {winner.value if winner else '–ù–∏—á—å—è'}"
        
        return {
            "success": True,
            "message": f"üå≤ **–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê** üå≤\n\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}\n{winner_text}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(game.players)}\nüéÆ –†–∞—É–Ω–¥–æ–≤: {game.current_round}",
            "game": game,
            "winner": winner
        }
    
    async def get_game_status(self, chat_id: ChatId) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"""
        game = self.active_games.get(chat_id.value)
        if not game:
            return {"success": False, "message": "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."}
        
        status_text = self._format_game_status(game)
        return {"success": True, "message": status_text, "game": game}
    
    def _format_game_status(self, game: Game) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"""
        if game.phase == GamePhase.WAITING:
            player_count = len(game.players)
            min_players = 3 if game.is_test_mode else 6
            
            status = (
                f"üå≤ **–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã** üå≤\n\n"
                f"üìã –§–∞–∑–∞: –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {player_count}/12\n"
                f"‚è≥ –ù—É–∂–Ω–æ –µ—â–µ {min_players - player_count} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞\n\n"
                f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n"
            )
            
            for player in game.players.values():
                status += f"‚Ä¢ {player.username.value}\n"
            
            return status
        
        elif game.phase == GamePhase.NIGHT:
            alive_count = len(game.get_alive_players())
            return (
                f"üå≤ **–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã** üå≤\n\n"
                f"üìã –§–∞–∑–∞: –ù–æ—á—å (–†–∞—É–Ω–¥ {game.current_round})\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {alive_count}\n"
                f"üåô –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
            )
        
        elif game.phase == GamePhase.DAY:
            alive_count = len(game.get_alive_players())
            return (
                f"üå≤ **–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã** üå≤\n\n"
                f"üìã –§–∞–∑–∞: –î–µ–Ω—å (–†–∞—É–Ω–¥ {game.current_round})\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {alive_count}\n"
                f"‚òÄÔ∏è –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–æ—á–∏..."
            )
        
        elif game.phase == GamePhase.VOTING:
            alive_count = len(game.get_alive_players())
            return (
                f"üå≤ **–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã** üå≤\n\n"
                f"üìã –§–∞–∑–∞: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–†–∞—É–Ω–¥ {game.current_round})\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {alive_count}\n"
                f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ..."
            )
        
        else:
            return "üå≤ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üå≤"
    
    async def vote(self, chat_id: ChatId, voter_id: UserId, target_id: Optional[UserId] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        game = self.active_games.get(chat_id.value)
        if not game:
            return {"success": False, "message": "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."}
        
        if game.phase != GamePhase.VOTING:
            return {"success": False, "message": "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."}
        
        success = game.vote(voter_id, target_id)
        if success:
            await self.game_repo.save(game)
            return {"success": True, "message": "‚úÖ –ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω", "game": game}
        else:
            return {"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–ª–æ—Å"}
    
    async def process_voting(self, chat_id: ChatId) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        game = self.active_games.get(chat_id.value)
        if not game:
            return {"success": False, "message": "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."}
        
        exiled_player = self.voting_service.process_voting(game)
        await self.game_repo.save(game)
        
        if exiled_player:
            return {
                "success": True, 
                "message": f"üó≥Ô∏è –ò–∑–≥–Ω–∞–Ω: {exiled_player.username.value}",
                "exiled_player": exiled_player,
                "game": game
            }
        else:
            return {
                "success": True, 
                "message": "üó≥Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω",
                "game": game
            }
    
    async def get_user_display_name(self, user_id: UserId, username: str = None, first_name: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.user_service.get_display_name(user_id, username, first_name)
    
    async def get_user_balance(self, user_id: UserId) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.user_service.get_balance(user_id)
    
    async def update_user_balance(self, user_id: UserId, amount: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.user_service.update_balance(user_id, amount)
