#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
"""

import logging
from typing import Dict, Optional, Any
from telegram import Update, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ..domain.value_objects import ChatId, UserId
from ..domain.entities import Game, Player
from ..domain.value_objects import GamePhase, Role, Team
from .bot_service import BotService

logger = logging.getLogger(__name__)


class AdditionalCallbackHandlers:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤"""
    
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service
    
    async def _is_admin(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
        try:
            user_id = query.from_user.id
            chat_id = query.message.chat_id
            
            # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
            if chat_id == user_id:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
            member = await context.bot.get_chat_member(chat_id, user_id)
            return member.status in ['creator', 'administrator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    async def _check_admin_permission(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç alert –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"""
        if not await self._is_admin(query, context):
            await query.answer("‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.", show_alert=True)
            return False
        return True
    
    # === –ú–ê–ì–ê–ó–ò–ù –ò –ü–†–û–§–ò–õ–¨ ===
    
    async def _handle_show_balance_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞"""
        user_id = UserId(query.from_user.id)
        
        try:
            balance = await self.bot_service.get_user_balance(user_id)
            display_name = await self.bot_service.get_user_display_name(
                user_id, query.from_user.username, query.from_user.first_name
            )
            
            keyboard = [
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            balance_text = (
                f"üå≤ **–ë–∞–ª–∞–Ω—Å –õ–µ—Å –∏ –≤–æ–ª–∫–∏**\n\n"
                f"üë§ **{display_name}:**\n"
                f"üå∞ –û—Ä–µ—à–∫–∏: {balance}\n\n"
                f"üí° –û—Ä–µ—à–∫–∏ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –∏–≥—Ä–∞—è –≤ –õ–µ—Å –∏ –≤–æ–ª–∫–∏!"
            )
            
            await query.edit_message_text(balance_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞")
    
    async def _handle_show_shop_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        user_id = UserId(query.from_user.id)
        
        try:
            balance = await self.bot_service.get_user_balance(user_id)
            display_name = await self.bot_service.get_user_display_name(
                user_id, query.from_user.username, query.from_user.first_name
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
            keyboard = [
                [InlineKeyboardButton("üçé –Ø–±–ª–æ–∫–æ (10 –æ—Ä–µ—Ö–æ–≤)", callback_data="buy_item:apple:10")],
                [InlineKeyboardButton("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ (25 –æ—Ä–µ—Ö–æ–≤)", callback_data="buy_item:protection:25")],
                [InlineKeyboardButton("‚ù§Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å (50 –æ—Ä–µ—Ö–æ–≤)", callback_data="buy_item:extra_life:50")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            shop_text = (
                f"üå≤ **–õ–µ—Å–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω**\n\n"
                f"üë§ **{display_name}:**\n"
                f"üå∞ –û—Ä–µ—à–∫–∏: {balance}\n\n"
                f"üõçÔ∏è **–ß—Ç–æ –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å?**\n\n"
                f"**üçé –Ø–±–ª–æ–∫–æ**\n"
                f"üìù –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 1 –æ—Ä–µ—à–µ–∫\n"
                f"üí∞ 10 –æ—Ä–µ—à–∫–æ–≤\n\n"
                f"**üõ°Ô∏è –ó–∞—â–∏—Ç–∞**\n"
                f"üìù –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –∞—Ç–∞–∫–∏ –≤–æ–ª–∫–∞\n"
                f"üí∞ 25 –æ—Ä–µ—à–∫–æ–≤\n\n"
                f"**‚ù§Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å**\n"
                f"üìù –î–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å –≤ –∏–≥—Ä–µ\n"
                f"üí∞ 50 –æ—Ä–µ—à–∫–æ–≤"
            )
            
            await query.edit_message_text(shop_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞")
    
    async def _handle_show_stats_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = UserId(query.from_user.id)
        
        try:
            display_name = await self.bot_service.get_user_display_name(
                user_id, query.from_user.username, query.from_user.first_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stats = await self.bot_service.get_user_stats(user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            stats_text = (
                f"üå≤ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –õ–µ—Å –∏ –≤–æ–ª–∫–∏**\n\n"
                f"üë§ **{display_name}:**\n\n"
                f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('games_played', 0)}\n"
                f"üèÜ –ü–æ–±–µ–¥: {stats.get('wins', 0)}\n"
                f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.get('losses', 0)}\n"
                f"üå∞ –û—Ä–µ—à–∫–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('total_nuts', 0)}\n"
                f"üé≠ –†–æ–ª–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('roles_played', 0)}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {stats.get('time_played', 0)} –º–∏–Ω—É—Ç"
            )
            
            await query.edit_message_text(stats_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _handle_show_inventory_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        user_id = UserId(query.from_user.id)
        
        try:
            display_name = await self.bot_service.get_user_display_name(
                user_id, query.from_user.username, query.from_user.first_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            inventory = await self.bot_service.get_user_inventory(user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_profile_pm")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            inventory_text = (
                f"üß∫ **–ö–æ—Ä–∑–∏–Ω–∫–∞**\n\n"
                f"üë§ **{display_name}:**\n\n"
            )
            
            if inventory:
                for item, count in inventory.items():
                    inventory_text += f"‚Ä¢ {item}: {count}\n"
            else:
                inventory_text += "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç\n"
                inventory_text += "üõçÔ∏è –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã!"
            
            await query.edit_message_text(inventory_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
    
    async def _handle_show_chat_stats_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç–∞—Ö"""
        user_id = UserId(query.from_user.id)
        
        try:
            display_name = await self.bot_service.get_user_display_name(
                user_id, query.from_user.username, query.from_user.first_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–∞—Ö
            chat_stats = await self.bot_service.get_user_chat_stats(user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_profile_pm")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            stats_text = (
                f"üìú **–°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏**\n\n"
                f"üë§ **{display_name}:**\n\n"
            )
            
            if chat_stats:
                for chat_name, stats in chat_stats.items():
                    stats_text += f"**{chat_name}:**\n"
                    stats_text += f"‚Ä¢ –ò–≥—Ä: {stats.get('games', 0)}\n"
                    stats_text += f"‚Ä¢ –ü–æ–±–µ–¥: {stats.get('wins', 0)}\n"
                    stats_text += f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.get('losses', 0)}\n\n"
            else:
                stats_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–∞—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n"
                stats_text += "üéÆ –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!"
            
            await query.edit_message_text(stats_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç–∞—Ö: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç–∞—Ö")
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò ===
    
    async def _handle_settings_back_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        chat_id = ChatId(query.message.chat_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
            chat_settings = await self.bot_service.get_chat_settings(chat_id)
            
            keyboard = [
                [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã", callback_data="settings_timers")],
                [InlineKeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", callback_data="settings_roles")],
                [InlineKeyboardButton("üë• –õ–∏–º–∏—Ç—ã –∏–≥—Ä–æ–∫–æ–≤", callback_data="settings_players")],
                [InlineKeyboardButton("üå≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏", callback_data="forest_settings")],
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if chat_settings.get('test_mode', False) else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ", callback_data="settings_toggle_test")],
                [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_reset_chat")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            settings_text = (
                f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞**\n\n"
                f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if chat_settings.get('test_mode', False) else '–í–´–ö–õ'}\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {chat_settings.get('min_players', 6)}-{chat_settings.get('max_players', 12)}\n"
                f"‚è±Ô∏è –¢–∞–π–º–µ—Ä—ã: –ù–æ—á—å {chat_settings.get('night_duration', 60)}—Å, –î–µ–Ω—å {chat_settings.get('day_duration', 300)}—Å, –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {chat_settings.get('vote_duration', 120)}—Å\n"
                f"üé≠ –†–æ–ª–∏: –õ–∏—Å–∞ —É–º—Ä–µ—Ç —á–µ—Ä–µ–∑ {chat_settings.get('fox_death_threshold', 2)} –Ω–æ—á–µ–π, –ö—Ä–æ—Ç —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {chat_settings.get('mole_reveal_threshold', 3)} –Ω–æ—á–µ–π\n"
                f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞: {'–í–ö–õ' if chat_settings.get('beaver_protection', True) else '–í–´–ö–õ'}\n"
                f"üèÅ –õ–∏–º–∏—Ç—ã: {chat_settings.get('max_rounds', 25)} —Ä–∞—É–Ω–¥–æ–≤, {chat_settings.get('max_time', 180)} –º–∏–Ω, –º–∏–Ω–∏–º—É–º {chat_settings.get('min_alive', 2)} –∂–∏–≤—ã—Ö\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
            )
            
            await query.edit_message_text(settings_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def _handle_settings_timers_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–µ—Ä–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        chat_id = ChatId(query.message.chat_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
            chat_settings = await self.bot_service.get_chat_settings(chat_id)
            
            keyboard = [
                [InlineKeyboardButton("üåô –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—á–∏", callback_data="timer_night")],
                [InlineKeyboardButton("‚òÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è", callback_data="timer_day")],
                [InlineKeyboardButton("üó≥Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", callback_data="timer_vote")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            night_min = chat_settings.get('night_duration', 60) // 60
            night_sec = chat_settings.get('night_duration', 60) % 60
            day_min = chat_settings.get('day_duration', 300) // 60
            day_sec = chat_settings.get('day_duration', 300) % 60
            vote_min = chat_settings.get('vote_duration', 120) // 60
            vote_sec = chat_settings.get('vote_duration', 120) % 60
            
            night_text = f"{night_min}–º {night_sec}—Å" if night_min > 0 else f"{night_sec}—Å"
            day_text = f"{day_min}–º {day_sec}—Å" if day_min > 0 else f"{day_sec}—Å"
            vote_text = f"{vote_min}–º {vote_sec}—Å" if vote_min > 0 else f"{vote_sec}—Å"
            
            await query.edit_message_text(
                f"‚è±Ô∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤**\n\n"
                f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
                f"üåô –ù–æ—á—å: {night_text}\n"
                f"‚òÄÔ∏è –î–µ–Ω—å: {day_text}\n"
                f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {vote_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–µ—Ä–æ–≤")
    
    async def _handle_settings_roles_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–ª–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        keyboard = [
            [InlineKeyboardButton("üê∫ –í–æ–ª–∫–∏: 25%", callback_data="role_wolves_25")],
            [InlineKeyboardButton("ü¶ä –õ–∏—Å–∞: 15%", callback_data="role_fox_15")],
            [InlineKeyboardButton("ü¶´ –ö—Ä–æ—Ç: 15%", callback_data="role_mole_15")],
            [InlineKeyboardButton("ü¶¶ –ë–æ–±—ë—Ä: 10%", callback_data="role_beaver_10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üé≠ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π**\n\n"
            "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            "üê∫ –í–æ–ª–∫–∏: 25%\n"
            "ü¶ä –õ–∏—Å–∞: 15%\n"
            "ü¶´ –ö—Ä–æ—Ç: 15%\n"
            "ü¶¶ –ë–æ–±—ë—Ä: 10%\n"
            "üê∞ –ó–∞–π—Ü—ã: 35% (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def _handle_settings_players_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        chat_id = ChatId(query.message.chat_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
            chat_settings = await self.bot_service.get_chat_settings(chat_id)
            
            keyboard = [
                [InlineKeyboardButton("üë• –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_min")],
                [InlineKeyboardButton("üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_max")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üë• **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤**\n\n"
                f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
                f"üë• –ú–∏–Ω–∏–º—É–º: {chat_settings.get('min_players', 6)} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"üë• –ú–∞–∫—Å–∏–º—É–º: {chat_settings.get('max_players', 12)} –∏–≥—Ä–æ–∫–æ–≤\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä–æ–∫–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä–æ–∫–æ–≤")
    
    async def _handle_forest_settings_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        keyboard = [
            [InlineKeyboardButton("üåô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ—á–∏", callback_data="forest_night_settings")],
            [InlineKeyboardButton("ü¶ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—ã", callback_data="forest_fox_settings")],
            [InlineKeyboardButton("ü¶¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–±—Ä–∞", callback_data="forest_beaver_settings")],
            [InlineKeyboardButton("ü¶´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–æ—Ç–∞", callback_data="forest_mole_settings")],
            [InlineKeyboardButton("üèÜ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥", callback_data="forest_rewards_settings")],
            [InlineKeyboardButton("üíÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–µ—Ä—à–∏—Ö", callback_data="forest_dead_settings")],
            [InlineKeyboardButton("‚è∞ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="forest_auto_end_settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üå≤ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            reply_markup=reply_markup
        )
    
    async def _handle_toggle_test_mode_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        chat_id = ChatId(query.message.chat_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            chat_settings = await self.bot_service.get_chat_settings(chat_id)
            current_mode = chat_settings.get('test_mode', False)
            new_mode = not current_mode
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.bot_service.update_chat_settings(chat_id, test_mode=new_mode)
            
            mode_text = "–í–ö–õ" if new_mode else "–í–´–ö–õ"
            min_players = 3 if new_mode else 6
            
            await query.answer(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {mode_text} (–º–∏–Ω–∏–º—É–º: {min_players} –∏–≥—Ä–æ–∫–æ–≤)", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._handle_settings_back_callback(query, params, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    
    async def _handle_reset_chat_settings_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        chat_id = ChatId(query.message.chat_id)
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
            await self.bot_service.reset_chat_settings(chat_id)
            
            await query.edit_message_text(
                "‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!**\n\n"
                "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞")
    
    async def _handle_close_settings_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    
    # === –Ø–ó–´–ö–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
    
    async def _handle_language_settings_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá∫üá∏ English (Coming Soon)", callback_data="lang_en_disabled")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üåç **–Ø–∑—ã–∫ / Language**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            reply_markup=reply_markup
        )
    
    async def _handle_language_ru_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        await query.answer("üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
    
    async def _handle_language_en_disabled_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–±—Ä–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–æ—Ç–∫–ª—é—á–µ–Ω)"""
        await query.answer("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", show_alert=True)
    
    # === –ü–†–û–§–ò–õ–¨ –í –õ–° ===
    
    async def _handle_show_profile_pm_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –õ–°"""
        user_id = UserId(query.from_user.id)
        
        try:
            balance = await self.bot_service.get_user_balance(user_id)
            display_name = await self.bot_service.get_user_display_name(
                user_id, query.from_user.username, query.from_user.first_name
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –õ–°
            keyboard = [
                [InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∫–∞", callback_data="show_inventory")],
                [InlineKeyboardButton("üìú –°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏", callback_data="show_chat_stats")],
                [InlineKeyboardButton("üå∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = (
                f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞** üë§\n\n"
                f"üå≤ **{display_name}**\n"
                f"üå∞ –û—Ä–µ—à–∫–∏: {balance}\n\n"
                f"üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                f"üß∫ **–ö–æ—Ä–∑–∏–Ω–∫–∞** - –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
                f"üìú **–°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–∞—Ö\n"
                f"üå∞ **–ë–∞–ª–∞–Ω—Å** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–µ—à–∫–∞—Ö\n"
                f"üõçÔ∏è **–ú–∞–≥–∞–∑–∏–Ω** - –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"
            )
            
            await query.edit_message_text(profile_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –õ–°: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –õ–°")
    
    async def _handle_show_roles_pm_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä–æ–ª–µ–π –≤ –õ–°"""
        roles_text = (
            "üé≠ **–†–æ–ª–∏ –≤ –∏–≥—Ä–µ** üé≠\n\n"
            "üê∫ **–•–ò–©–ù–ò–ö–ò (Predators)**\n\n"
            "üê∫ **–í–æ–ª–∫**\n"
            "‚Ä¢ –£–±–∏–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∂–¥—É—é –Ω–æ—á—å\n"
            "‚Ä¢ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≥–Ω–∞–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º\n\n"
            "ü¶ä **–õ–∏—Å–∞**\n"
            "‚Ä¢ –ö—Ä–∞–¥–µ—Ç –æ—Ä–µ—à–∫–∏ —É –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –£–º–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ 2 –∫—Ä–∞–∂\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –≤–æ–ª–∫–∞–º\n\n"
            "üê∞ **–¢–†–ê–í–û–Ø–î–ù–´–ï (Herbivores)**\n\n"
            "üê∞ **–ó–∞–π–µ—Ü**\n"
            "‚Ä¢ –û–±—ã—á–Ω—ã–π –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–±–∏—Ç –≤–æ–ª–∫–æ–º\n"
            "‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏\n\n"
            "ü¶´ **–ë–æ–±—ë—Ä**\n"
            "‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –Ω–æ—á—å\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç –≤–æ–ª–∫–∞\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑\n\n"
            "üï≥Ô∏è **–ö—Ä–æ—Ç**\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –£–∑–Ω–∞–µ—Ç, –∫—Ç–æ —Ö–∏—â–Ω–∏–∫, –∞ –∫—Ç–æ –Ω–µ—Ç\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞", callback_data="show_rules_pm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(roles_text, reply_markup=reply_markup)
    
    async def _handle_show_rules_pm_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª –≤ –õ–°"""
        rules_text = (
            "üìñ **–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã** üìñ\n\n"
            "üå≤ **–õ–µ—Å –∏ –í–æ–ª–∫–∏** - —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è'\n\n"
            "üéØ **–¶–µ–ª—å –∏–≥—Ä—ã:**\n"
            "‚Ä¢ –•–∏—â–Ω–∏–∫–∏: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n"
            "‚Ä¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: –Ω–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤\n\n"
            "üåô **–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞:**\n"
            "‚Ä¢ –í–æ–ª–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞\n"
            "‚Ä¢ –õ–∏—Å–∞ –∫—Ä–∞–¥–µ—Ç –æ—Ä–µ—à–∫–∏ —É –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ë–æ–±—ë—Ä –∑–∞—â–∏—â–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ö—Ä–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞\n\n"
            "‚òÄÔ∏è **–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞:**\n"
            "‚Ä¢ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç —Å–æ–±—ã—Ç–∏—è –Ω–æ—á–∏\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ\n"
            "‚Ä¢ –ò–∑–≥–Ω–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É\n\n"
            "üé≠ **–†–æ–ª–∏:**\n"
            "‚Ä¢ **–í–æ–ª–∫** - —É–±–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –Ω–æ—á—å\n"
            "‚Ä¢ **–õ–∏—Å–∞** - –∫—Ä–∞–¥–µ—Ç –æ—Ä–µ—à–∫–∏ (—É–º–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ 2 –∫—Ä–∞–∂)\n"
            "‚Ä¢ **–ó–∞–π–µ—Ü** - –æ–±—ã—á–Ω—ã–π –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å\n"
            "‚Ä¢ **–ë–æ–±—ë—Ä** - –∑–∞—â–∏—â–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ **–ö—Ä–æ—Ç** - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏\n\n"
            "üèÜ **–ü–æ–±–µ–¥–∞:**\n"
            "‚Ä¢ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –∏–∑–≥–Ω–∞–ª–∏ –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏"
        )
        
        keyboard = [
            [InlineKeyboardButton("üé≠ –†–æ–ª–∏", callback_data="show_roles_pm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(rules_text, reply_markup=reply_markup)
    
    async def _handle_join_chat_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç"""
        await query.edit_message_text(
            "üéÆ **–í–æ–π—Ç–∏ –≤ —á–∞—Ç**\n\n"
            "–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≤ –õ–µ—Å –∏ –≤–æ–ª–∫–∏, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç:\n\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç\n"
            "3. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "4. –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ —á–∞—Ç–µ\n\n"
            "üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!"
        )
    
    # === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===
    
    async def _handle_cancel_action_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # === –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú ===
    
    async def _handle_toggle_quick_mode_game_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ –∏–≥—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._check_admin_permission(query, context):
            return
        
        chat_id = ChatId(query.message.chat_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            chat_settings = await self.bot_service.get_chat_settings(chat_id)
            current_mode = chat_settings.get('test_mode', False)
            new_mode = not current_mode
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.bot_service.update_chat_settings(chat_id, test_mode=new_mode)
            
            mode_text = "–í–ö–õ" if new_mode else "–í–´–ö–õ"
            min_players = 3 if new_mode else 6
            
            await query.answer(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {mode_text} (–º–∏–Ω–∏–º—É–º: {min_players} –∏–≥—Ä–æ–∫–æ–≤)", show_alert=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ –∏–≥—Ä—ã: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    
    # === –ü–†–û–©–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
    
    async def _handle_farewell_message_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if len(params) < 1:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        user_id = int(params[0])
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"farewell_custom_{user_id}")],
            [InlineKeyboardButton("üå≤ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"farewell_standard_{user_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"farewell_back_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí¨ **–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def _handle_farewell_custom_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if len(params) < 1:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        user_id = int(params[0])
        
        await query.edit_message_text(
            f"üí¨ **–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n"
            f"–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç."
        )
    
    async def _handle_farewell_back_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if len(params) < 1:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        user_id = int(params[0])
        
        await query.edit_message_text(
            f"üëã **–ü—Ä–æ—â–∞–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    async def _handle_leave_forest_callback(self, query: CallbackQuery, params: list, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–µ—Å–∞"""
        await query.edit_message_text(
            "üå≤ **–í—ã—Ö–æ–¥ –∏–∑ –ª–µ—Å–∞**\n\n"
            "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É –õ–µ—Å –∏ –≤–æ–ª–∫–∏.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üå≤"
        )
