#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ..domain.value_objects import ChatId, UserId, Username
from .bot_service import BotService

logger = logging.getLogger(__name__)


class CommandHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üå≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å –∏ –≤–æ–ª–∫–∏ Bot! üå≤\n\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏' - —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã —Å –ª–µ—Å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π.\n\n"
            "üéÆ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ\n"
            "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /start_game –¥–ª—è –Ω–∞—á–∞–ª–∞\n"
            "‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ —Ä–æ–ª—è–º–∏: –í–æ–ª–∫–∏, –õ–∏—Å–∞, –ó–∞–π—Ü—ã, –ö—Ä–æ—Ç, –ë–æ–±—ë—Ä\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
            "‚Ä¢ /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
            "‚Ä¢ /leave - –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É\n"
            "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã\n"
            "‚Ä¢ /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã –≤ –ª–µ—Å—É! üå≤"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def handle_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules"""
        rules_text = (
            "üå≤ **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏'** üå≤\n\n"
            "**üé≠ –†–æ–ª–∏:**\n"
            "üê∫ **–í–æ–ª–∫–∏** - —Ö–∏—â–Ω–∏–∫–∏, –æ—Ö–æ—Ç—è—Ç—Å—è –ø–æ –Ω–æ—á–∞–º\n"
            "ü¶ä **–õ–∏—Å–∞** - —Ö–∏—â–Ω–∏–∫, –≤–æ—Ä—É–µ—Ç –ø—Ä–∏–ø–∞—Å—ã\n"
            "üê∞ **–ó–∞–π—Ü—ã** - —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "ü¶´ **–ö—Ä–æ—Ç** - —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏\n"
            "ü¶¶ **–ë–æ–±—ë—Ä** - —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π, –∑–∞—â–∏—â–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç\n\n"
            "**üèÜ –ü–æ–±–µ–¥–∞:**\n"
            "‚Ä¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –≤—Å–µ —Ö–∏—â–Ω–∏–∫–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã\n"
            "‚Ä¢ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n\n"
            "**üåô –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
            "‚Ä¢ –í–æ–ª–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∂–µ—Ä—Ç–≤—É –¥–ª—è –æ—Ö–æ—Ç—ã\n"
            "‚Ä¢ –õ–∏—Å–∞ –≤–æ—Ä—É–µ—Ç –ø—Ä–∏–ø–∞—Å—ã (2 –∫—Ä–∞–∂–∏ = —Å–º–µ—Ä—Ç—å)\n"
            "‚Ä¢ –ö—Ä–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ë–æ–±—ë—Ä –∑–∞—â–∏—â–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ø–∞—Å—ã\n\n"
            "**‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
            "‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–æ—á–∏ (5 –º–∏–Ω—É—Ç)\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ (2 –º–∏–Ω—É—Ç—ã)\n"
            "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è\n\n"
            "üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üå≤"
        )
        
        await update.message.reply_text(rules_text)
    
    async def handle_join(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join"""
        user = update.effective_user
        chat_id = ChatId(update.effective_chat.id)
        thread_id = update.effective_message.message_thread_id if update.effective_chat.is_forum else None
        
        user_id = UserId(user.id)
        username = Username(user.username or user.first_name or f"User_{user.id}")
        
        result = await self.bot_service.join_game(
            chat_id=chat_id,
            user_id=user_id,
            username=username.value,
            first_name=user.first_name,
            thread_id=thread_id
        )
        
        await update.message.reply_text(result["message"])
    
    async def handle_leave(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leave"""
        user = update.effective_user
        chat_id = ChatId(update.effective_chat.id)
        user_id = UserId(user.id)
        
        result = await self.bot_service.leave_game(chat_id, user_id)
        await update.message.reply_text(result["message"])
    
    async def handle_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = ChatId(update.effective_chat.id)
        result = await self.bot_service.get_game_status(chat_id)
        await update.message.reply_text(result["message"])
    
    async def handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user = update.effective_user
        user_id = UserId(user.id)
        
        try:
            balance = await self.bot_service.get_user_balance(user_id)
            display_name = await self.bot_service.get_user_display_name(
                user_id, user.username, user.first_name
            )
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞** üìä\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {display_name}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –æ—Ä–µ—Ö–æ–≤\n\n"
                f"üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üå≤"
            )
            
            await update.message.reply_text(stats_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


class AdminCommandHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service
    
    async def handle_start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_game"""
        if not self._is_admin(update):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É.")
            return
        
        chat_id = ChatId(update.effective_chat.id)
        result = await self.bot_service.start_game(chat_id)
        await update.message.reply_text(result["message"])
        
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
        if result["success"] and "game" in result:
            await self._send_roles_to_players(update, result["game"])
    
    async def handle_end_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end_game"""
        if not self._is_admin(update):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É.")
            return
        
        chat_id = ChatId(update.effective_chat.id)
        result = await self.bot_service.end_game(chat_id)
        await update.message.reply_text(result["message"])
    
    async def _send_roles_to_players(self, update: Update, game) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for player in game.players.values():
            try:
                role_info = self._get_role_info(player.role)
                team_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if player.team.value == "predators" else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
                
                role_message = (
                    f"üé≠ **–í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ:**\n\n"
                    f"üë§ {role_info['name']}\n"
                    f"üè¥ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n\n"
                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{role_info['description']}\n\n"
                    f"üå≤ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üå≤"
                )
                
                await update.effective_chat.bot.send_message(
                    chat_id=player.user_id.value,
                    text=role_message
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {player.user_id.value}: {e}")
    
    def _get_role_info(self, role) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        role_info = {
            "wolf": {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            "fox": {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            "hare": {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            "mole": {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞—ë—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            "beaver": {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role.value, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})
    
    def _is_admin(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if chat.type in ['group', 'supergroup']:
            member = chat.get_member(user.id)
            return member.status in ['creator', 'administrator']
        
        return True  # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å—á–∏—Ç–∞–µ–º –∞–¥–º–∏–Ω–æ–º


class VotingHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service
    
    async def handle_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target_id: int = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        user = update.effective_user
        chat_id = ChatId(update.effective_chat.id)
        user_id = UserId(user.id)
        target_user_id = UserId(target_id) if target_id else None
        
        result = await self.bot_service.vote(chat_id, user_id, target_user_id)
        await update.message.reply_text(result["message"])
    
    async def process_voting_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = ChatId(update.effective_chat.id)
        result = await self.bot_service.process_voting(chat_id)
        await update.message.reply_text(result["message"])
