#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –õ–µ—Å –∏ –≤–æ–ª–∫–∏ Bot
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —ç—Ç–∞–ø–∞ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
"""

import logging
from typing import Dict, Optional, Callable, Any
from telegram import Update, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from game_logic import Game, GamePhase, Role, Team
from game_phase_manager import phase_manager
from error_handler import error_handler
from rewards_system import rewards_system, RewardReason

logger = logging.getLogger(__name__)


class CallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
    
    def __init__(self):
        self.logger = logger
        self.callback_handlers: Dict[str, Callable] = {}
        self._setup_handlers()
    
    def get_display_name(self, user_id: int, username: str = None, first_name: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–∏–∫–Ω–µ–π–º > username > first_name)"""
        try:
            from database_psycopg2 import get_user_nickname
            nickname = get_user_nickname(user_id)
            if nickname:
                return nickname
            elif username and not username.isdigit():
                return f"@{username}"
            elif first_name:
                return first_name
            else:
                return f"ID:{user_id}"
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            if username and not username.isdigit():
                return f"@{username}"
            elif first_name:
                return first_name
            else:
                return f"ID:{user_id}"
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤"""
        self.callback_handlers = {
            "view_my_role": self._handle_view_role,
            "repeat_current_phase": self._handle_repeat_phase,
            "day_end_discussion": self._handle_end_discussion,
            "night_end_actions": self._handle_end_night_actions,
            "voting_end": self._handle_end_voting,
            "game_end": self._handle_end_game,
            "admin_panel": self._handle_admin_panel,
            "player_stats": self._handle_player_stats,
            "game_stats": self._handle_game_stats,
            "balance_info": self._handle_balance_info,
            "rewards_info": self._handle_rewards_info,
            "wolf": self._handle_wolf_action,
            "fox": self._handle_fox_action,
            "mole": self._handle_mole_action,
            "beaver": self._handle_beaver_action,
        }
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        query = update.callback_query
        if not query:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback'–∞
            callback_data = query.data
            if not callback_data:
                await error_handler.show_alert(query, "invalid_input", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback'–∞")
                return
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
            parts = callback_data.split("_")
            if not parts:
                await error_handler.show_alert(query, "invalid_input", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback'–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            main_handler = parts[0]
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è wolf_kill, fox_steal, beaver_help, mole_check
            if len(parts) >= 2:
                action_type = f"{parts[0]}_{parts[1]}"
                if action_type in ["wolf_kill", "fox_steal", "beaver_help", "mole_check"]:
                    handler_func = self.callback_handlers.get(parts[0])
                    if handler_func:
                        await handler_func(query, context, parts)
                        return
            
            handler_func = self.callback_handlers.get(main_handler)
            
            if handler_func:
                await handler_func(query, context, parts)
            else:
                await self._handle_unknown_callback(query, context, callback_data)
                
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_view_role(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–æ–ª–∏"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
            if user_id not in game.players:
                await error_handler.show_alert(query, "player_not_found")
                return
            
            player = game.players[user_id]
            role_info = self._get_role_info(player.role)
            team_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if player.team == Team.PREDATORS else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
            
            role_text = (
                f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ:</b>\n\n"
                f"üë§ {role_info['name']}\n"
                f"üè¥ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{role_info['description']}\n\n"
                f"üåô –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üíö –°—Ç–∞—Ç—É—Å: {'–ñ–∏–≤–æ–π' if player.is_alive else '–ú–µ—Ä—Ç–≤—ã–π'}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await context.bot.send_message(chat_id=user_id, text=role_text, parse_mode='HTML')
                await error_handler.show_success_alert(query, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Ä–æ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
            except Exception as e:
                await error_handler.show_alert(query, "network_error", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É!")
                
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_repeat_phase(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
            if user_id not in game.players:
                await error_handler.show_alert(query, "player_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è
            if game.phase == GamePhase.WAITING:
                await error_handler.show_alert(query, "invalid_phase", "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è!")
                return
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
            success = await phase_manager.repeat_current_phase(game, context)
            
            if success:
                phase_name = self._get_phase_name(game.phase)
                await error_handler.show_success_alert(query, f"–°–æ–æ–±—â–µ–Ω–∏–µ {phase_name} –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await error_handler.show_alert(query, "unknown_error", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–∞–ø")
                
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_end_discussion(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ
            if game.phase != GamePhase.DAY:
                await error_handler.show_alert(query, "invalid_phase", "‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self._is_admin(query.from_user.id, game.chat_id):
                await error_handler.show_alert(query, "permission_denied", "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ!")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
            success = await phase_manager.start_phase(game, GamePhase.VOTING, context)
            
            if success:
                await error_handler.show_success_alert(query, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
            else:
                await error_handler.show_alert(query, "unknown_error", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")
                
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_end_night_actions(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ
            if game.phase != GamePhase.NIGHT:
                await error_handler.show_alert(query, "invalid_phase", "‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self._is_admin(query.from_user.id, game.chat_id):
                await error_handler.show_alert(query, "permission_denied", "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ
            success = await phase_manager.start_phase(game, GamePhase.DAY, context)
            
            if success:
                await error_handler.show_success_alert(query, "–ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–µ–Ω—å!")
            else:
                await error_handler.show_alert(query, "unknown_error", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_end_voting(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤ —Ñ–∞–∑–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            if game.phase != GamePhase.VOTING:
                await error_handler.show_alert(query, "invalid_phase", "‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self._is_admin(query.from_user.id, game.chat_id):
                await error_handler.show_alert(query, "permission_denied", "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            exiled_player = game.process_voting()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._send_voting_results(game, context, exiled_player)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á–∏
            game.current_round += 1
            success = await phase_manager.start_phase(game, GamePhase.NIGHT, context)
            
            if success:
                await error_handler.show_success_alert(query, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –Ω–æ—á—å!")
            else:
                await error_handler.show_alert(query, "unknown_error", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
                
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_end_game(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self._is_admin(query.from_user.id, game.chat_id):
                await error_handler.show_alert(query, "permission_denied", "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!")
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            game.phase = GamePhase.GAME_OVER
            await phase_manager.start_phase(game, GamePhase.GAME_OVER, context)
            
            await error_handler.show_success_alert(query, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_admin_panel(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self._is_admin(query.from_user.id, game.chat_id):
                await error_handler.show_alert(query, "permission_denied")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_panel = self._create_admin_panel(game)
            
            await query.edit_message_text(
                text=admin_panel["text"],
                parse_mode='HTML',
                reply_markup=admin_panel["keyboard"]
            )
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_player_stats(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        try:
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            stats = rewards_system.get_user_total_rewards(user_id)
            balance_info = balance_manager.get_user_balance_info(user_id)
            
            stats_text = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_info['balance']} –æ—Ä–µ—à–∫–æ–≤\n"
                f"üèÜ –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {stats['total_rewards']}\n"
                f"üíé –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']} –æ—Ä–µ—à–∫–æ–≤\n"
                f"üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['average_amount']:.1f} –æ—Ä–µ—à–∫–æ–≤\n"
                f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['max_reward']} –æ—Ä–µ—à–∫–æ–≤"
            )
            
            await query.edit_message_text(
                text=stats_text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_game_stats(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await error_handler.show_alert(query, "game_not_found")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
            game_stats = game.get_game_statistics()
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:</b>\n\n"
                f"üîÑ –†–∞—É–Ω–¥: {game_stats['current_round']}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {game_stats['alive_players']}\n"
                f"ü¶Å –•–∏—â–Ω–∏–∫–æ–≤: {game_stats['predators']}\n"
                f"üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: {game_stats['herbivores']}\n"
                f"‚öîÔ∏è –£–±–∏–π—Å—Ç–≤ —Ö–∏—â–Ω–∏–∫–æ–≤: {game_stats['predator_kills']}\n"
                f"üõ°Ô∏è –í—ã–∂–∏–≤–∞–Ω–∏–π —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: {game_stats['herbivore_survivals']}\n"
                f"ü¶ä –ö—Ä–∞–∂ –ª–∏—Å—ã: {game_stats['fox_thefts']}\n"
                f"ü¶¶ –ó–∞—â–∏—Ç –±–æ–±—Ä–∞: {game_stats['beaver_protections']}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {game_stats['game_duration']:.1f} —Å–µ–∫—É–Ω–¥"
            )
            
            await query.edit_message_text(
                text=stats_text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_balance_info(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
        try:
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            balance_info = balance_manager.get_user_balance_info(user_id)
            
            balance_text = (
                f"üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:</b>\n\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance_info['balance']} –æ—Ä–µ—à–∫–æ–≤\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {balance_info['user_id']}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {balance_info.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {balance_info.get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
            
            await query.edit_message_text(
                text=balance_text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_rewards_info(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö"""
        try:
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
            rewards = rewards_system.get_user_rewards(user_id, limit=10)
            total_stats = rewards_system.get_user_total_rewards(user_id)
            
            rewards_text = (
                f"üèÜ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö:</b>\n\n"
                f"üìä –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {total_stats['total_rewards']}\n"
                f"üíé –û–±—â–∞—è —Å—É–º–º–∞: {total_stats['total_amount']} –æ—Ä–µ—à–∫–æ–≤\n"
                f"üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {total_stats['average_amount']:.1f} –æ—Ä–µ—à–∫–æ–≤\n\n"
                f"üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:</b>\n"
            )
            
            for reward in rewards[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                rewards_text += f"‚Ä¢ {reward['description']}: {reward['amount']} –æ—Ä–µ—à–∫–æ–≤\n"
            
            await query.edit_message_text(
                text=rewards_text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    async def _handle_unknown_callback(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback"""
        try:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data}")
            await error_handler.show_alert(query, "unknown_error", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
        except Exception as e:
            await error_handler.handle_callback_error(query, e)
    
    def _find_user_game(self, user_id: int) -> Optional[Game]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            from bot import ForestWolvesBot
            bot_instance = ForestWolvesBot.get_instance()
            
            if not bot_instance:
                self.logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            self.logger.info(f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self.logger.info(f"üîç –í—Å–µ–≥–æ –∏–≥—Ä: {len(bot_instance.games)}")
            self.logger.info(f"üîç player_games: {bot_instance.player_games}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
            if user_id not in bot_instance.player_games:
                # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ player_games, –∏—â–µ–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º
                self.logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ player_games, –∏—â–µ–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º...")
                for chat_id, game in bot_instance.games.items():
                    self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—É {chat_id}, –∏–≥—Ä–æ–∫–∏: {list(game.players.keys())}")
                    if user_id in game.players:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return game
                self.logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = bot_instance.player_games[user_id]
            self.logger.info(f"üîç –ò—â–µ–º –∏–≥—Ä—É {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            game = bot_instance.games.get(chat_id)
            if game:
                self.logger.info(f"‚úÖ –ò–≥—Ä–∞ {chat_id} –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ bot_instance.games")
            return game
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def _is_admin(self, user_id: int, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞ –≤ Telegram
        return True  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    def _get_role_info(self, role: Role) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞—ë—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})
    
    def _get_phase_name(self, phase: GamePhase) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã"""
        phase_names = {
            GamePhase.WAITING: "–æ–∂–∏–¥–∞–Ω–∏—è",
            GamePhase.NIGHT: "–Ω–æ—á–∏",
            GamePhase.DAY: "–¥–Ω—è",
            GamePhase.VOTING: "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            GamePhase.GAME_OVER: "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"
        }
        return phase_names.get(phase, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π")
    
    def _create_admin_panel(self, game: Game) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞–Ω–µ–ª–∏
            panel_text = (
                f"‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> ‚öôÔ∏è\n\n"
                f"üéÆ –ò–≥—Ä–∞: {game.chat_id}\n"
                f"üìã –§–∞–∑–∞: {self._get_phase_name(game.phase)}\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
                f"üíö –ñ–∏–≤—ã—Ö: {len(game.get_alive_players())}\n\n"
                f"üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            
            if game.phase == GamePhase.DAY:
                keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="day_end_discussion")])
            elif game.phase == GamePhase.NIGHT:
                keyboard.append([InlineKeyboardButton("üåÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á—å", callback_data="night_end_actions")])
            elif game.phase == GamePhase.VOTING:
                keyboard.append([InlineKeyboardButton("üó≥Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="voting_end")])
            
            keyboard.append([InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–∞–ø", callback_data="repeat_current_phase")])
            keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã", callback_data="game_stats")])
            keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="game_end")])
            keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            return {
                "text": panel_text,
                "keyboard": reply_markup
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return {
                "text": "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "keyboard": InlineKeyboardMarkup([])
            }
    
    async def _send_voting_results(self, game: Game, context: ContextTypes.DEFAULT_TYPE, exiled_player):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        try:
            if exiled_player:
                display_name = self.get_display_name(exiled_player.user_id, exiled_player.username, None)
                message = f"üó≥Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b> üó≥Ô∏è\n\n‚ùå {display_name} –∏–∑–≥–Ω–∞–Ω –∏–∑ –ª–µ—Å–∞!"
            else:
                import random
                no_exile_messages = [
                    "üå≥ –í–µ—á–µ—Ä –æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ –ª–µ—Å. –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–ø–æ—Ä–∏–ª–∏ –∏ —à–µ–ø—Ç–∞–ª–∏—Å—å, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ —Ä–µ—à–∏–ª–∏—Å—å –∏–∑–≥–Ω–∞—Ç—å –∫–æ–≥–æ-—Ç–æ.",
                    "üçÇ –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å, –∏ –Ω–∏ –æ–¥–∏–Ω –∑–≤–µ—Ä—å –Ω–µ –æ–∫–∞–∑–∞–ª—Å—è –∏–∑–≥–Ω–∞–Ω. –õ–µ—Å –∑–∞—Ç–∞–∏–ª –¥—ã—Ö–∞–Ω–∏–µ.",
                    "üå≤ –ñ–∏–≤–æ—Ç–Ω—ã–µ –ø–µ—Ä–µ–≥–ª—è–¥—ã–≤–∞–ª–∏—Å—å —Å –Ω–µ–¥–æ–≤–µ—Ä–∏–µ–º, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∏–Ω–æ–≤–Ω–æ–≥–æ.",
                    "üåô –ù–∏–∫–æ–≥–æ –Ω–µ –∏–∑–≥–Ω–∞–ª–∏. –õ–µ—Å —É—Å–Ω—É–ª —Å –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç–æ–π –∑–∞–≥–∞–¥–∫–æ–π."
                ]
                message = f"üó≥Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b> üó≥Ô∏è\n\n{random.choice(no_exile_messages)}"
            
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=message,
                parse_mode='HTML',
                message_thread_id=game.thread_id
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

    async def _handle_wolf_action(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–ª–∫–∞"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–ª–∫
            player = game.players.get(user_id)
            if not player or player.role != Role.WOLF:
                await query.answer("‚ùå –í—ã –Ω–µ –≤–æ–ª–∫!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if game.phase != GamePhase.NIGHT:
                await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞!", show_alert=True)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if len(parts) >= 3 and parts[1] == "kill":
                target_id = int(parts[2])
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.set_wolf_target(user_id, target_id)
                    
                    if success:
                        target = game.players[target_id]
                        display_name = self.get_display_name(target.user_id, target.username, target.first_name)
                        await query.edit_message_text(f"üê∫ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å: {display_name}")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
            elif len(parts) >= 2 and parts[1] == "skip":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.skip_action(user_id)
                    
                    if success:
                        await query.edit_message_text("‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–ª–∫–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def _handle_fox_action(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Å—ã"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—Å–∞
            player = game.players.get(user_id)
            if not player or player.role != Role.FOX:
                await query.answer("‚ùå –í—ã –Ω–µ –ª–∏—Å–∞!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if game.phase != GamePhase.NIGHT:
                await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞!", show_alert=True)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if len(parts) >= 3 and parts[1] == "steal":
                target_id = int(parts[2])
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.set_fox_target(user_id, target_id)
                    
                    if success:
                        target = game.players[target_id]
                        display_name = self.get_display_name(target.user_id, target.username, target.first_name)
                        await query.edit_message_text(f"ü¶ä –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å –¥–ª—è –∫—Ä–∞–∂–∏: {display_name}")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
            elif len(parts) >= 2 and parts[1] == "skip":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.skip_action(user_id)
                    
                    if success:
                        await query.edit_message_text("‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Å—ã: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def _handle_mole_action(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫—Ä–æ—Ç–∞"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—Ä–æ—Ç
            player = game.players.get(user_id)
            if not player or player.role != Role.MOLE:
                await query.answer("‚ùå –í—ã –Ω–µ –∫—Ä–æ—Ç!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if game.phase != GamePhase.NIGHT:
                await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞!", show_alert=True)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if len(parts) >= 3 and parts[1] == "check":
                target_id = int(parts[2])
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.set_mole_target(user_id, target_id)
                    
                    if success:
                        target = game.players[target_id]
                        display_name = self.get_display_name(target.user_id, target.username, target.first_name)
                        await query.edit_message_text(f"ü¶´ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {display_name}")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
            elif len(parts) >= 2 and parts[1] == "skip":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.skip_action(user_id)
                    
                    if success:
                        await query.edit_message_text("‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –∫—Ä–æ—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def _handle_beaver_action(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE, parts: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –±–æ–±—Ä–∞"""
        try:
            user_id = query.from_user.id
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            game = self._find_user_game(user_id)
            if not game:
                await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–±—Ä
            player = game.players.get(user_id)
            if not player or player.role != Role.BEAVER:
                await query.answer("‚ùå –í—ã –Ω–µ –±–æ–±—Ä!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if game.phase != GamePhase.NIGHT:
                await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞!", show_alert=True)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if len(parts) >= 3 and parts[1] == "help":
                target_id = int(parts[2])
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.set_beaver_target(user_id, target_id)
                    
                    if success:
                        target = game.players[target_id]
                        display_name = self.get_display_name(target.user_id, target.username, target.first_name)
                        await query.edit_message_text(f"ü¶¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å –¥–ª—è –ø–æ–º–æ—â–∏: {display_name}")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
            elif len(parts) >= 2 and parts[1] == "skip":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞
                from bot import ForestWolvesBot
                bot_instance = ForestWolvesBot.get_instance()
                if bot_instance and game.chat_id in bot_instance.night_actions:
                    night_actions = bot_instance.night_actions[game.chat_id]
                    success = night_actions.skip_action(user_id)
                    
                    if success:
                        await query.edit_message_text("‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥")
                    else:
                        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥!", show_alert=True)
                else:
                    await query.answer("‚ùå –ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", show_alert=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–±—Ä–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback'–æ–≤
callback_handler = CallbackHandler()
