#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from database import init_database, get_db_session
from forest_system import ForestManager, ForestConfig, ForestPrivacy

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class MockBot:
    """–ú–æ–∫-–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def send_message(self, chat_id, text, **kwargs):
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}:")
        print(f"   {text}")
        if 'reply_markup' in kwargs:
            print(f"   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {kwargs['reply_markup']}")
        print()


async def test_forest_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ª–µ—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ—Å–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_database()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç–∞
        mock_bot = MockBot()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ª–µ—Å–æ–≤
        forest_manager = ForestManager(mock_bot)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–µ—Å
        config = await forest_manager.create_forest(
            creator_id=123456789,
            name="–¢–µ—Å—Ç–æ–≤—ã–π –ª–µ—Å",
            description="–õ–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
            privacy="public",
            max_size=10,
            batch_size=6,
            cooldown_minutes=30
        )
        
        print(f"‚úÖ –õ–µ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   ID: {config.forest_id}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {config.name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {config.description}")
        print(f"   –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: {config.privacy}")
        print(f"   –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {config.max_size}")
        
        return config
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ—Å–∞: {e}")
        return None


async def test_forest_membership():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–µ—Å—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–µ—Å—É...")
    
    try:
        mock_bot = MockBot()
        forest_manager = ForestManager(mock_bot)
        
        # –°–æ–∑–¥–∞–µ–º –ª–µ—Å
        config = await forest_manager.create_forest(
            creator_id=123456789,
            name="–õ–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            privacy="public",
            max_size=5
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        test_members = [
            (111111111, "user1", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"),
            (222222222, "user2", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2"),
            (333333333, "user3", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3"),
        ]
        
        for user_id, username, first_name in test_members:
            success = await forest_manager.join_forest(
                forest_id=config.forest_id,
                user_id=user_id,
                username=username,
                first_name=first_name
            )
            
            if success:
                print(f"‚úÖ {first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–µ—Å—É")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {first_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = await forest_manager.get_forest_members(config.forest_id)
        print(f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–µ—Å—É: {len(members)}")
        
        for member in members:
            print(f"   ‚Ä¢ {member.first_name} (@{member.username})")
        
        return config
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return None


async def test_summon_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–æ–∑—ã–≤–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑—ã–≤–∞...")
    
    try:
        from summon_system import SummonSystem
        
        mock_bot = MockBot()
        summon_system = SummonSystem(mock_bot)
        
        # –°–æ–∑–¥–∞–µ–º –ª–µ—Å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        mock_bot = MockBot()
        forest_manager = ForestManager(mock_bot)
        
        config = await forest_manager.create_forest(
            creator_id=123456789,
            name="–õ–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑—ã–≤–∞",
            description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑—ã–≤–∞",
            privacy="public",
            max_size=10,
            batch_size=3,  # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            cooldown_minutes=1  # –ö–æ—Ä–æ—Ç–∫–∏–π cooldown –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        test_members = [
            (111111111, "user1", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"),
            (222222222, "user2", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2"),
            (333333333, "user3", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3"),
            (444444444, "user4", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4"),
            (555555555, "user5", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 5"),
        ]
        
        for user_id, username, first_name in test_members:
            await forest_manager.join_forest(
                forest_id=config.forest_id,
                user_id=user_id,
                username=username,
                first_name=first_name
            )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑—ã–≤
        result = await summon_system.summon_forest_members(
            forest_id=config.forest_id,
            invoker_id=123456789,
            chat_id=-1001234567890,  # –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
            config=config,
            game_time="20:00",
            location="–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑—ã–≤–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
        print(f"   –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.total_members}")
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–æ: {result.notified_members}")
        print(f"   –ë–∞—Ç—á–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.batches_sent}")
        
        if result.errors:
            print(f"   –û—à–∏–±–∫–∏: {len(result.errors)}")
            for error in result.errors:
                print(f"     ‚Ä¢ {error}")
        
        return result.status.value == "success"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑—ã–≤–∞: {e}")
        return False


async def test_database_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import Forest, ForestMember
        
        session = get_db_session()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–µ—Å–∞
            forests = session.query(Forest).all()
            print(f"üìã –õ–µ—Å–æ–≤ –≤ –±–∞–∑–µ: {len(forests)}")
            
            for forest in forests:
                member_count = len(forest.members)
                print(f"   ‚Ä¢ {forest.name} (ID: {forest.id}) - {member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            members = session.query(ForestMember).all()
            print(f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–µ—Å–∞–º
            from collections import defaultdict
            forest_members = defaultdict(list)
            
            for member in members:
                forest_members[member.forest_id].append(member)
            
            for forest_id, members_list in forest_members.items():
                print(f"   –õ–µ—Å {forest_id}: {len(members_list)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                for member in members_list:
                    print(f"     ‚Ä¢ {member.first_name} (@{member.username})")
            
            return True
            
        finally:
            session.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üå≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–µ—Å–æ–≤ üå≤")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        init_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ—Å–∞", test_forest_creation),
        ("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–µ—Å–∞", test_forest_membership),
        ("–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑—ã–≤–∞", test_summon_system),
        ("–ó–∞–ø—Ä–æ—Å—ã –∫ –ë–î", test_database_queries),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = await test_func()
            results.append((test_name, result is not False))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –ª–µ—Å–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
