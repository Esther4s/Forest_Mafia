#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ GitHub
"""

import os
import sys

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Git
    if not os.path.exists('.git'):
        print("‚ö†Ô∏è Git –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git init")
        return False
    
    print("‚úÖ Git –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return True

def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore...")
    
    if not os.path.exists('.gitignore'):
        print("‚ùå –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open('.gitignore', 'r', encoding='utf-8') as f:
        gitignore_content = f.read()
    
    required_ignores = ['.env', '*.db', '*.sqlite', '__pycache__']
    missing_ignores = []
    
    for ignore in required_ignores:
        if ignore not in gitignore_content:
            missing_ignores.append(ignore)
    
    if missing_ignores:
        print(f"‚ö†Ô∏è –í .gitignore –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_ignores)}")
        return False
    
    print("‚úÖ .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    return True

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª...")
    
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        if 'your_bot_token_here' in env_content or 'test_token' in env_content:
            print("‚úÖ .env —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
        else:
            print("‚ö†Ô∏è .env –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore")
    else:
        print("‚úÖ .env —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
    
    return True

def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã...")
    
    required_files = [
        'README.md',
        'requirements.txt',
        'bot.py',
        'config.py',
        'database.py',
        'railway.json',
        'env.production'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True

def check_documentation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
    
    docs = [
        'DEPLOYMENT.md',
        'RAILWAY_DEPLOYMENT_GUIDE.md',
        'PRODUCTION_CHECKLIST.md',
        'IMPORTANT_FIXES_REPORT.md'
    ]
    
    missing_docs = []
    for doc in docs:
        if not os.path.exists(doc):
            missing_docs.append(doc)
    
    if missing_docs:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {', '.join(missing_docs)}")
        return False
    
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è")
    return True

def check_file_sizes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    large_files = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.startswith('.'):
                continue
            
            file_path = os.path.join(root, file)
            try:
                size = os.path.getsize(file_path)
                if size > 100 * 1024 * 1024:  # 100MB
                    large_files.append(f"{file_path} ({size // (1024*1024)}MB)")
            except:
                pass
    
    if large_files:
        print(f"‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã: {', '.join(large_files)}")
        print("üí° GitHub –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 100MB –Ω–∞ —Ñ–∞–π–ª")
        return False
    
    print("‚úÖ –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ—Ä–º–µ")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ GitHub")
    print("=" * 50)
    
    checks = [
        ("Git —Å—Ç–∞—Ç—É—Å", check_git_status),
        (".gitignore", check_gitignore),
        (".env —Ñ–∞–π–ª", check_env_file),
        ("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã", check_required_files),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", check_documentation),
        ("–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤", check_file_sizes)
    ]
    
    passed = 0
    total = len(checks)
    
    for check_name, check_func in checks:
        print(f"\nüîç {check_name}...")
        try:
            if check_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {check_name}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –ì–û–¢–û–í –ö –ó–ê–ì–†–£–ó–ö–ï –ù–ê GITHUB!")
        print("\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
        print("git init")
        print("git add .")
        print("git commit -m \"Initial commit: –õ–µ—Å –∏ –≤–æ–ª–∫–∏ Bot ready for production\"")
        print("git remote add origin https://github.com/YOUR_USERNAME/forest-mafia-bot.git")
        print("git push -u origin main")
        return True
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è –ü–û–ß–¢–ò –ì–û–¢–û–í –ö –ó–ê–ì–†–£–ó–ö–ï")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã")
        return False
    else:
        print("‚ùå –ù–ï –ì–û–¢–û–í –ö –ó–ê–ì–†–£–ó–ö–ï")
        print("üõ†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
