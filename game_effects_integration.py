#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
–≠—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤—É—é—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –∏–≥—Ä—É
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from database_psycopg2 import (
    add_enhanced_active_effect,
    get_enhanced_active_effects,
    trigger_effect,
    mark_effect_as_used,
    expire_effect,
    cleanup_expired_effects
)

logger = logging.getLogger(__name__)

class GameEffectsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    def __init__(self):
        self.effect_types = {
            'game_start': '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã',
            'game_end': '–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã',
            'night_phase': '–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞',
            'day_phase': '–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞',
            'round_start': '–ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞',
            'round_end': '–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞',
            'player_death': '–°–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞',
            'role_assignment': '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π'
        }
    
    def apply_effects_at_game_start(self, game_id: str, chat_id: int, players: List[Dict]) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        
        Args:
            game_id: ID –∏–≥—Ä—ã
            chat_id: ID —á–∞—Ç–∞
            players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        try:
            logger.info(f"üéÆ apply_effects_at_game_start: –ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_id}")
            
            applied_effects = []
            total_effects = 0
            
            for player in players:
                user_id = player.get('user_id') or player.get('id')
                if not user_id:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞
                effects = get_enhanced_active_effects(
                    user_id=user_id,
                    game_id=game_id,
                    status='active'
                )
                
                logger.info(f"üîç apply_effects_at_game_start: –ù–∞–π–¥–µ–Ω–æ {len(effects)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}")
                
                for effect in effects:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                    if self._can_apply_effect_at_game_start(effect):
                        # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                        success = trigger_effect(
                            effect_id=effect['id'],
                            triggered_by='game_start',
                            trigger_data={
                                'game_id': game_id,
                                'chat_id': chat_id,
                                'round': 1,
                                'phase': 'night'
                            }
                        )
                        
                        if success:
                            applied_effects.append({
                                'user_id': user_id,
                                'item_name': effect['item_name'],
                                'effect_type': effect['effect_type'],
                                'message': f"‚úÖ {effect['item_name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã!"
                            })
                            total_effects += 1
                            logger.info(f"‚úÖ apply_effects_at_game_start: –≠—Ñ—Ñ–µ–∫—Ç {effect['item_name']} –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}")
                        else:
                            logger.warning(f"‚ùå apply_effects_at_game_start: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç {effect['item_name']} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}")
            
            logger.info(f"üéâ apply_effects_at_game_start: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {total_effects} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_id}")
            
            return {
                'success': True,
                'applied_effects': applied_effects,
                'total_effects': total_effects,
                'message': f"üéÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {total_effects} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã"
            }
            
        except Exception as e:
            logger.error(f"‚ùå apply_effects_at_game_start: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return {
                'success': False,
                'applied_effects': [],
                'total_effects': 0,
                'message': f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}"
            }
    
    def apply_effects_at_game_end(self, game_id: str, chat_id: int, players: List[Dict]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        
        Args:
            game_id: ID –∏–≥—Ä—ã
            chat_id: ID —á–∞—Ç–∞
            players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        try:
            logger.info(f"üèÅ apply_effects_at_game_end: –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã {game_id}")
            
            expired_effects = []
            total_effects = 0
            
            for player in players:
                user_id = player.get('user_id') or player.get('id')
                if not user_id:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
                effects = get_enhanced_active_effects(
                    user_id=user_id,
                    game_id=game_id,
                    status='active'
                )
                
                for effect in effects:
                    # –û—Ç–º–µ—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π
                    success = expire_effect(
                        effect_id=effect['id'],
                        reason='game_end'
                    )
                    
                    if success:
                        expired_effects.append({
                            'user_id': user_id,
                            'item_name': effect['item_name'],
                            'effect_type': effect['effect_type']
                        })
                        total_effects += 1
                        logger.info(f"‚úÖ apply_effects_at_game_end: –≠—Ñ—Ñ–µ–∫—Ç {effect['item_name']} –∏—Å—Ç–µ–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}")
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            cleaned = cleanup_expired_effects()
            
            logger.info(f"üßπ apply_effects_at_game_end: –ò—Å—Ç–µ–∫–ª–æ {total_effects} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –æ—á–∏—â–µ–Ω–æ {cleaned} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–≥—Ä—ã {game_id}")
            
            return {
                'success': True,
                'expired_effects': expired_effects,
                'total_effects': total_effects,
                'cleaned_effects': cleaned,
                'message': f"üèÅ –ò—Å—Ç–µ–∫–ª–æ {total_effects} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã"
            }
            
        except Exception as e:
            logger.error(f"‚ùå apply_effects_at_game_end: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return {
                'success': False,
                'expired_effects': [],
                'total_effects': 0,
                'message': f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}"
            }
    
    def apply_effects_during_game(self, game_id: str, chat_id: int, event_type: str, event_data: Dict = None) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        
        Args:
            game_id: ID –∏–≥—Ä—ã
            chat_id: ID —á–∞—Ç–∞
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        """
        try:
            logger.info(f"üéØ apply_effects_during_game: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type} –≤ –∏–≥—Ä–µ {game_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä—ã
            from database_psycopg2 import get_game_players
            players = get_game_players(game_id)
            
            if not players:
                logger.warning(f"‚ö†Ô∏è apply_effects_during_game: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –¥–ª—è –∏–≥—Ä—ã {game_id}")
                return {
                    'success': False,
                    'message': "–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            
            triggered_effects = []
            total_effects = 0
            
            for player in players:
                user_id = player.get('user_id')
                if not user_id:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞
                effects = get_enhanced_active_effects(
                    user_id=user_id,
                    game_id=game_id,
                    status='active'
                )
                
                for effect in effects:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    if self._should_trigger_effect_for_event(effect, event_type, event_data):
                        # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                        success = trigger_effect(
                            effect_id=effect['id'],
                            triggered_by=event_type,
                            trigger_data=event_data or {}
                        )
                        
                        if success:
                            triggered_effects.append({
                                'user_id': user_id,
                                'item_name': effect['item_name'],
                                'effect_type': effect['effect_type'],
                                'event_type': event_type
                            })
                            total_effects += 1
                            logger.info(f"‚úÖ apply_effects_during_game: –≠—Ñ—Ñ–µ–∫—Ç {effect['item_name']} —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}")
            
            logger.info(f"üéâ apply_effects_during_game: –°—Ä–∞–±–æ—Ç–∞–ª–æ {total_effects} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}")
            
            return {
                'success': True,
                'triggered_effects': triggered_effects,
                'total_effects': total_effects,
                'message': f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª–æ {total_effects} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}"
            }
            
        except Exception as e:
            logger.error(f"‚ùå apply_effects_during_game: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return {
                'success': False,
                'triggered_effects': [],
                'total_effects': 0,
                'message': f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}"
            }
    
    def _can_apply_effect_at_game_start(self, effect: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        
        Args:
            effect: –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        
        Returns:
            bool: –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            trigger_conditions = effect.get('trigger_conditions', {})
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π, –ø—Ä–∏–º–µ–Ω—è–µ–º
            if not trigger_conditions:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            if 'event_types' in trigger_conditions:
                if 'game_start' not in trigger_conditions['event_types']:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if 'game_phase' in trigger_conditions:
                if trigger_conditions['game_phase'] != 'night':
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå _can_apply_effect_at_game_start: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞: {e}")
            return False
    
    def _should_trigger_effect_for_event(self, effect: Dict, event_type: str, event_data: Dict = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        
        Args:
            effect: –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: –î–æ–ª–∂–µ–Ω –ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if effect['effect_status'] != 'active' or effect['remaining_uses'] <= 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            trigger_conditions = effect.get('trigger_conditions', {})
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            if not trigger_conditions:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            if 'event_types' in trigger_conditions:
                if event_type not in trigger_conditions['event_types']:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            if 'game_phase' in trigger_conditions and event_data:
                if event_data.get('game_phase') != trigger_conditions['game_phase']:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå _should_trigger_effect_for_event: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞: {e}")
            return False
    
    def get_game_effects_summary(self, game_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º –∏–≥—Ä—ã
        
        Args:
            game_id: ID –∏–≥—Ä—ã
        
        Returns:
            Dict: –°–≤–æ–¥–∫–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º
        """
        try:
            from database_psycopg2 import get_game_players
            players = get_game_players(game_id)
            
            if not players:
                return {
                    'success': False,
                    'message': "–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            
            total_effects = 0
            effects_by_player = {}
            
            for player in players:
                user_id = player.get('user_id')
                if not user_id:
                    continue
                
                effects = get_enhanced_active_effects(
                    user_id=user_id,
                    game_id=game_id,
                    status='active'
                )
                
                effects_by_player[user_id] = effects
                total_effects += len(effects)
            
            return {
                'success': True,
                'game_id': game_id,
                'total_effects': total_effects,
                'effects_by_player': effects_by_player,
                'message': f"üìä –ù–∞–π–¥–µ–Ω–æ {total_effects} –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∏–≥—Ä–µ"
            }
            
        except Exception as e:
            logger.error(f"‚ùå get_game_effects_summary: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {
                'success': False,
                'message': f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}"
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
game_effects_manager = GameEffectsManager()
