#!/usr/bin/env python36
# -*- coding: utf-8 -*-

import asyncio
import logging
import random
from typing import Dict, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ChatMemberHandler,
    MessageHandler,
    filters,
    ContextTypes
)

from game_logic import Game, GamePhase, Role, Team, Player  # –≤–∞—à–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
from config import BOT_TOKEN  # –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from night_actions import NightActions
from night_interface import NightInterface
from global_settings import GlobalSettings # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GlobalSettings
from forest_mafia_settings import ForestWolvesSettings
from database_adapter import DatabaseAdapter
from database_psycopg2 import (
    init_db, close_db,
    create_user, get_user_by_telegram_id, update_user_balance, get_user_balance,
    execute_query, fetch_one, fetch_query,
    get_chat_settings, update_chat_settings, reset_chat_settings,
    create_tables,
    save_player_action, save_vote, update_player_stats, update_user_stats,
    get_bot_setting, set_bot_setting,
    save_game_to_db, save_player_to_db, update_game_phase, finish_game_in_db,
    get_team_stats, get_top_players, get_best_predator, get_best_herbivore, get_player_detailed_stats,
    get_player_chat_stats, add_nuts_to_user, get_shop_items
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ForestWolvesBot:
    def __init__(self):
        # chat_id -> Game
        self.games: Dict[int, Game] = {}
        # user_id -> chat_id
        self.player_games: Dict[int, int] = {}
        # chat_id -> NightActions
        self.night_actions: Dict[int, NightActions] = {}
        # chat_id -> NightInterface
        self.night_interfaces: Dict[int, NightInterface] = {}
        # Global settings instance
        self.global_settings = GlobalSettings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db = init_db()
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            tables_created = create_tables()
            if not tables_created:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü, –Ω–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db = None
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.no_exile_messages = [
            "üå≥ –í–µ—á–µ—Ä –æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ –ª–µ—Å. –ñ–∏–≤–æ—Ç–Ω—ã–µ —Å–ø–æ—Ä–∏–ª–∏ –∏ —à–µ–ø—Ç–∞–ª–∏—Å—å, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ —Ä–µ—à–∏–ª–∏—Å—å –∏–∑–≥–Ω–∞—Ç—å –∫–æ–≥–æ-—Ç–æ. –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–∏—Å–µ—Ç—å –≤ –≤–æ–∑–¥—É—Ö–µ, –∫–∞–∫ —Ç—É–º–∞–Ω –Ω–∞–¥ –ø–æ–ª—è–Ω–æ–π.",
            "üçÇ –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å, –∏ –Ω–∏ –æ–¥–∏–Ω –∑–≤–µ—Ä—å –Ω–µ –æ–∫–∞–∑–∞–ª—Å—è –∏–∑–≥–Ω–∞–Ω. –õ–µ—Å –∑–∞—Ç–∞–∏–ª –¥—ã—Ö–∞–Ω–∏–µ ‚Äî –∑–Ω–∞—á–∏—Ç, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –µ—â—ë —Ç—Ä–µ–≤–æ–∂–Ω–µ–µ.",
            "üå≤ –ñ–∏–≤–æ—Ç–Ω—ã–µ –ø–µ—Ä–µ–≥–ª—è–¥—ã–≤–∞–ª–∏—Å—å —Å –Ω–µ–¥–æ–≤–µ—Ä–∏–µ–º, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∏–Ω–æ–≤–Ω–æ–≥–æ. –õ–µ—Å –ø—Ä–æ–≤–æ–¥–∏–ª –¥–µ–Ω—å –≤ —Ç–∏—à–∏–Ω–µ, —Å–ª–æ–≤–Ω–æ –ø—Ä—è—á–∞ —á—å—é-—Ç–æ —Ç–∞–π–Ω—É.",
            "üåô –ù–∏–∫–æ–≥–æ –Ω–µ –∏–∑–≥–Ω–∞–ª–∏. –õ–µ—Å —É—Å–Ω—É–ª —Å –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç–æ–π –∑–∞–≥–∞–¥–∫–æ–π, –∞ —Ç—Ä–µ–≤–æ–≥–∞ –≤ —Å–µ—Ä–¥—Ü–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ª–∏—à—å —É—Å–∏–ª–∏–ª–∞—Å—å."
        ]
        
        self.no_kill_messages = [
            "üåå –í–æ–ª–∫–∏ –≤—ã–ª–∏ –Ω–∞ –ª—É–Ω—É, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ–±—ã—á–∏. –£—Ç—Ä–æ–º –≤—Å–µ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å —Ü–µ–ª—ã–º–∏ –∏ –Ω–µ–≤—Ä–µ–¥–∏–º—ã–º–∏. –ù–æ —Å–∫–æ–ª—å–∫–æ –µ—â—ë –ø—Ä–æ–¥–ª–∏—Ç—Å—è —ç—Ç–∞ —É–¥–∞—á–∞?",
            "üå≤ –ù–æ—á—å –ø—Ä–æ—à–ª–∞ —Ç–∏—Ö–æ. –í–æ–ª—á—å–∏ –ª–∞–ø—ã –±—Ä–æ–¥–∏–ª–∏ –ø–æ –ª–µ—Å—É, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª —Ç—Ä–æ–Ω—É—Ç. –ñ–∏–≤–æ—Ç–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏ —Ä–∞—Å—Å–≤–µ—Ç —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º ‚Äî –ø–æ–∫–∞.",
            "üçÉ –í–æ–ª–∫–∏ –∫—Ä—É–∂–∏–ª–∏ –ø–æ –ø–æ–ª—è–Ω–µ, –Ω–æ –∏—Ö –ø–∞—Å—Ç–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≥–æ–ª–æ–¥–Ω—ã–º–∏. –£—Ç—Ä–æ –Ω–∞—Å—Ç–∞–ª–æ –±–µ–∑ –ø–æ—Ç–µ—Ä—å, –∏ –ª–µ—Å –∑–∞—à–µ–ø—Ç–∞–ª: ¬´–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?..¬ª",
            "üåô –ó–≤—ë–∑–¥—ã –Ω–∞–±–ª—é–¥–∞–ª–∏, –∫–∞–∫ –≤–æ–ª–∫–∏ –∏—Å–∫–∞–ª–∏ –∂–µ—Ä—Ç–≤—É, –Ω–æ —ç—Ç–æ–π –Ω–æ—á—å—é –∑—É–±—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø—É—Å—Ç—ã–º–∏. –ñ–∏–≤–æ—Ç–Ω—ã–µ –æ–±–Ω—è–ª–∏ —Ä–∞—Å—Å–≤–µ—Ç —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å—Ç—Ä–∞—Ö–æ–º."
        ]
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ —Ç–µ–º (chat_id, thread_id –∏–ª–∏ None –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞)
        self.authorized_chats: set = set()  # –•—Ä–∞–Ω–∏—Ç –∫–æ—Ä—Ç–µ–∂–∏ (chat_id, thread_id)
        # Bot token
        self.bot_token = BOT_TOKEN
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db = init_db()
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            tables_created = create_tables()
            if not tables_created:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü, –Ω–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.load_active_games()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        try:
            from auto_save_manager import AutoSaveManager
            self.auto_save_manager = AutoSaveManager(self)
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            self.auto_save_manager = None

    def load_active_games(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
        try:
            if not self.db:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return
            
            from database_psycopg2 import load_all_active_games, load_players_state
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
            active_games_data = load_all_active_games()
            
            for game_data in active_games_data:
                try:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    game = Game.from_dict(game_data)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
                    players_data = load_players_state(game_data['id'])
                    for player_data in players_data:
                        user_id = player_data['user_id']
                        role = Role(player_data['role']) if player_data.get('role') else None
                        team = Team(player_data['team']) if player_data.get('team') else None
                        
                        player = Player(
                            user_id=user_id,
                            username=player_data.get('username'),
                            first_name=player_data.get('first_name'),
                            role=role,
                            team=team
                        )
                        player.is_alive = player_data.get('is_alive', True)
                        game.players[user_id] = player
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ —Å–ª–æ–≤–∞—Ä—å
                    self.games[game.chat_id] = game
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    self.night_actions[game.chat_id] = NightActions(game)
                    self.night_interfaces[game.chat_id] = NightInterface(game, self.night_actions[game.chat_id])
                    
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–≥—Ä–∞ –≤ —á–∞—Ç–µ {game.chat_id} (—Ñ–∞–∑–∞: {game.phase.value})")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã {game_data.get('id', 'unknown')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_games_data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∏–∑ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {e}")
    
    def start_auto_save(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        if hasattr(self, 'auto_save_manager') and self.auto_save_manager:
            self.auto_save_manager.start_auto_save()
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop_auto_save(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        if hasattr(self, 'auto_save_manager') and self.auto_save_manager:
            self.auto_save_manager.stop_auto_save()
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def force_save_state(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        if hasattr(self, 'auto_save_manager') and self.auto_save_manager:
            self.auto_save_manager.force_save()
            logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    def save_game_state(self, chat_id: int) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            chat_id: ID —á–∞—Ç–∞ —Å –∏–≥—Ä–æ–π
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            if chat_id not in self.games:
                return False
            
            game = self.games[chat_id]
            from database_psycopg2 import save_game_state, save_players_state
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏–≥—Ä—É
            game_data = game.to_dict()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            if not save_game_state(game_data):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ —á–∞—Ç–µ {chat_id}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            players_data = []
            for player in game.players.values():
                players_data.append({
                    'id': f"{chat_id}_{player.user_id}",
                    'user_id': player.user_id,
                    'username': player.username,
                    'first_name': player.first_name,
                    'role': player.role.value if player.role else None,
                    'is_alive': player.is_alive,
                    'team': player.team.value if player.team else None
                })
            
            if not save_players_state(game_data['id'], players_data):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä—ã –≤ —á–∞—Ç–µ {chat_id}")
                return False
            
            logger.debug(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ —á–∞—Ç–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return False
    
    def save_all_games_state(self) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä
        """
        saved_count = 0
        for chat_id in self.games:
            if self.save_game_state(chat_id):
                saved_count += 1
        
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {saved_count} –∏–≥—Ä")
        return saved_count

    # ---------------- helper functions ----------------
    async def can_bot_write_in_chat(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–∏—Å–∞—Ç—å –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç–µ
            if not context.bot or not context.bot.id:
                return False
            bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            if bot_member.status in ['administrator', 'creator']:
                return True
            elif bot_member.status == 'member':
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                chat = await context.bot.get_chat(chat_id)
                if chat.type == 'private':
                    return True
                # –í –≥—Ä—É–ø–ø–∞—Ö –æ–±—ã—á–Ω–æ —á–ª–µ–Ω—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
                return True
            else:
                # kicked, left, restricted
                return False
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return False

    def get_thread_id(self, update: Update) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç thread_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback query"""
        if hasattr(update, 'message') and update.message:
            return getattr(update.message, 'message_thread_id', None)
        elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
            return getattr(update.callback_query.message, 'message_thread_id', None)
        return None

    def is_chat_authorized(self, chat_id: int, thread_id: Optional[int] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —á–∞—Ç/—Ç–µ–º–∞ –¥–ª—è –∏–≥—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (chat_id, thread_id)
        if (chat_id, thread_id) in self.authorized_chats:
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤—Å–µ–≥–æ —á–∞—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (chat_id, None) in self.authorized_chats and thread_id is None:
            return True
        return False

    def authorize_chat(self, chat_id: int, thread_id: Optional[int] = None):
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —á–∞—Ç/—Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã"""
        self.authorized_chats.add((chat_id, thread_id))
        if thread_id:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–∞—Ç {chat_id}, —Ç–µ–º–∞ {thread_id} –¥–ª—è –∏–≥—Ä—ã")
        else:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–∞—Ç {chat_id} –¥–ª—è –∏–≥—Ä—ã")

    async def check_bot_permissions_decorator(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        thread_id = self.get_thread_id(update)
        
        # –í–°–ï–ì–î–ê —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∏–≥—Ä—ã!)
        if chat_id == user_id:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        if not await self.can_bot_write_in_chat(context, chat_id):
            logger.info(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ {chat_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É")
            return False
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /setup_channel –∏ /remove_channel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤
        if hasattr(update, 'message') and update.message and update.message.text:
            if update.message.text.startswith('/setup_channel') or update.message.text.startswith('/remove_channel'):
                return True
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º —á–∞—Ç/—Ç–µ–º—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
        game_commands = ['/join', '/start_game', '/status', '/rules', '/settings', '/end_game', '/end',
                        '/force_end', '/help', '/version', '/test_mode', '/min_players']
        
        if hasattr(update, 'message') and update.message and update.message.text:
            for cmd in game_commands:
                if update.message.text.startswith(cmd):
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç/—Ç–µ–º—É –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                    if not self.is_chat_authorized(chat_id, thread_id):
                        self.authorize_chat(chat_id, thread_id)
                    return True
        
        # –î–ª—è callback query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫) —Ç–æ–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
        if hasattr(update, 'callback_query') and update.callback_query:
            if not self.is_chat_authorized(chat_id, thread_id):
                self.authorize_chat(chat_id, thread_id)
                if thread_id:
                    logger.info(f"–¢–µ–º–∞ {thread_id} –≤ —á–∞—Ç–µ {chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è callback")
                else:
                    logger.info(f"–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è callback")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —á–∞—Ç/—Ç–µ–º–∞
        if not self.is_chat_authorized(chat_id, thread_id):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º —á–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
            self.authorize_chat(chat_id, thread_id)
            if thread_id:
                logger.info(f"–¢–µ–º–∞ {thread_id} –≤ —á–∞—Ç–µ {chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –∏–≥—Ä—ã")
            else:
                logger.info(f"–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä—ã")
        
        return True

    # ---------------- helper functions for game logic ----------------
    def get_display_name(self, user_id: int, username: str = None, first_name: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–∏–∫–Ω–µ–π–º > username > first_name)"""
        try:
            from database_psycopg2 import get_user_nickname
            nickname = get_user_nickname(user_id)
            if nickname:
                return nickname
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ first_name
        if username and not username.isdigit():
            return username
        elif first_name:
            return first_name
        else:
            return f"ID:{user_id}"

    def format_player_tag(self, username: str, user_id: int, make_clickable: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
            from database_psycopg2 import get_user_nickname
            nickname = get_user_nickname(user_id)
            
            if nickname:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if make_clickable:
                    return f'<a href="tg://user?id={user_id}">{nickname}</a>'
                else:
                    return nickname
            elif username and not username.isdigit():
                # –ï—Å–ª–∏ username –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ID
                if make_clickable:
                    return f'<a href="tg://user?id={user_id}">@{username}</a>'
                else:
                    return f"@{username}" if not username.startswith('@') else username
            else:
                # –ï—Å–ª–∏ username –Ω–µ—Ç –∏–ª–∏ —ç—Ç–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                if make_clickable:
                    return f'<a href="tg://user?id={user_id}">ID:{user_id}</a>'
                else:
                    return f"ID:{user_id}"
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            if username and not username.isdigit():
                if make_clickable:
                    return f'<a href="tg://user?id={user_id}">@{username}</a>'
                else:
                    return f"@{username}" if not username.startswith('@') else username
            else:
                if make_clickable:
                    return f'<a href="tg://user?id={user_id}">ID:{user_id}</a>'
                else:
                    return f"ID:{user_id}"

    async def _join_game_common(self, chat_id: int, user_id: int, username: str, context: ContextTypes.DEFAULT_TYPE, 
                               is_callback: bool = False, update: Update = None) -> tuple[bool, str, any]:
        """
        –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (success, message, reply_markup)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            return False, "‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–º.", None

        # already in another game?
        if user_id in self.player_games:
            other_chat = self.player_games[user_id]
            if other_chat != chat_id:
                try:
                    other_chat_info = await context.bot.get_chat(other_chat)
                    chat_name = other_chat_info.title or f"–ß–∞—Ç {other_chat}"
                except:
                    chat_name = f"–ß–∞—Ç {other_chat}"
                return False, f"‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!\n–ß–∞—Ç: {chat_name}", None
            else:
                # –ò–≥—Ä–æ–∫ —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                game = self.games[chat_id]
                max_players = getattr(game, "MAX_PLAYERS", 12)
                
                keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message = f"‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}"
                return False, message, reply_markup

        # create game if needed
        if chat_id not in self.games:
            thread_id = self.get_thread_id(update)
            self.games[chat_id] = Game(chat_id, thread_id, is_test_mode=self.global_settings.is_test_mode())
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            import uuid
            db_game_id = str(uuid.uuid4())
            self.games[chat_id].db_game_id = db_game_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –ë–î
            save_game_to_db(
                game_id=db_game_id,
                chat_id=chat_id,
                thread_id=thread_id,
                status='waiting',
                settings={}
            )

        game = self.games[chat_id]

        if game.phase != GamePhase.WAITING:
            return False, "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.", None

        if game.add_player(user_id, username):
            self.player_games[user_id] = chat_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if hasattr(game, 'db_game_id') and game.db_game_id:
                import uuid
                player_id = str(uuid.uuid4())
                save_player_to_db(
                    player_id=player_id,
                    game_id=game.db_game_id,
                    user_id=user_id,
                    username=username,
                    is_alive=True
                )
            
            max_players = getattr(game, "MAX_PLAYERS", 12)
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")])
            
            # –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            keyboard.append([InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="leave_registration")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å" (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π)
            if game.phase != GamePhase.WAITING:
                keyboard.append([InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", callback_data="repeat_role_actions")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ú–∞–≥–∞–∑–∏–Ω"
            keyboard.append([InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if await self.is_user_admin(update, context):
                quick_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"
                keyboard.append([InlineKeyboardButton(quick_mode_text, callback_data="toggle_quick_mode_game")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
            if game.can_start_game():
                keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")])
            
            # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if await self.is_user_admin(update, context):
                keyboard.append([InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="cancel_game")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ç–µ–≥–∞–º–∏
            players_list = ""
            for player in game.players.values():
                player_tag = self.format_player_tag(player.username, player.user_id, make_clickable=True)
                players_list += f"‚Ä¢ {player_tag}\n"
            
            message = (
                f"‚úÖ {self.format_player_tag(username, user_id, make_clickable=True)} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {self.global_settings.get_min_players()}\n\n"
                f"üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}"
            )
            
            if game.can_start_game():
                message += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start_game`"
            else:
                message += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, self.global_settings.get_min_players() - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
            
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            self.save_game_state(chat_id)
            
            return True, message, reply_markup
        else:
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!", None

    # ---------------- basic commands ----------------
    async def welcome_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="welcome_start_game")],
            [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞", callback_data="welcome_rules")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="welcome_status")],
            [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="welcome_cancel_game")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = (
            "üå≤ <b>–õ–µ—Å –∏ –í–æ–ª–∫–∏</b> - —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è'!\n\n"
            "üê∫ <b>–•–∏—â–Ω–∏–∫–∏:</b> –í–æ–ª–∫–∏ + –õ–∏—Å–∞\n"
            "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:</b> –ó–∞–π—Ü—ã + –ö—Ä–æ—Ç + –ë–æ–±—ë—Ä\n\n"
            f"üë• –ú–∏–Ω–∏–º—É–º: {self.global_settings.get_min_players()} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"{'‚ö° –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú' if self.global_settings.is_test_mode() else ''}\n\n"
            "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b> –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join`"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')

    async def rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        rules_text = (
            "üå≤ <b>–ü–û–õ–ù–´–ï –ü–†–ê–í–ò–õ–ê –ò–ì–†–´ '–õ–µ—Å –∏ –í–æ–ª–∫–∏'</b> üå≤\n\n"
            "üé≠ <b>–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?</b>\n"
            "–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏. –î–≤–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –≤ –ª–µ—Å—É!\n\n"
            "üë• <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üê∫ <b>–•–ò–©–ù–ò–ö–ò (–º–µ–Ω—å—à–∏–Ω—Å—Ç–≤–æ):</b>\n"
            "‚Ä¢ <b>–í–æ–ª–∫–∏</b> - —Å—Ç–∞—è —Ö–∏—â–Ω–∏–∫–æ–≤, —Å—ä–µ–¥–∞—é—Ç –ø–æ –∑–≤–µ—Ä—é –∫–∞–∂–¥—É—é –Ω–æ—á—å (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –Ω–æ—á–∏)\n"
            "‚Ä¢ <b>–õ–∏—Å–∞</b> - —Ö–∏—Ç—Ä–∞—è –≤–æ—Ä–æ–≤–∫–∞, –∫—Ä–∞–¥–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã —É —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n\n"
            "üê∞ <b>–¢–†–ê–í–û–Ø–î–ù–´–ï (–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ):</b>\n"
            "‚Ä¢ <b>–ó–∞–π—Ü—ã</b> - –º–∏—Ä–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏, –Ω–µ –∏–º–µ—é—Ç –Ω–æ—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π\n"
            "‚Ä¢ <b>–ö—Ä–æ—Ç</b> - —Ä–æ–µ—Ç –Ω–æ—Ä–∫–∏, –∫–∞–∂–¥—É—é –Ω–æ—á—å –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ —É–∑–Ω–∞—Ç—å –µ–≥–æ —Ä–æ–ª—å\n"
            "‚Ä¢ <b>–ë–æ–±—ë—Ä</b> - –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º, –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n\n"
            "‚è∞ <b>–§–ê–ó–´ –ò–ì–†–´:</b>\n\n"
            "üåô <b>–ù–û–ß–¨ (60 —Å–µ–∫—É–Ω–¥):</b>\n"
            "‚Ä¢ –í–æ–ª–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∂–µ—Ä—Ç–≤—É –¥–ª—è —Å—ä–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –õ–∏—Å–∞ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –∫—Ä–∞–∂–∏ –∑–∞–ø–∞—Å–æ–≤\n"
            "‚Ä¢ –ë–æ–±—ë—Ä –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–º—É –æ—Ç –ª–∏—Å—ã\n"
            "‚Ä¢ –ö—Ä–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ó–∞–π—Ü—ã —Å–ø—è—Ç\n\n"
            "‚òÄÔ∏è <b>–î–ï–ù–¨ (5 –º–∏–Ω—É—Ç):</b>\n"
            "‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–æ—á–∏\n"
            "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            "‚Ä¢ –û–±–º–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
            "‚Ä¢ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –æ–±–≤–∏–Ω–µ–Ω–∏—è\n\n"
            "üó≥Ô∏è <b>–ì–û–õ–û–°–û–í–ê–ù–ò–ï (2 –º–∏–Ω—É—Ç—ã):</b>\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ò–≥—Ä–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –∏–∑–≥–æ–Ω—è–µ—Ç—Å—è\n"
            "‚Ä¢ –ü—Ä–∏ –Ω–∏—á—å–µ–π –Ω–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–æ–Ω—è–µ—Ç—Å—è\n\n"
            "üéØ <b>–¶–ï–õ–ò –ö–û–ú–ê–ù–î:</b>\n\n"
            "üê∫ <b>–•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏:</b>\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—â–Ω–∏–∫–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∞–≤–Ω—ã–º –∏–ª–∏ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n"
            "‚Ä¢ –í—Å–µ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã\n\n"
            "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏:</b>\n"
            "‚Ä¢ –í—Å–µ —Ö–∏—â–Ω–∏–∫–∏ –∏–∑–≥–Ω–∞–Ω—ã –∏–ª–∏ —É–±–∏—Ç—ã\n"
            "‚Ä¢ –í–æ–ª–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã\n\n"
            "üõ°Ô∏è <b>–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ú–ï–•–ê–ù–ò–ö–ò:</b>\n\n"
            "ü¶ä <b>–õ–∏—Å–∞:</b>\n"
            "‚Ä¢ –í–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã —É —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö (–∫—Ä–æ–º–µ –±–æ–±—Ä–∞)\n"
            "‚Ä¢ –ò–≥—Ä–æ–∫ —É–º–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ 2 –∫—Ä–∞–∂ –ø–æ–¥—Ä—è–¥\n"
            "‚Ä¢ –ù–µ –º–æ–∂–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å —É –≤–æ–ª–∫–æ–≤ (—Å–æ—é–∑–Ω–∏–∫–∏)\n\n"
            "ü¶¶ <b>–ë–æ–±—ë—Ä:</b>\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ª—é–±–æ–º—É, —É –∫–æ–≥–æ —É–∫—Ä–∞–ª–∏ –∑–∞–ø–∞—Å—ã\n"
            "‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n"
            "‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–º–µ—Ä—Ç–∏ –æ—Ç –∫—Ä–∞–∂–∏ –ª–∏—Å—ã\n\n"
            "ü¶´ <b>–ö—Ä–æ—Ç:</b>\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∂–¥—É—é –Ω–æ—á—å\n"
            "‚Ä¢ –£–∑–Ω–∞–µ—Ç —Ç–æ—á–Ω—É—é —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –í–∏–¥–∏—Ç, –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –Ω–æ—á—å—é\n\n"
            "üê∫ <b>–í–æ–ª–∫–∏:</b>\n"
            "‚Ä¢ –ù–µ –¥–µ–π—Å—Ç–≤—É—é—Ç –≤ –ø–µ—Ä–≤—É—é –Ω–æ—á—å\n"
            "‚Ä¢ –ù–µ –º–æ–≥—É—Ç –µ—Å—Ç—å –ª–∏—Å—É (—Å–æ—é–∑–Ω–∏–∫–∏)\n"
            "‚Ä¢ –ù–µ –º–æ–≥—É—Ç –µ—Å—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n\n"
            "‚ö° <b>–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï:</b>\n"
            "‚Ä¢ –ï—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ 3 –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ï—Å–ª–∏ –∏–≥—Ä–∞ –¥–ª–∏—Ç—Å—è –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤\n"
            "‚Ä¢ –ï—Å–ª–∏ —Å—ã–≥—Ä–∞–Ω–æ –±–æ–ª–µ–µ 25 —Ä–∞—É–Ω–¥–æ–≤\n\n"
            "üéÆ <b>–ö–ê–ö –ò–ì–†–ê–¢–¨:</b>\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ'\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (–º–∏–Ω–∏–º—É–º 6 –∏–≥—Ä–æ–∫–æ–≤)\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–æ–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
            "5. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞\n\n"
            "üí° <b>–°–û–í–ï–¢–´:</b>\n"
            "‚Ä¢ –î–æ–≤–µ—Ä—è–π—Ç–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫—Ä–æ—Ç–∞\n"
            "‚Ä¢ –ó–∞—â–∏—â–∞–π—Ç–µ –≤–∞–∂–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
            "üîß <b>–ö–û–ú–ê–ù–î–´:</b>\n"
            "‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ `/join` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
            "‚Ä¢ `/leave` - –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É\n"
            "‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n"
            "‚Ä¢ `/rules` - —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞\n"
            "‚Ä¢ `/help` - –ø–æ–º–æ—â—å\n\n"
            "üéâ <b>–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!</b>"
        )
        await update.message.reply_text(rules_text, parse_mode='HTML')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        help_text = (
            "üÜò <b>–ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ</b>\n\n"
            "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n"
            "‚Ä¢ `/join` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
            "‚Ä¢ `/start_game` - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            "‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n\n"
            "üé≠ <b>–†–æ–ª–∏:</b>\n"
            "üê∫ –í–æ–ª–∫–∏ - –µ–¥—è—Ç –ø–æ –Ω–æ—á–∞–º\n"
            "ü¶ä –õ–∏—Å–∞ - –≤–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã\n"
            "üê∞ –ó–∞–π—Ü—ã - –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏\n"
            "ü¶´ –ö—Ä–æ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            "ü¶¶ –ë–æ–±—ë—Ä - –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ª–∏—Å—ã\n\n"
            "‚è∞ <b>–§–∞–∑—ã –∏–≥—Ä—ã:</b>\n"
            "üåô –ù–æ—á—å (60 —Å–µ–∫) - –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚òÄÔ∏è –î–µ–Ω—å (5 –º–∏–Ω) - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\n"
            "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (2 –º–∏–Ω) - –∏–∑–≥–Ω–∞–Ω–∏–µ\n\n"
            "üèÜ <b>–ü–æ–±–µ–¥–∞:</b> —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n\n"
            "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b> /rules, /help, /stats, /settings"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def inventory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            from database_psycopg2 import get_user_inventory_detailed
            
            inventory_data = get_user_inventory_detailed(user_id)
            
            if not inventory_data['success']:
                await update.message.reply_text(f"‚ùå {inventory_data['error']}")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üß∫ <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {username}</b>\n\n"
            message += f"üå∞ –û—Ä–µ—à–∫–∏: {inventory_data['balance']}\n"
            message += f"üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {inventory_data['total_items']}\n\n"
            
            if inventory_data['items']:
                message += "üì¶ <b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b>\n"
                for item in inventory_data['items']:
                    item_name = item['item_name']
                    count = item['count']
                    message += f"‚Ä¢ {item_name} x{count}\n"
            else:
                message += "üì¶ <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</b>\n"
                message += "üõçÔ∏è –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã!"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞, —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
        
        user_id = update.effective_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if context.args:
            if context.args[0] == "top":
                await self.show_top_players(update, context)
            elif context.args[0] == "teams":
                await self.show_team_stats(update, context)
            elif context.args[0] == "best":
                await self.show_best_players(update, context)
            else:
                await update.message.reply_text(
                    "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n"
                    "`/stats` - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "`/stats top` - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
                    "`/stats teams` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥\n"
                    "`/stats best` - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –ø–æ —Ä–æ–ª—è–º",
                    parse_mode='HTML'
                )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            await self.show_player_stats(update, context, user_id)

    async def show_player_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        try:
            stats = get_player_detailed_stats(user_id)
            
            if not stats or stats['games_played'] == 0:
                await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∏–≥—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π /join!")
                return
            
            username = stats.get('username') or f"–ò–≥—Ä–æ–∫ {user_id}"
            win_rate = stats.get('win_rate', 0)
            
            stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {username}:</b>\n\n"
            stats_text += f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['games_played']}\n"
            stats_text += f"üèÜ –ü–æ–±–µ–¥: {stats['games_won']} ({win_rate}%)\n"
            stats_text += f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['games_lost']}\n"
            
            if stats.get('last_played'):
                last_played = stats['last_played'].strftime('%d.%m.%Y %H:%M')
                stats_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {last_played}\n"
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_top_players(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
        try:
            top_players = get_top_players(10, "games_won")
            
            if not top_players:
                await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°—ã–≥—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä!")
                return
            
            stats_text = "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º:</b>\n\n"
            for i, player in enumerate(top_players, 1):
                username = player.get('username') or f"–ò–≥—Ä–æ–∫ {player['user_id']}"
                win_rate = player.get('win_rate', 0)
                
                stats_text += f"{i}. <b>{username}</b>\n"
                stats_text += f"   üéÆ –ò–≥—Ä: {player['games_played']} | üèÜ –ü–æ–±–µ–¥: {player['games_won']} ({win_rate}%)\n\n"
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_team_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥"""
        try:
            team_stats = get_team_stats()
            
            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:</b>\n\n"
            stats_text += f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {team_stats['total_games']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥
            team_wins = team_stats.get('team_wins', {})
            predators_wins = team_wins.get('predators', 0)
            herbivores_wins = team_wins.get('herbivores', 0)
            
            stats_text += "üê∫ <b>–•–∏—â–Ω–∏–∫–∏ (–í–æ–ª–∫–∏ + –õ–∏—Å–∞):</b>\n"
            stats_text += f"   üèÜ –ü–æ–±–µ–¥: {predators_wins}\n\n"
            
            stats_text += "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ (–ó–∞–π—Ü—ã + –ö—Ä–æ—Ç + –ë–æ–±—ë—Ä):</b>\n"
            stats_text += f"   üèÜ –ü–æ–±–µ–¥: {herbivores_wins}\n\n"
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            total_wins = predators_wins + herbivores_wins
            if total_wins > 0:
                predators_percent = (predators_wins / total_wins) * 100
                herbivores_percent = (herbivores_wins / total_wins) * 100
                
                stats_text += "üìà <b>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–±–µ–¥:</b>\n"
                stats_text += f"   üê∫ –•–∏—â–Ω–∏–∫–∏: {predators_percent:.1f}%\n"
                stats_text += f"   üê∞ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: {herbivores_percent:.1f}%\n"
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_best_players(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º"""
        try:
            best_predator = get_best_predator()
            best_herbivore = get_best_herbivore()
            
            stats_text = "üåü <b>–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏:</b>\n\n"
            
            if best_predator:
                username = best_predator.get('username') or f"–ò–≥—Ä–æ–∫ {best_predator['user_id']}"
                win_rate = best_predator.get('win_rate', 0)
                stats_text += f"üê∫ <b>–õ—É—á—à–∏–π —Ö–∏—â–Ω–∏–∫:</b> {username}\n"
                stats_text += f"   üèÜ –ü–æ–±–µ–¥: {best_predator['games_won']} ({win_rate}%)\n"
                stats_text += f"   üéÆ –ò–≥—Ä: {best_predator['games_played']}\n\n"
            else:
                stats_text += "üê∫ <b>–õ—É—á—à–∏–π —Ö–∏—â–Ω–∏–∫:</b> –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            if best_herbivore:
                username = best_herbivore.get('username') or f"–ò–≥—Ä–æ–∫ {best_herbivore['user_id']}"
                win_rate = best_herbivore.get('win_rate', 0)
                stats_text += f"üê∞ <b>–õ—É—á—à–∏–π —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π:</b> {username}\n"
                stats_text += f"   üèÜ –ü–æ–±–µ–¥: {best_herbivore['games_won']} ({win_rate}%)\n"
                stats_text += f"   üéÆ –ò–≥—Ä: {best_herbivore['games_played']}\n"
            else:
                stats_text += "üê∞ <b>–õ—É—á—à–∏–π —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π:</b> –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        try:
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –±–∞–ª–∞–Ω—Å–∞
            from database_balance_manager import balance_manager
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            create_user(user_id, username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = balance_manager.get_user_balance(user_id)
            
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {balance}")
            await update.message.reply_text(
                f"üå∞ <b>–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {username}:</b>\n\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {int(balance)} –æ—Ä–µ—à–∫–æ–≤\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!",
                parse_mode='HTML'
            )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def shop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        try:
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            logger.info(f"üõçÔ∏è –ó–∞–ø—Ä–æ—Å –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
            from database_psycopg2 import get_shop_items
            shop_items = get_shop_items()
            
            if not shop_items:
                await update.message.reply_text("üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç</b>\n\n–¢–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ!", parse_mode='HTML')
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for item in shop_items:
                price = int(item['price'])
                button_text = f"{item['item_name']} - {price}üå∞"
                callback_data = f"buy_item_{item['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="show_inventory"),
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")
            ])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
            shop_text = f"üå≤ <b>–õ–µ—Å–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω</b>\n\n"
            shop_text += f"üë§ <b>{clickable_name}:</b>\n"
            shop_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            shop_text += "üõçÔ∏è <b>–ß—Ç–æ –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å?</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            for item in shop_items:
                shop_text += f"<b>{item['item_name']}</b>\n"
                shop_text += f"üìù {item['description']}\n"
                shop_text += f"üí∞ {int(item['price'])} –æ—Ä–µ—à–∫–æ–≤\n\n"
            
            await update.message.reply_text(shop_text, reply_markup=reply_markup, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='HTML')

    async def game_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ games –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        try:
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
            user = get_user_by_telegram_id(user_id)
            if not user:
                create_user(user_id, username)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ–∑–¥–∞–Ω –≤ –ë–î")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_games
            game_query = """
                INSERT INTO user_games (user_id, game_type, status) 
                VALUES (%s, %s, %s)
                RETURNING id, created_at
            """
            
            result = fetch_one(game_query, (user_id, 'forest_mafia', 'created'))
            
            if result:
                game_id = result['id']
                created_at = result['created_at']
                
                await update.message.reply_text(
                    f"üéÆ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                    f"üÜî ID –∏–≥—Ä—ã: {game_id}\n"
                    f"üë§ –ò–≥—Ä–æ–∫: {username}\n"
                    f"üéØ –¢–∏–ø –∏–≥—Ä—ã: Forest Mafia\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–≥—Ä—É!",
                    parse_mode='HTML'
                )
                
                logger.info(f"‚úÖ –ò–≥—Ä–∞ {game_id} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if f'waiting_custom_farewell_{user_id}' in context.user_data:
            del context.user_data[f'waiting_custom_farewell_{user_id}']
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    async def update_player_stats_after_game(self, game: Game, winner: Optional[Team] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
        try:
            if not self.db:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                return
            
            for player in game.players.values():
                user_id = player.user_id
                username = player.username or f"Player_{user_id}"
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                create_user(user_id, username)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = fetch_one("SELECT * FROM stats WHERE user_id = %s", (user_id,))
                
                if stats:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    new_games_played = stats['games_played'] + 1
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
                    player_won = False
                    if winner:
                        if winner == Team.HERBIVORES and player.team == Team.HERBIVORES:
                            player_won = True
                        elif winner == Team.PREDATORS and player.team == Team.PREDATORS:
                            player_won = True
                    
                    if player_won:
                        new_games_won = stats['games_won'] + 1
                        new_games_lost = stats['games_lost']
                    else:
                        new_games_won = stats['games_won']
                        new_games_lost = stats['games_lost'] + 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database_psycopg2
                    success = update_user_stats(user_id, new_games_played, new_games_won, new_games_lost)
                    if not success:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    player_won = False
                    if winner:
                        if winner == Team.HERBIVORES and player.team == Team.HERBIVORES:
                            player_won = True
                        elif winner == Team.PREDATORS and player.team == Team.PREDATORS:
                            player_won = True
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database_psycopg2
                    success = update_user_stats(user_id, 1, 1 if player_won else 0, 0 if player_won else 1)
                    if not success:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if 'new_games_played' in locals():
                    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}: –∏–≥—Ä—ã={new_games_played}, –ø–æ–±–µ–¥—ã={new_games_won if 'new_games_won' in locals() else (1 if player_won else 0)}")
                else:
                    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}: –∏–≥—Ä—ã=1, –ø–æ–±–µ–¥—ã={1 if player_won else 0}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def award_nuts_for_game(self, game: Game, winner: Optional[Team] = None):
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –æ—Ä–µ—à–∫–∏ –∏–≥—Ä–æ–∫–∞–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ"""
        nuts_info = ""
        try:
            if not self.db:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ä–µ—à–∫–∏ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
                return nuts_info
            
            logger.info(f"üéÆ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ä–µ—à–∫–æ–≤ –∑–∞ –∏–≥—Ä—É. –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}, –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
            chat_settings = get_chat_settings(game.chat_id)
            loser_rewards_enabled = chat_settings.get('loser_rewards_enabled', True)
            dead_rewards_enabled = chat_settings.get('dead_rewards_enabled', True)
            logger.info(f"üèÜ –ù–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º: {'–í–ö–õ' if loser_rewards_enabled else '–í–´–ö–õ'}")
            logger.info(f"üíÄ –ù–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º: {'–í–ö–õ' if dead_rewards_enabled else '–í–´–ö–õ'}")
            
            nuts_awards = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
            
            for player in game.players.values():
                user_id = player.user_id
                username = player.username or f"Player_{user_id}"
                
                logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞: {username} (ID: {user_id}), –ñ–∏–≤: {player.is_alive}, –ö–æ–º–∞–Ω–¥–∞: {player.team}, –†–æ–ª—å: {player.role}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                create_user(user_id, username)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–µ—à–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
                nuts_amount = 0
                
                if player.is_alive:
                    # –ñ–∏–≤–æ–π –∏–≥—Ä–æ–∫
                    if winner:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
                        player_won = False
                        if winner == Team.HERBIVORES and player.team == Team.HERBIVORES:
                            player_won = True
                        elif winner == Team.PREDATORS and player.team == Team.PREDATORS:
                            player_won = True
                        
                        if player_won:
                            nuts_amount = 100  # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 100 –æ—Ä–µ—à–∫–æ–≤
                            logger.info(f"üèÜ –ò–≥—Ä–æ–∫ {username} - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞–µ—Ç 100 –æ—Ä–µ—à–∫–æ–≤")
                        else:
                            nuts_amount = 50   # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–æ–ª—É—á–∞–µ—Ç 50 –æ—Ä–µ—à–∫–æ–≤
                            logger.info(f"üòî –ò–≥—Ä–æ–∫ {username} - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π, –ø–æ–ª—É—á–∞–µ—Ç 50 –æ—Ä–µ—à–∫–æ–≤")
                    else:
                        nuts_amount = 50  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –≤—Å–µ –∂–∏–≤—ã–µ –ø–æ–ª—É—á–∞—é—Ç 50
                        logger.info(f"ü§∑ –ò–≥—Ä–æ–∫ {username} - –∂–∏–≤–æ–π, –Ω–æ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ—Ç 50 –æ—Ä–µ—à–∫–æ–≤")
                else:
                    # –ú–µ—Ä—Ç–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 25 –æ—Ä–µ—à–∫–æ–≤ (–µ—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º –≤–∫–ª—é—á–µ–Ω—ã)
                    if dead_rewards_enabled:
                        nuts_amount = 25
                        logger.info(f"üíÄ –ò–≥—Ä–æ–∫ {username} - –º–µ—Ä—Ç–≤—ã–π, –ø–æ–ª—É—á–∞–µ—Ç 25 –æ—Ä–µ—à–∫–æ–≤")
                    else:
                        nuts_amount = 0
                        logger.info(f"üíÄ –ò–≥—Ä–æ–∫ {username} - –º–µ—Ä—Ç–≤—ã–π, –Ω–æ –Ω–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                
                # –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –æ—Ç–∫–ª—é—á–µ–Ω—ã, –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –æ—Ä–µ—à–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º
                if not loser_rewards_enabled and winner:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
                    player_lost = False
                    if winner == Team.HERBIVORES and player.team == Team.PREDATORS:
                        player_lost = True
                    elif winner == Team.PREDATORS and player.team == Team.HERBIVORES:
                        player_lost = True
                    
                    if player_lost:
                        nuts_amount = 0  # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –æ—Ä–µ—à–∫–∏
                        logger.info(f"üèÜ –ò–≥—Ä–æ–∫ {username} –ø—Ä–æ–∏–≥—Ä–∞–ª, –Ω–æ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –æ—Ä–µ—à–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –±–∞–ª–∞–Ω—Å–∞
                if nuts_amount > 0:
                    logger.info(f"üí∞ –ù–∞—á–∏—Å–ª—è–µ–º {nuts_amount} –æ—Ä–µ—à–∫–æ–≤ –∏–≥—Ä–æ–∫—É {username} (ID: {user_id})")
                    from database_balance_manager import balance_manager
                    success = balance_manager.add_to_balance(user_id, nuts_amount)
                    if success:
                        logger.info(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {nuts_amount} –æ—Ä–µ—à–∫–æ–≤ –∏–≥—Ä–æ–∫—É {username} (ID: {user_id})")
                        nuts_awards.append(f"üå∞ {username}: +{nuts_amount} –æ—Ä–µ—à–∫–æ–≤")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—Ä–µ—à–∫–∏ –∏–≥—Ä–æ–∫—É {username} (ID: {user_id})")
                else:
                    logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ {username} –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ä–µ—à–∫–∏ (amount=0)")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–µ—à–∫–∞—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if nuts_awards:
                nuts_info = f"üå∞ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∏–≥—Ä—É:</b>\n" + "\n".join(nuts_awards)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ä–µ—à–∫–æ–≤: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return nuts_info

    # ---------------- –Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã ----------------
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        if not update or not update.message:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        try:
            if self.db:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
                create_user(user_id, username)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        if context.args and context.args[0] == "role":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞
            await self.show_role_in_private(update, context)
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∏–≥—Ä—É
            await self.start_registration(update, context)

    async def start_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
        if chat_id == user_id:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            keyboard = [
                [InlineKeyboardButton("üå≤ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ–π —á–∞—Ç", url=f"https://t.me/{context.bot.username}?startgroup=true")],
                [InlineKeyboardButton("üéÆ –í–æ–π—Ç–∏ –≤ —á–∞—Ç", callback_data="join_chat")],
                [InlineKeyboardButton("üåç –Ø–∑—ã–∫ / Language", callback_data="language_settings")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile_pm")],
                [InlineKeyboardButton("üé≠ –†–æ–ª–∏", callback_data="show_roles_pm")],
                [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ (–†–æ–ª—å)", url=f"https://t.me/{context.bot.username}?start=role")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = (
                "üå≤ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
                "–Ø –±–æ—Ç-–≤–µ–¥—É—â–∏–π –¥–ª—è –∏–≥—Ä—ã –≤ üå≤ <b>–õ–µ—Å –∏ –í–æ–ª–∫–∏</b>.\n\n"
                "üé≠ <b>–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏</b>\n\n"
                "üê∫ <b>–•–∏—â–Ω–∏–∫–∏:</b> –í–æ–ª–∫–∏ + –õ–∏—Å–∞\n"
                "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:</b> –ó–∞–π—Ü—ã + –ö—Ä–æ—Ç + –ë–æ–±—ë—Ä\n\n"
                "üåô <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
                "‚Ä¢ –ù–æ—á—å—é —Ö–∏—â–Ω–∏–∫–∏ –æ—Ö–æ—Ç—è—Ç—Å—è, —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –∑–∞—â–∏—â–∞—é—Ç—Å—è\n"
                "‚Ä¢ –î–Ω–µ–º –≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç –∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ\n"
                "‚Ä¢ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤\n\n"
                "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            )
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if chat_id not in self.games:
            self.games[chat_id] = Game(chat_id=chat_id, thread_id=update.effective_message.message_thread_id, is_test_mode=self.global_settings.is_test_mode())
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])

        game = self.games[chat_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="welcome_start_game")],
            [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="welcome_rules")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data="welcome_status")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if await self.is_user_admin(update, context):
            quick_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"
            keyboard.append([InlineKeyboardButton(quick_mode_text, callback_data="toggle_quick_mode_game")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤
        if game.can_start_game():
            keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if await self.is_user_admin(update, context):
            keyboard.append([InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="cancel_game")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –∏–≥—Ä–æ–∫–æ–≤
        chat_settings = get_chat_settings(chat_id)
        min_players = chat_settings.get('min_players', 6)
        current_players = len(game.players)
        
        registration_text = (
            "üå≤ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä—É '–õ–µ—Å –∏ –í–æ–ª–∫–∏'</b> üå≤\n\n"
            "üé≠ <b>–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏</b>\n\n"
            "üê∫ <b>–•–∏—â–Ω–∏–∫–∏:</b> –í–æ–ª–∫–∏ + –õ–∏—Å–∞\n"
            "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:</b> –ó–∞–π—Ü—ã + –ö—Ä–æ—Ç + –ë–æ–±—ë—Ä\n\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {current_players}\n"
            f"üìã <b>–ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞:</b> {min_players}\n"
            f"{'‚ö° <b>–ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú</b>' if chat_settings.get('test_mode', False) else ''}\n\n"
            "üéØ <b>–¶–µ–ª—å:</b> –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!\n\n"
            "üöÄ <b>–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ' –¥–ª—è —É—á–∞—Å—Ç–∏—è!</b>"
        )

        await update.message.reply_text(
            registration_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def is_user_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if hasattr(update, 'effective_chat') and update.effective_chat:
                chat_id = update.effective_chat.id
            elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
                chat_id = update.callback_query.message.chat.id
            else:
                return False
                
            user_id = update.effective_user.id
            
            # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
            if chat_id == user_id:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
            member = await context.bot.get_chat_member(chat_id, user_id)
            return member.status in ['creator', 'administrator']
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return False

    async def show_role_in_private(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ –¥–ª—è —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user_id = update.effective_user.id
        
        if user_id not in self.player_games:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return
        
        chat_id = self.player_games[user_id]
        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        game = self.games[chat_id]
        if game.phase == GamePhase.WAITING:
            await update.message.reply_text("‚è≥ –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
            return
        
        player = game.players.get(user_id)
        if not player:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–≥—Ä–µ!")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
        role_info = self.get_role_info(player.role)
        team_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if player.team.name == "PREDATORS" else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
        
        role_message = (
            f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ '–õ–µ—Å –∏ –í–æ–ª–∫–∏':\n\n"
            f"üë§ {role_info['name']}\n"
            f"üè¥ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{role_info['description']}"
        )
        
        await update.message.reply_text(role_message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ –¥–ª—è —Ä–æ–ª–∏
        role_emojis = {
            Role.WOLF: "üê∫",
            Role.FOX: "ü¶ä", 
            Role.HARE: "üê∞",
            Role.MOLE: "ü¶´",
            Role.BEAVER: "ü¶¶"
        }
        
        role_names_russian = {
            Role.WOLF: "–í–æ–ª–∫",
            Role.FOX: "–õ–∏—Å–∞", 
            Role.HARE: "–ó–∞—è—Ü",
            Role.MOLE: "–ö—Ä–æ—Ç",
            Role.BEAVER: "–ë–æ–±—ë—Ä"
        }
        
        team_names = {
            Team.PREDATORS: "–•–∏—â–Ω–∏–∫–∏",
            Team.HERBIVORES: "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
        }
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
        role_game_tips = {
            Role.WOLF: {
                "title": "üê∫ –°–æ–≤–µ—Ç—ã –¥–ª—è –í–æ–ª–∫–∞",
                "description": "–í—ã - –ª–∏–¥–µ—Ä —Ö–∏—â–Ω–∏–∫–æ–≤! –í–∞—à–∞ —Ü–µ–ª—å - —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö.",
                "tips": [
                    "üéØ <b>–í—ã–±–æ—Ä –∂–µ—Ä—Ç–≤—ã:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫—Ä–æ—Ç–æ–º –∏–ª–∏ –±–æ–±—Ä–æ–º",
                    "ü§ù <b>–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ:</b> –ù–∞–π–¥–∏—Ç–µ –ª–∏—Å—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è",
                    "üé≠ <b>–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞:</b> –ù–µ –ø—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –∫ —Å–µ–±–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö",
                    "üìä <b>–ê–Ω–∞–ª–∏–∑:</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è–º–∏ - –∫—Ç–æ –≥–æ–ª–æ—Å—É–µ—Ç –ø—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ",
                    "‚è∞ <b>–¢–∞–π–º–∏–Ω–≥:</b> –ù–µ —É–±–∏–≤–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–∞—Ç—å —Å–µ–±—è"
                ],
                "night_action": "üåô <b>–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ –∂–µ—Ä—Ç–≤—É –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞",
                "win_condition": "üèÜ <b>–¶–µ–ª—å:</b> –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö"
            },
            Role.FOX: {
                "title": "ü¶ä –°–æ–≤–µ—Ç—ã –¥–ª—è –õ–∏—Å—ã",
                "description": "–í—ã - –≤–æ—Ä! –ö—Ä–∞–¥–∏—Ç–µ –æ—Ä–µ—à–∫–∏ —É —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2 —Ä–∞–∑.",
                "tips": [
                    "üí∞ <b>–í—ã–±–æ—Ä —Ü–µ–ª–∏:</b> –í–æ—Ä—É–π—Ç–µ —É –∏–≥—Ä–æ–∫–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ä–µ—à–∫–æ–≤",
                    "üé≠ <b>–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å:</b> –ù–µ –≤–æ—Ä—É–π—Ç–µ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–≤–∞–∂–¥—ã –ø–æ–¥—Ä—è–¥",
                    "ü§ù <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è:</b> –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –≤–æ–ª–∫–∞–º–∏, –Ω–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ—Å—å",
                    "üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> –í–æ—Ä—É–π—Ç–µ —É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
                    "‚ö†Ô∏è <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å:</b> –ü–æ—Å–ª–µ 2 –∫—Ä–∞–∂ –≤—ã —É–º—Ä–µ—Ç–µ!"
                ],
                "night_action": "üåô <b>–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫—Ä–∞–∂–∏ –æ—Ä–µ—à–∫–æ–≤",
                "win_condition": "üèÜ <b>–¶–µ–ª—å:</b> –ü–æ–º–æ—á—å —Ö–∏—â–Ω–∏–∫–∞–º –ø–æ–±–µ–¥–∏—Ç—å"
            },
            Role.HARE: {
                "title": "üê∞ –°–æ–≤–µ—Ç—ã –¥–ª—è –ó–∞–π—Ü–∞",
                "description": "–í—ã - –æ–±—ã—á–Ω—ã–π –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å. –í—ã–∂–∏–≤–∞–π—Ç–µ –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–π—Ç–∏ —Ö–∏—â–Ω–∏–∫–æ–≤.",
                "tips": [
                    "üëÇ <b>–ù–∞–±–ª—é–¥–µ–Ω–∏–µ:</b> –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
                    "üó£Ô∏è <b>–û–±—â–µ–Ω–∏–µ:</b> –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                    "üìä <b>–ê–Ω–∞–ª–∏–∑:</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è–º–∏ –∏ –≤—ã—è–≤–ª—è–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö",
                    "ü§ù <b>–ö–æ–º–∞–Ω–¥–∞:</b> –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –∫—Ä–æ—Ç–æ–º –∏ –±–æ–±—Ä–æ–º",
                    "üé≠ <b>–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞:</b> –ù–µ –ø—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –∫ —Å–µ–±–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ö–∏—â–Ω–∏–∫–æ–≤"
                ],
                "night_action": "üåô <b>–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> –û—Ç–¥—ã—Ö–∞–π—Ç–µ –∏ –∂–¥–∏—Ç–µ —É—Ç—Ä–∞",
                "win_condition": "üèÜ <b>–¶–µ–ª—å:</b> –ù–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤"
            },
            Role.MOLE: {
                "title": "ü¶´ –°–æ–≤–µ—Ç—ã –¥–ª—è –ö—Ä–æ—Ç–∞",
                "description": "–í—ã - –¥–µ—Ç–µ–∫—Ç–∏–≤! –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å.",
                "tips": [
                    "üîç <b>–í—ã–±–æ—Ä —Ü–µ–ª–∏:</b> –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
                    "üìù <b>–ó–∞–ø–∏—Å—å:</b> –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫",
                    "ü§ù <b>–ö–æ–º–∞–Ω–¥–∞:</b> –î–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º–∏",
                    "üé≠ <b>–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å:</b> –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏",
                    "üìä <b>–ê–Ω–∞–ª–∏–∑:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"
                ],
                "night_action": "üåô <b>–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏",
                "win_condition": "üèÜ <b>–¶–µ–ª—å:</b> –ü–æ–º–æ—á—å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º –Ω–∞–π—Ç–∏ —Ö–∏—â–Ω–∏–∫–æ–≤"
            },
            Role.BEAVER: {
                "title": "ü¶¶ –°–æ–≤–µ—Ç—ã –¥–ª—è –ë–æ–±—Ä–∞",
                "description": "–í—ã - –∑–∞—â–∏—Ç–Ω–∏–∫! –ó–∞—â–∏—â–∞–π—Ç–µ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –æ—Ç –ª–∏—Å—ã, –≤–æ–∑–≤—Ä–∞—â–∞—è —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –æ—Ä–µ—à–∫–∏.",
                "tips": [
                    "üõ°Ô∏è <b>–ó–∞—â–∏—Ç–∞:</b> –ó–∞—â–∏—â–∞–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∫—Ä–∞–ª–∏ –æ—Ä–µ—à–∫–∏",
                    "üí∞ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –æ—Ä–µ—à–∫–∏",
                    "ü§ù <b>–ö–æ–º–∞–Ω–¥–∞:</b> –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –∫—Ä–æ—Ç–æ–º –∏ –∑–∞–π—Ü–∞–º–∏",
                    "üìä <b>–ê–Ω–∞–ª–∏–∑:</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º, —É –∫–æ–≥–æ —É–∫—Ä–∞–ª–∏ –æ—Ä–µ—à–∫–∏",
                    "üé≠ <b>–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å:</b> –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å"
                ],
                "night_action": "üåô <b>–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã",
                "win_condition": "üèÜ <b>–¶–µ–ª—å:</b> –ü–æ–º–æ—á—å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç—å"
            }
        }
        
        tips = role_game_tips[player.role]
        
        message = f"{tips['title']}\n\n"
        message += f"üè∑Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞:</b> {team_names[player.team]}\n"
        message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tips['description']}\n\n"
        
        message += "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ:</b>\n"
        for tip in tips['tips']:
            message += f"{tip}\n"
        
        message += f"\n{tips['night_action']}\n"
        message += f"{tips['win_condition']}\n\n"
        
        message += f"üéÆ <b>–¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥:</b> {game.current_round}\n"
        message += f"üåô <b>–í—ã–∂–∏–ª–∏ –Ω–æ—á–µ–π:</b> {player.consecutive_nights_survived}\n\n"
        
        message += "üéØ <b>–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
        message += "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞\n"
        message += "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        message += "‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏\n"
        message += "‚Ä¢ –†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ —Å —Å–æ—é–∑–Ω–∏–∫–∞–º–∏"
        
        await update.message.reply_text(message, parse_mode='HTML')

    def get_role_name_russian(self, role: Role) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        from role_translator import get_role_name_russian
        return get_role_name_russian(role)

    def _get_role_tip(self, role: Role) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏"""
        tips = {
            Role.WOLF: "–°–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å! –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ö–∏—â–Ω–∏–∫–∞–º–∏.",
            Role.FOX: "–í–æ—Ä—É–π—Ç–µ —É —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.",
            Role.HARE: "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ –æ–±—â–µ–Ω–∏–∏, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            Role.MOLE: "–î–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –∫–æ–º–∞–Ω–¥–æ–π, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ.",
            Role.BEAVER: "–ó–∞—â–∏—â–∞–π—Ç–µ —Ç–µ—Ö, —É –∫–æ–≥–æ —É–∫—Ä–∞–ª–∏ –∑–∞–ø–∞—Å—ã. –í—ã –∫–ª—é—á –∫ –ø–æ–±–µ–¥–µ!"
        }
        return tips.get(role, "–ò–≥—Ä–∞–π—Ç–µ –ø–æ —Ä–æ–ª–∏ –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–µ!")

    # ---------------- permission checking functions ----------------
    async def check_user_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   required_permission: str = "member") -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (has_permission, error_message)
        """
        user_id = None
        chat_id = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if update.effective_user:
                user_id = update.effective_user.id
            elif update.callback_query and update.callback_query.from_user:
                user_id = update.callback_query.from_user.id
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if update.effective_chat:
                chat_id = update.effective_chat.id
            elif update.callback_query and update.callback_query.message:
                chat_id = update.callback_query.message.chat_id
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç!"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —á–∞—Ç–µ
            member = await context.bot.get_chat_member(chat_id, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if required_permission == "admin":
                if member.status not in ['administrator', 'creator']:
                    return False, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞!"
            elif required_permission == "member":
                if member.status in ['kicked', 'left']:
                    return False, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!"
                elif member.status == 'restricted':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                    if not getattr(member, 'can_send_messages', True):
                        return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
            
            return True, ""
            
        except Exception as e:
            user_info = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}" if user_id else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            chat_info = f"—á–∞—Ç–µ {chat_id}" if chat_id else "—á–∞—Ç–µ"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ {user_info} –≤ {chat_info}: {e}")
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ!"

    async def check_game_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   action: str = "join") -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (has_permission, error_message)
        """
        user_id = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if update.effective_user:
                user_id = update.effective_user.id
            elif update.callback_query and update.callback_query.from_user:
                user_id = update.callback_query.from_user.id
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if update.effective_chat:
                chat_id = update.effective_chat.id
            elif update.callback_query and update.callback_query.message:
                chat_id = update.callback_query.message.chat_id
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
            has_permission, error_msg = await self.check_user_permissions(update, context, "member")
            if not has_permission:
                return False, error_msg
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if action == "start_game":
                # –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É
                pass
            elif action == "end_game":
                # –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É
                if user_id not in self.player_games or self.player_games[user_id] != chat_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                    has_admin_permission, admin_error = await self.check_user_permissions(update, context, "admin")
                    if not has_admin_permission:
                        return False, "‚ùå –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!"
            elif action == "settings":
                # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                return await self.check_user_permissions(update, context, "admin")
            
            return True, ""
            
        except Exception as e:
            user_info = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}" if user_id else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤ {user_info}: {e}")
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!"

    async def send_permission_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  error_message: str, original_message: str = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –Ω–µ –∏–∑–º–µ–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            if update.callback_query:
                # –î–ª—è callback query –æ—Ç–≤–µ—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await update.callback_query.answer(error_message, show_alert=True)
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(error_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤: {e}")


    async def leave_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if user_id not in self.player_games:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ!")
            return
        
        if self.player_games[user_id] != chat_id:
            await update.message.reply_text("‚ùå –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!")
            return
        
        game = self.games[chat_id]
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
            return
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        if game.remove_player(user_id):
            del self.player_games[user_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            await self._update_join_message(chat_id, context)
            
            await update.message.reply_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≥—Ä—É!")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

    async def cancel_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.is_user_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É!")
            return
        
        chat_id = update.effective_chat.id
        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return
        
        game = self.games[chat_id]
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∏–≥—Ä—É
        game.phase = GamePhase.GAME_OVER
        del self.games[chat_id]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        for user_id in list(self.player_games.keys()):
            if self.player_games[user_id] == chat_id:
                del self.player_games[user_id]
        
        await update.message.reply_text("üõë –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

    async def _update_join_message(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ"""
        try:
            if chat_id in self.games:
                game = self.games[chat_id]
                if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.edit_message_text(
                        self._get_join_message_text(game),
                        chat_id=chat_id,
                        message_id=game.pinned_message_id,
                        reply_markup=self._get_join_keyboard(game, context),
                        parse_mode='HTML'
                    )
        except Exception as e:
            logger.error(f"Error updating join message: {e}")

    def _get_join_message_text(self, game) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
        max_players = getattr(game, "MAX_PLAYERS", 12)
        players_list = ""
        for player in game.players.values():
            player_tag = self.format_player_tag(player.username, player.user_id, make_clickable=True)
            players_list += f"‚Ä¢ {player_tag}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –∏–≥—Ä–æ–∫–æ–≤
        chat_settings = get_chat_settings(game.chat_id)
        min_players = chat_settings.get('min_players', 6)
        
        message = (
            "üå≤ <b>–õ–µ—Å –∏ –í–æ–ª–∫–∏ - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> üå≤\n\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}\n"
            f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {min_players}\n\n"
            f"üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}"
        )
        
        if game.can_start_game():
            message += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
        else:
            message += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, min_players - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
        
        return message

    def _get_join_keyboard(self, game, context) -> InlineKeyboardMarkup:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å" (–µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç)
        if game.phase != GamePhase.WAITING:
            keyboard.append([InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", callback_data="repeat_role_actions")])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
        if game.phase == GamePhase.WAITING:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–∑—ã –æ–∂–∏–¥–∞–Ω–∏—è
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")])
            keyboard.append([InlineKeyboardButton("‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É", callback_data="leave_registration")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ú–∞–≥–∞–∑–∏–Ω"
            keyboard.append([InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å–µ—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±—É–¥–µ—Ç –≤ callback
            quick_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"
            keyboard.append([InlineKeyboardButton(quick_mode_text, callback_data="toggle_quick_mode_game")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
            if game.can_start_game():
                keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")])
        else:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
            keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")])
        
        return InlineKeyboardMarkup(keyboard)

    # ---------------- callback helpers ----------------
    async def join_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not query.message:
            logger.error("CallbackQuery message is None")
            return
            
        chat_id = query.message.chat.id
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.full_name or str(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            if self.db:
                create_user(user_id, username)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –ø—Ä–∏ join_from_callback")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

        success, message, reply_markup = await self._join_game_common(chat_id, user_id, username, context, is_callback=True, update=query)
        
        if success:
            try:
                game = self.games[chat_id]
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=game.pinned_message_id,
                            text=message,
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {game.pinned_message_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        join_message = await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                        await context.bot.unpin_chat_message(chat_id, game.pinned_message_id)
                        await context.bot.pin_chat_message(chat_id, join_message.message_id)
                        game.pinned_message_id = join_message.message_id
                        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {join_message.message_id}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    join_message = await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                    await context.bot.pin_chat_message(chat_id, join_message.message_id)
                    game.pinned_message_id = join_message.message_id
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {join_message.message_id}")
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await query.answer("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
                logger.info("‚úÖ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ callback")
                
            except Exception:
                logger.error("Error in join_from_callback")
                await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ!")
        else:
            await query.answer(message)

    async def status_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        chat_id = query.message.chat.id

        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
            return

        game = self.games[chat_id]

        if game.phase == GamePhase.WAITING:
            min_players = self.global_settings.get_min_players()
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/12\n"
                f"üìã –ú–∏–Ω–∏–º—É–º: {min_players}\n\n"
                "<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
            )
            for player in game.players.values():
                player_tag = self.format_player_tag(player.username, player.user_id, make_clickable=True)
                status_text += f"‚Ä¢ {player_tag}\n"
            if game.can_start_game():
                status_text += "\n‚úÖ <b>–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!</b>"
            else:
                status_text += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, min_players - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
        else:
            phase_names = {
                GamePhase.NIGHT: "üåô –ù–æ—á—å",
                GamePhase.DAY: "‚òÄÔ∏è –î–µ–Ω—å",
                GamePhase.VOTING: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                GamePhase.GAME_OVER: "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            }
            status_text = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {phase_names.get(game.phase, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö: {len(game.get_alive_players())}\n\n"
                "<b>–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n"
            )
            for p in game.get_alive_players():
                player_tag = self.format_player_tag(p.username, p.user_id, make_clickable=True)
                status_text += f"‚Ä¢ {player_tag}\n"

        await query.edit_message_text(status_text)


    # ---------------- join / leave / status ----------------
    async def join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
        
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.full_name or str(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            if self.db:
                create_user(user_id, username)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –ø—Ä–∏ join")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

        success, message, reply_markup = await self._join_game_common(
            chat_id, user_id, username, context, is_callback=False, update=update
        )
        
        if success:
            try:
                game = self.games[chat_id]
                
                join_message = None  # —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=game.pinned_message_id,
                            text=message,
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {game.pinned_message_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        join_message = await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                        await context.bot.unpin_chat_message(chat_id, game.pinned_message_id)

                if join_message is None:
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ ‚Äî –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.pin_chat_message(chat_id, game.pinned_message_id)
                else:
                    # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–æ–≤–æ–µ ‚Äî –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
                    await context.bot.pin_chat_message(chat_id, join_message.message_id)
                    game.pinned_message_id = join_message.message_id
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {join_message.message_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
                
            except Exception as e:
                logger.error(f"Error in join: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ!")
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')

    async def leave(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.full_name or str(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return

        game = self.games[chat_id]

        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ–π—á–∞—Å.")
            return

        if user_id not in game.players:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return

        if game.leave_game(user_id):
            if user_id in self.player_games:
                del self.player_games[user_id]
            
            player_tag = self.format_player_tag(username, user_id, make_clickable=True)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ç–µ–≥–∞–º–∏
            players_list = ""
            for player in game.players.values():
                tag = self.format_player_tag(player.username, player.user_id, make_clickable=True)
                players_list += f"‚Ä¢ {tag}\n"
            
            message = (
                f"üëã {player_tag} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{getattr(game, 'MAX_PLAYERS', 12)}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞: {self.global_settings.get_min_players()}\n\n"
                f"üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}" if players_list else "üìù –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç\n"
            )
            
            if not game.can_start_game() and len(game.players) > 0:
                message += f"\n‚ö†Ô∏è –ù—É–∂–Ω–æ –µ—â—ë {max(0, self.global_settings.get_min_players() - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
            elif game.can_start_game():
                message += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
                
            await update.message.reply_text(message, parse_mode='HTML')
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É.")

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == update.effective_user.id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
            return

        game = self.games[chat_id]

        if game.phase == GamePhase.WAITING:
            min_players = self.global_settings.get_min_players()
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/12\n"
                f"üìã –ú–∏–Ω–∏–º—É–º: {min_players}\n\n"
                "<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
            )
            for player in game.players.values():
                player_tag = self.format_player_tag(player.username, player.user_id, make_clickable=True)
                status_text += f"‚Ä¢ {player_tag}\n"
            if game.can_start_game():
                status_text += "\n‚úÖ <b>–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!</b>"
            else:
                status_text += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, min_players - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
        else:
            phase_names = {
                GamePhase.NIGHT: "üåô –ù–æ—á—å",
                GamePhase.DAY: "‚òÄÔ∏è –î–µ–Ω—å",
                GamePhase.VOTING: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                GamePhase.GAME_OVER: "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            }
            status_text = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {phase_names.get(game.phase, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö: {len(game.get_alive_players())}\n\n"
                "<b>–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n"
            )
            for p in game.get_alive_players():
                player_tag = self.format_player_tag(p.username, p.user_id, make_clickable=True)
                status_text += f"‚Ä¢ {player_tag}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø" –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è
        if game.phase != GamePhase.WAITING:
            keyboard.append([InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø", callback_data="repeat_current_phase")])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        await update.message.reply_text(status_text, reply_markup=reply_markup)

    # ---------------- starting / ending game ----------------
    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_game_permissions(update, context, "start_game")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        thread_id = self.get_thread_id(update)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            if self.db:
                create_user(user_id, username)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –ø—Ä–∏ start_game")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Ç–µ–ø–µ—Ä—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        game = self.games[chat_id]

        min_players = self.global_settings.get_min_players()
        if not game.can_start_game():
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players} –∏–≥—Ä–æ–∫–æ–≤.")
            return

        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import uuid
        db_game_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –ë–î
        save_game_to_db(
            game_id=db_game_id,
            chat_id=chat_id,
            thread_id=thread_id,
            status='waiting',
            settings={
            "min_players": min_players,
            "max_players": self.global_settings.get("max_players", 12),
            "night_duration": self.global_settings.get("night_duration", 60),
            "day_duration": self.global_settings.get("day_duration", 300),
            "voting_duration": self.global_settings.get("voting_duration", 120)
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–≥—Ä—ã –≤ –ë–î –≤ –æ–±—ä–µ–∫—Ç–µ –∏–≥—Ä—ã
        game.db_game_id = db_game_id

        if game.start_game():
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –≤ –ë–î
            update_game_phase(db_game_id, 'night', 1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ë–î
            for player in game.players.values():
                player_id = str(uuid.uuid4())
                save_player_to_db(
                    player_id=player_id,
                    game_id=db_game_id,
                    user_id=player.user_id,
                    username=player.username,
                    first_name=player.first_name,
                    last_name=player.last_name,
                    role=player.role.value if player.role else None,
                    team=player.team.value if player.team else None,
                    is_alive=True
                )
            
            # –¢–µ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã
            await self.tag_game_participants(update, context, game)
            
            await self.start_night_phase(context, game)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")

    async def end_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_game_permissions(update, context, "end_game")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        game = self.games[chat_id]

        if game.phase == GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start_game` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
        if user_id not in self.player_games or self.player_games[user_id] != chat_id:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –º–æ–≥—É—Ç –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å!")
            return

        await self._end_game_internal(update, context, game, "–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")

    async def force_end(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        game = self.games[chat_id]
        await self._end_game_internal(update, context, game, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")

    async def clear_all_games(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        user_id = update.effective_user.id

        games_count = len(self.games)
        players_count = len(self.player_games)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏
        self.games.clear()
        self.player_games.clear()
        self.night_actions.clear()
        self.night_interfaces.clear()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if hasattr(self, 'auto_save_manager') and self.auto_save_manager:
            try:
                from state_persistence import state_persistence
                state_persistence.clear_all_state()
                logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

        await update.message.reply_text(
            "üßπ –í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã!\n\n"
            f"üìä –ë—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: {games_count}\n"
            f"üë• –ë—ã–ª–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {players_count}\n"
            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–∫–∂–µ –æ—á–∏—â–µ–Ω–æ"
        )
    
    async def save_state_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.force_save_state()
            
            await update.message.reply_text(
                "üíæ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
                f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(self.games)}\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–∞—Ö: {len(self.player_games)}\n"
                f"üîó –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.authorized_chats)}\n\n"
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {str(e)}"
            )
    
    async def auto_save_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        try:
            if hasattr(self, 'auto_save_manager') and self.auto_save_manager:
                status = self.auto_save_manager.get_save_status()
                
                status_text = (
                    "üíæ <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
                    f"üîÑ –†–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ –î–∞' if status['is_running'] else '‚ùå –ù–µ—Ç'}\n"
                    f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['save_interval']} —Å–µ–∫—É–Ω–¥\n"
                    f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {status['last_save_time']}\n"
                    f"‚è∞ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {status['time_since_last_save']:.1f} —Å–µ–∫—É–Ω–¥\n\n"
                    f"üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
                    f"üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(self.games)}\n"
                    f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–∞—Ö: {len(self.player_games)}\n"
                    f"üîó –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.authorized_chats)}"
                )
                
                await update.message.reply_text(status_text, parse_mode='HTML')
            else:
                await update.message.reply_text(
                    "‚ùå <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
                    "–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {str(e)}"
            )

    async def setup_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞/—Ç–µ–º—ã –¥–ª—è –∏–≥—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        thread_id = self.get_thread_id(update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–º."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user_id)
            if chat_member.status not in ['creator', 'administrator']:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∏–≥—Ä—ã!"
                )
                return
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        try:
            chat_info = await context.bot.get_chat(chat_id)
            chat_name = chat_info.title or f"–ß–∞—Ç {chat_id}"
            chat_type = chat_info.type
        except Exception:
            chat_name = f"–ß–∞—Ç {chat_id}"
            chat_type = "unknown"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç –∏–ª–∏ —Ç–µ–º–∞)
        if thread_id:
            location_name = f"—Ç–µ–º–∞ {thread_id} –≤ —á–∞—Ç–µ '{chat_name}'"
            location_short = f"–¢–µ–º–∞ {thread_id}"
        else:
            location_name = f"—á–∞—Ç '{chat_name}'"
            location_short = f"–ß–∞—Ç '{chat_name}'"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        if chat_id in self.games:
            game = self.games[chat_id]
            if game.phase != GamePhase.WAITING:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í –∫–∞–Ω–∞–ª–µ '{chat_name}' —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞!\n"
                    f"–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {game.phase.value}\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(game.players)}\n\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /force_end –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
                )
                return
            else:
                # –ï—Å—Ç—å –∏–≥—Ä–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã/—Ç–µ–º—ã –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                if not self.is_chat_authorized(chat_id, thread_id):
                    self.authorize_chat(chat_id, thread_id)
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                await update.message.reply_text(
                    f"‚úÖ {location_short} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏–≥—Ä—ã!\n\n"
                    "üìä –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(game.players)}/{getattr(game, 'MAX_PLAYERS', 12)}\n"
                    f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {self.global_settings.get_min_players()}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join` –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ."
                )
                return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª/—Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç/—Ç–µ–º—É –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
            self.authorize_chat(chat_id, thread_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            self.games[chat_id] = Game(chat_id, thread_id, is_test_mode=self.global_settings.is_test_mode())
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="welcome_start_game")],
                [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="welcome_rules")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data="welcome_status")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if await self.is_user_admin(update, context):
                quick_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"
                keyboard.append([InlineKeyboardButton(quick_mode_text, callback_data="toggle_quick_mode_game")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            setup_message = (
                f"‚úÖ {location_short} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏–≥—Ä—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏'!\n\n"
                f"üéÆ –¢–∏–ø —á–∞—Ç–∞: {chat_type}\n"
                f"üìç –û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è: {location_name}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {self.global_settings.get_min_players()}\n"
                f"üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {getattr(self.games[chat_id], 'MAX_PLAYERS', 12)}\n"
                f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–í–∫–ª—é—á–µ–Ω' if self.global_settings.is_test_mode() else '–û—Ç–∫–ª—é—á–µ–Ω'}\n\n"
                "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏–≥—Ä–µ! –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                "‚Ä¢ `/join` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
                "‚Ä¢ `/status` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "‚Ä¢ `/rules` - –∏–∑—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n\n"
                "üéØ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                "‚Ä¢ `/start_game` - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                "‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã\n"
                "‚Ä¢ `/end_game` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n\n"
                f"‚ÑπÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ {location_name}\n\n"
                "–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üå≤"
            )
            
            await update.message.reply_text(setup_message, reply_markup=reply_markup)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            logger.info(f"Channel {chat_id} ({chat_name}) successfully set up for Forest Mafia by user {user_id}")
            
        except Exception as e:
            logger.error(f"Error setting up channel {chat_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
            )

    async def remove_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞/—Ç–µ–º—ã –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        thread_id = self.get_thread_id(update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user_id)
            if chat_member.status not in ['creator', 'administrator']:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –∏–≥—Ä—ã!"
                )
                return
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        try:
            chat_info = await context.bot.get_chat(chat_id)
            chat_name = chat_info.title or f"–ß–∞—Ç {chat_id}"
        except Exception:
            chat_name = f"–ß–∞—Ç {chat_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç –∏–ª–∏ —Ç–µ–º–∞)
        if thread_id:
            location_name = f"—Ç–µ–º–∞ {thread_id} –≤ —á–∞—Ç–µ '{chat_name}'"
            location_short = f"–¢–µ–º–∞ {thread_id}"
        else:
            location_name = f"—á–∞—Ç '{chat_name}'"
            location_short = f"–ß–∞—Ç '{chat_name}'"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        if chat_id in self.games:
            game = self.games[chat_id]
            if game.phase != GamePhase.WAITING:
                await update.message.reply_text(
                    f"‚ùå –í –∫–∞–Ω–∞–ª–µ '{chat_name}' –∏–¥—ë—Ç –∏–≥—Ä–∞!\n"
                    "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."
                )
                return
            else:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for pid in list(game.players.keys()):
                    if pid in self.player_games:
                        del self.player_games[pid]
                del self.games[chat_id]
                if chat_id in self.night_actions:
                    del self.night_actions[chat_id]
                if chat_id in self.night_interfaces:
                    del self.night_interfaces[chat_id]
        
        # –£–¥–∞–ª—è–µ–º —á–∞—Ç/—Ç–µ–º—É –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
        if self.is_chat_authorized(chat_id, thread_id):
            self.authorized_chats.discard((chat_id, thread_id))
            await update.message.reply_text(
                f"‚úÖ {location_short} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã!\n\n"
                f"üö´ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤ {location_name}.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_channel –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            if thread_id:
                logger.info(f"Thread {thread_id} in channel {chat_id} ({chat_name}) removed from authorized chats by user {user_id}")
            else:
                logger.info(f"Channel {chat_id} ({chat_name}) removed from authorized chats by user {user_id}")
        else:
            await update.message.reply_text(
                f"‚ùå {location_short} –Ω–µ –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏–≥—Ä—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_channel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )

    async def _end_game_internal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game, reason: str):
        if getattr(game, "game_over_sent", False):
            return
        game.game_over_sent = True

        game.phase = GamePhase.GAME_OVER

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        await self._unpin_all_bot_messages(context, game)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        try:
            from game_end_logic import GameEndLogic
            game_end_logic = GameEndLogic(game)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            alive_players = game.get_alive_players()
            predators = [p for p in alive_players if p.team == Team.PREDATORS]
            herbivores = [p for p in alive_players if p.team == Team.HERBIVORES]
            
            if len(predators) > len(herbivores):
                winner = Team.PREDATORS
            elif len(herbivores) > len(predators):
                winner = Team.HERBIVORES
            else:
                winner = Team.HERBIVORES  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ
            
            result = {
                "winner": winner,
                "reason": "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
                "details": f"üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            }
            
            message_text = game_end_logic.get_game_over_message(result)
            
        except ImportError:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            message_text = f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}\n–§–∞–∑–∞: {game.phase.value}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=message_text,
                message_thread_id=game.thread_id,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
            # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.send_message(
                    chat_id=game.chat_id,
                    text=message_text.replace('*', '').replace('_', ''),
                    message_thread_id=game.thread_id
                )
            except Exception as e2:
                    logger.error(f"Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

        # –æ—á–∏—â–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
        for pid in list(game.players.keys()):
            if pid in self.player_games:
                del self.player_games[pid]

        chat_id = game.chat_id
        if chat_id in self.games:
            del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        players_to_remove = []
        for user_id, game_chat_id in self.player_games.items():
            if game_chat_id == chat_id:
                players_to_remove.append(user_id)
        
        for user_id in players_to_remove:
            del self.player_games[user_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if hasattr(self, 'auto_save_manager') and self.auto_save_manager:
            try:
                self.auto_save_manager.force_save()
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

    # ---------------- night/day/vote flow ----------------
    async def start_night_phase(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        game.start_night()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É —Ñ–∞–∑—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if hasattr(game, 'db_game_id') and game.db_game_id:
            update_game_phase(game.db_game_id, "night", game.current_round)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        self.save_game_state(game.chat_id)
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
            try:
                await context.bot.unpin_chat_message(
                    chat_id=game.chat_id,
                    message_id=game.pinned_message_id
                )
                logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã: {game.pinned_message_id}")
                game.pinned_message_id = None
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–∏
        keyboard = [
            [InlineKeyboardButton("üé≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", callback_data="view_my_role")], 
            [InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É", url="https://t.me/Forest_fuss_bot")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–µ—Å–Ω—É—é —Å–∫–∞–∑–∫—É
        forest_story = (
            "üå≤ –ñ–∏–ª–∏-–±—ã–ª–∏ –≤ —Ç—ë–º–Ω–æ–º –°–æ—Å–Ω–æ–≤–æ–º –õ–µ—Å—É –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–≤–µ—Ä–∏. –ö–∞–∂–¥—ã–π —Å–∏–¥–µ–ª –≤ —Å–≤–æ–µ–π –Ω–æ—Ä–∫–µ, –±–µ—Ä–ª–æ–≥–µ –∏–ª–∏ –ø–µ—â–µ—Ä–µ, –∫—Ç–æ-—Ç–æ –ø–æ –Ω–æ—á–∞–º –æ—Ö–æ—Ç–∏–ª—Å—è, –∫—Ç–æ-—Ç–æ –∑–∞–ø–∞—Å–∞–ª –Ω–∞ –∑–∏–º—É –∑–µ—Ä–Ω–æ. –ë—ã–ª–∏ —Ç—É—Ç –∏ –∑–∞–π—Ü—ã, –±—ã–ª–∏ –∏ –≤–æ–ª–∫–∏, –±—ã–ª–∏ –ª–∏—Å—ã –∏ –±–æ–±—Ä—ã, –∏ –∫–∞–∂–¥—ã–π –∑–∞–Ω–∏–º–∞–ª—Å—è —á–µ–º-—Ç–æ —Å–≤–æ–∏–º, –ø—ã—Ç–∞—è—Å—å –ø–æ–º–æ—á—å –∫–∞–∫ —Å–µ–±–µ, —Ç–∞–∫ –∏ —Å–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º.\n"
            "–û–¥–Ω–∞–∂–¥—ã, –æ–¥–Ω–æ–π —Ç—ë–º–Ω–æ–π –Ω–æ—á—å—é –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–≤–µ—Ä—É—à–∫–∏ —Å—Ç–∞–ª–∏ –∏—Å—á–µ–∑–∞—Ç—å‚Ä¶ –õ–µ—Å–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ —Ä–µ—à–∏–ª–∏ –¥—Ä—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ—á–µ–º—É —Ç–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ –∫—Ç–æ –∂–µ –≤ —ç—Ç–æ–º –≤–∏–Ω–æ–≤–∞—Ç.\n\n"
            "<b>–ò –≤–æ—Ç –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å, –∑–≤–µ—Ä—É—à–∫–∏ –º–∏—Ä–Ω–æ —É—Å–Ω—É–ª–∏ —Å–ª–∞–¥–∫–∏–º —Å–Ω–æ–º‚Ä¶ üò¥</b>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ—á–∏
        await context.bot.send_message(
            chat_id=game.chat_id,
            text=forest_story,
            parse_mode='HTML',
            message_thread_id=game.thread_id
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
        await asyncio.sleep(2)
        
        night_message = await context.bot.send_message(
            chat_id=game.chat_id,
            text="üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å üåô –ó–≤–µ—Ä—è—Ç–∞ —Ä–∞–∑–±–µ–∂–∞–ª–∏—Å—å –ø–æ –Ω–æ—Ä–∫–∞–º –∏ —Å–ª–∞–¥–∫–æ –∑–∞—Å–Ω—É–ª–∏ üò¥ –ê –≤–æ—Ç –Ω–æ—á–Ω—ã–µ –∑–≤–µ—Ä–∏ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –æ—Ö–æ—Ç—É‚Ä¶\n\nüé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
            reply_markup=reply_markup,
            message_thread_id=game.thread_id
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—á–∏
        await self._pin_stage_message(context, game, "night", night_message.message_id)

        # –õ–° —Å —Ä–æ–ª—è–º–∏
        for player in game.players.values():
            role_info = self.get_role_info(player.role)
            try:
                await context.bot.send_message(chat_id=player.user_id, text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']}\n\n{role_info['description']}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

        # Wolves intro
        wolves = game.get_players_by_role(Role.WOLF)
        if len(wolves) > 1:
            wolves_text = f"üê∫ {', '.join([w.username for w in wolves])}, —Ç–∞–∫-—Ç–∞–∫-—Ç–∞–∫, –∞ –≤–æ—Ç –∏ –Ω–∞—à–∏ –≥–æ–ª–æ–¥–Ω—ã–µ –≤–æ–ª–∫–∏. üê∫ –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, —Ç–æ—á–∏—Ç–µ –∑—É–±–∫–∏ (–¥–∞ —Ö–æ—Ç—å –¥—Ä—É–≥-–¥—Ä—É–≥—É), —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á—å—é –≤—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ –æ—Ö–æ—Ç—É üòà"
            for wolf in wolves:
                try:
                    await context.bot.send_message(chat_id=wolf.user_id, text=wolves_text)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ª–∫—É {wolf.user_id}: {e}")

        # Mole intro
        moles = game.get_players_by_role(Role.MOLE)
        for mole in moles:
            try:
                mole_text = "ü¶´ –í–æ—Ç —Ç—ã –≥–¥–µ, –¥—Ä—É–∂–æ–∫ <b>–ö—Ä–æ—Ç</b>! –ù–µ —É—Å—Ç–∞–ª –µ—â–µ –Ω–æ—á—å—é —Ä—ã—Ç—å –Ω–æ—Ä–∫–∏, –ø–æ–ø–∞–¥–∞—è –≤ –¥–æ–º–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π? –ê —Ö–æ—Ç—è... –ó–Ω–∞–µ—à—å, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ, –≤–µ–¥—å —Ç–∞–∫ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –æ–Ω–∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ!"
                await context.bot.send_message(chat_id=mole.user_id, text=mole_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ä–æ—Ç—É {mole.user_id}: {e}")

        # Beaver intro
        beavers = game.get_players_by_role(Role.BEAVER)
        for beaver in beavers:
            try:
                beaver_text = "ü¶¶ –ù–∞—à <b>–ë–æ–±—ë—Ä</b> –≤–µ—Å—å–º–∞ —Ö–∏—Ç—ë—Ä ‚Äì –≤—Å—ë –¥–æ–±—Ä–æ –Ω–µ—Å—ë—Ç –≤ —à–∞—Ç—ë—Ä. –£ <b>–±–æ–±—Ä–∞</b> –≤ —à–∞—Ç—Ä–µ –¥–æ–±—Ä–∞ ‚Äì –±–æ—á–∫–∞, –∫–∞–¥–∫–∞, –¥–≤–∞ –≤–µ–¥—Ä–∞!"
                await context.bot.send_message(chat_id=beaver.user_id, text=beaver_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–±—Ä—É {beaver.user_id}: {e}")

        # Fox intro
        foxes = game.get_players_by_role(Role.FOX)
        for fox in foxes:
            try:
                fox_text = "ü¶ä –ñ–∏–ª–∞-–±—ã–ª–∞ <b>–õ–∏—Å–∞</b>-–≤–æ—Ä–æ–≤–∫–∞, –¥–∞ –Ω–µ –ø–æ–¥–≤–µ–ª–∞ –µ–µ —Å–Ω–æ—Ä–æ–≤–∫–∞! ü¶ä"
                await context.bot.send_message(chat_id=fox.user_id, text=fox_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—Å–µ {fox.user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º (—Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π –Ω–æ—á–∏)
        if game.current_round == 1:
            await self.send_roles_to_players(context, game)
        
        # –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await self.send_night_actions_to_players(context, game)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await self.send_role_button_to_passive_players(context, game)

        # —Ç–∞–π–º–µ—Ä –Ω–æ—á–∏ (–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ç–∞—Å–∫)
        asyncio.create_task(self.night_phase_timer(context, game))

    async def night_phase_timer(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞ –Ω–∞—á–∞—Ç–∞. –ò–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}")
        
        for i in range(60):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if game.phase == GamePhase.NIGHT and game.chat_id in self.night_actions:
                night_actions = self.night_actions[game.chat_id]
                if night_actions.are_all_actions_completed():
                    logger.info("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è! –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ—á—å –¥–æ—Å—Ä–æ—á–Ω–æ.")
                    await context.bot.send_message(
                        chat_id=game.chat_id, 
                        text="‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è! –ù–æ—á—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ.",
                        message_thread_id=game.thread_id
                    )
                    await self.process_night_phase(context, game)
                    await self.start_day_phase(context, game)
                    return
            
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –≤—ã—Ö–æ–¥–∏–º
            if game.phase != GamePhase.NIGHT:
                logger.info(f"–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {game.phase}")
                return
        
        # –í—Ä–µ–º—è –≤—ã—à–ª–æ
        if game.phase == GamePhase.NIGHT:
            await self.process_night_phase(context, game)
            await self.start_day_phase(context, game)

    async def start_day_phase(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        winner = game.check_game_end()
        if winner:
            await self.end_game_winner(context, game, winner)
            return
            
        game.start_day()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É —Ñ–∞–∑—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if hasattr(game, 'db_game_id') and game.db_game_id:
            update_game_phase(game.db_game_id, "day", game.current_round)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        self.save_game_state(game.chat_id)

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—á–∏
        await self._unpin_previous_stage_message(context, game, "day")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
        keyboard = [
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="day_end_discussion")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        day_message = await context.bot.send_message(
            chat_id=game.chat_id,
            text="‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª–æ —É—Ç—Ä–æ ‚òÄÔ∏è\n\n"
            "–ù–∞—á–∞–ª—Å—è –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å–ø–æ–∫–æ–π–Ω—ã–π —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –≤ –Ω–∞—à–µ–º –¥–∏–≤–Ω–æ–º –õ–µ—Å—É ‚òÄÔ∏è –î—Ä—É–∑—å—è –∑–≤–µ—Ä—è—Ç–∞ —Å–æ–±—Ä–∞–ª–∏—Å—å –≤–º–µ—Å—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π üí¨\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–µ—à–∏—Ç—å, –∫–æ–≥–æ –∏–∑–≥–Ω–∞—Ç—å.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∑–æ–π:",
            reply_markup=reply_markup,
            message_thread_id=game.thread_id
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è
        await self._pin_stage_message(context, game, "day", day_message.message_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
        day_timer_task = asyncio.create_task(self.day_phase_timer(context, game))
        game.set_day_timer_task(day_timer_task)

    async def day_phase_timer(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ
            if game.phase == GamePhase.DAY:
                logger.info(f"–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
                await self.start_voting_phase(context, game)
            else:
                logger.info(f"–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {game.phase} –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
                
        except asyncio.CancelledError:
            logger.info(f"–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –¥–ª—è –∏–≥—Ä—ã {game.chat_id}: {e}")
        finally:
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
            game.day_timer_task = None

    async def start_voting_phase(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        game.start_voting()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É —Ñ–∞–∑—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if hasattr(game, 'db_game_id') and game.db_game_id:
            update_game_phase(game.db_game_id, "voting", game.current_round)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        self.save_game_state(game.chat_id)

        alive_players = game.get_alive_players()
        if len(alive_players) < 2:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è _end_game_internal
            from telegram import Update
            fake_update = Update(update_id=0)
            await self._end_game_internal(fake_update, context, game, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            return

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è
        await self._unpin_previous_stage_message(context, game, "voting")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        voting_keyboard = [
            [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–° —Å –±–æ—Ç–æ–º", url=f"https://t.me/{context.bot.username}")]
        ]
        voting_reply_markup = InlineKeyboardMarkup(voting_keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
        chat_message = (
            "üå≤ \"–ö–æ–≥–æ –∂–µ –º—ã –∏–∑–≥–æ–Ω–∏–º –∏–∑ –Ω–∞—à–µ–≥–æ –õ–µ—Å–∞?\" - —à–µ–ø—á—É—Ç –∑–≤–µ—Ä—É—à–∫–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π.\n\n"
            "ü¶å –ó–∞–π—Ü—ã –ø–µ—Ä–µ–≥–ª—è–¥—ã–≤–∞—é—Ç—Å—è, üê∫ –≤–æ–ª–∫–∏ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è –Ω–µ–≤–∏–Ω–Ω—ã–º–∏, –∞ ü¶ä –ª–∏—Å–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç –ø–ª–∞–Ω...\n\n"
            "‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —Å—É–¥—å–±—É –æ–¥–Ω–æ–≥–æ –∏–∑ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –ª–µ—Å–∞!\n"
            "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º - —Ç–∞–º –≤–∞—Å –∂–¥–µ—Ç –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
        )
        
        voting_message = await context.bot.send_message(
            chat_id=game.chat_id, 
            text=chat_message, 
            message_thread_id=game.thread_id,
            reply_markup=voting_reply_markup
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if voting_message:
            await self._pin_stage_message(context, game, "voting", voting_message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∂–∏–≤–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –ª–∏—á–∫—É
        for voter in alive_players:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π
            voting_targets = [p for p in alive_players if p.user_id != voter.user_id]
            keyboard = [[InlineKeyboardButton(f"üó≥Ô∏è {self.get_display_name(p.user_id, p.username, p.first_name)}", callback_data=f"vote_{p.user_id}")] for p in voting_targets]
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
            keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="vote_skip")])
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–° —Å –±–æ—Ç–æ–º" (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            if game.chat_id != voter.user_id:
                keyboard.append([InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–° —Å –±–æ—Ç–æ–º", url=f"https://t.me/{context.bot.username}")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=voter.user_id,
                    text=(
                        "üå≤ –í—Ä–µ–º—è —Ä–µ—à–∞—Ç—å —Å—É–¥—å–±—É –ª–µ—Å–∞!\n\n"
                        "ü¶å –ö–æ–≥–æ –∏–∑ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –ª–µ—Å–∞ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –æ–ø–∞—Å–Ω—ã–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–≤–µ—Ä—É—à–µ–∫?\n"
                        "‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä:"
                    ),
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫—É {voter.user_id}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        game.total_voters = len(alive_players)
        game.voting_type = "exile"  # –ü–æ–º–µ—á–∞–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        
        asyncio.create_task(self.voting_timer(context, game))



    async def voting_timer(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ. –ò–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}, total_voters: {getattr(game, 'total_voters', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
        
        for i in range(120):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
            if game.phase == GamePhase.VOTING and hasattr(game, 'total_voters') and hasattr(game, 'voting_type'):
                current_votes = len(game.votes)
                expected_voters = game.total_voters
                
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ({game.voting_type}): {current_votes}/{expected_voters} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ
                if game.voting_type == "exile" and current_votes >= expected_voters:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    if not (hasattr(game, 'exile_voting_completed') and game.exile_voting_completed):
                        logger.info("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ.")
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–Ω–∞ —Å–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
                        asyncio.create_task(self.complete_exile_voting_early(context, game))
                    return
            
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –≤—ã—Ö–æ–¥–∏–º
            if game.phase != GamePhase.VOTING:
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {game.phase}")
                return
        
        # –í—Ä–µ–º—è –≤—ã—à–ª–æ
        if game.phase == GamePhase.VOTING:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–æ—Å—Ä–æ—á–Ω–æ
            if not (hasattr(game, 'voting_results_processed') and game.voting_results_processed):
                logger.info("–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
                await self.process_voting_results(context, game)
            else:
                logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–æ—Å—Ä–æ—á–Ω–æ.")
        else:
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å, –Ω–æ —Ñ–∞–∑–∞ —É–∂–µ {game.phase}")

    async def process_voting_results(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ì–æ–ª–æ—Å–æ–≤: {len(game.votes)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        if hasattr(game, 'voting_results_processed') and game.voting_results_processed:
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        game.voting_results_processed = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        
        exiled_player = game.process_voting()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        voting_details = game.get_voting_details()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ
        is_early_completion = hasattr(game, 'exile_voting_completed') and game.exile_voting_completed
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if exiled_player:
            role_name = self.get_role_info(exiled_player.role)['name']
            if is_early_completion:
                result_text = f"‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ.\n\nüå≤ {exiled_player.username} –ø–æ–∫–∏–¥–∞–µ—Ç –ª–µ—Å –Ω–∞–≤—Å–µ–≥–¥–∞...\nü¶å –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª {role_name}!"
            else:
                result_text = f"üå≤ {exiled_player.username} –ø–æ–∫–∏–¥–∞–µ—Ç –ª–µ—Å –Ω–∞–≤—Å–µ–≥–¥–∞...\nü¶å –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª {role_name}!"
        else:
            # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            random_message = random.choice(self.no_exile_messages)
            if is_early_completion:
                result_text = f"‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ.\n\nüå≤ {voting_details['voting_summary']}\n\n{random_message}"
            else:
                result_text = f"üå≤ {voting_details['voting_summary']}\n\n{random_message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        result_text += "\n\nüìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n"
        
        for voter_name, vote_info in voting_details['vote_breakdown'].items():
            result_text += f"‚Ä¢ {voter_name}: {vote_info}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result_text += "\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        result_text += f"‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {voting_details['total_votes']}\n"
        result_text += f"‚Ä¢ –ó–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ: {voting_details['votes_for_exile']}\n"
        result_text += f"‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏: {voting_details['skip_votes']}\n"
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {voting_details['voting_summary']}")
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ–º—É —á–∞—Ç–∞
        try:
            await context.bot.send_message(
                chat_id=game.chat_id, 
                text=result_text, 
                message_thread_id=game.thread_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
            # Fallback –±–µ–∑ —Ç–µ–º—ã
            await context.bot.send_message(chat_id=game.chat_id, text=result_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–ª–æ—á–∫–∏ –∏–∑–≥–Ω–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
        if exiled_player:
            await self.send_squirrel_message(context, exiled_player)

        # –û—á–∏—â–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if hasattr(game, 'total_voters'):
            delattr(game, 'total_voters')
        if hasattr(game, 'voting_type'):
            delattr(game, 'voting_type')
        if hasattr(game, 'voting_results_processed'):
            delattr(game, 'voting_results_processed')
        if hasattr(game, 'exile_voting_completed'):
            delattr(game, 'exile_voting_completed')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        alive_players = game.get_alive_players()
        wolves = game.get_players_by_role(Role.WOLF)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã: –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤={len(alive_players)}, –≤–æ–ª–∫–æ–≤={len(wolves)}")
        
        winner = game.check_game_end()
        if winner:
            logger.info(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞: {winner}")
            await self.end_game_winner(context, game, winner)
        else:
            logger.info("–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—á—å.")
            await self.start_new_night(context, game)


    async def start_new_night(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –Ω–æ—á–∏
        await self._unpin_previous_stage_message(context, game, "night")
        await self.start_night_phase(context, game)

    async def _unpin_all_bot_messages(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
        try:
            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
                try:
                    await context.bot.unpin_chat_message(
                        chat_id=game.chat_id,
                        message_id=game.pinned_message_id
                    )
                    logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {game.pinned_message_id}")
                    game.pinned_message_id = None
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
            
            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
            for stage, message_id in game.stage_pinned_messages.items():
                try:
                    await context.bot.unpin_chat_message(
                        chat_id=game.chat_id,
                        message_id=message_id
                    )
                    logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {stage}: {message_id}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {stage}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–∞–ø–æ–≤
            game.clear_all_stage_pinned_messages()
            
            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            try:
                chat = await context.bot.get_chat(game.chat_id)
                if chat.pinned_message:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–∏–º
                    if hasattr(chat.pinned_message, 'from_user') and chat.pinned_message.from_user.id == context.bot.id:
                        await context.bot.unpin_chat_message(
                            chat_id=game.chat_id,
                            message_id=chat.pinned_message.message_id
                        )
                        logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {chat.pinned_message.message_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–æ—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _unpin_previous_stage_message(self, context: ContextTypes.DEFAULT_TYPE, game: Game, current_stage: str):
        """–û—Ç–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
            stage_order = ["night", "day", "voting"]
            current_index = stage_order.index(current_stage) if current_stage in stage_order else -1
            
            if current_index > 0:
                previous_stage = stage_order[current_index - 1]
                previous_message_id = game.get_stage_pinned_message(previous_stage)
                
                if previous_message_id:
                    try:
                        await context.bot.unpin_chat_message(
                            chat_id=game.chat_id,
                            message_id=previous_message_id
                        )
                        logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {previous_stage}: {previous_message_id}")
                        game.clear_stage_pinned_message(previous_stage)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {previous_stage}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞: {e}")

    async def _pin_stage_message(self, context: ContextTypes.DEFAULT_TYPE, game: Game, stage: str, message_id: int):
        """–ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        try:
            await context.bot.pin_chat_message(
                chat_id=game.chat_id,
                message_id=message_id,
                disable_notification=True
            )
            game.set_stage_pinned_message(stage, message_id)
            logger.info(f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ {stage}: {message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ {stage}: {e}")

    async def tag_game_participants(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–µ–≥–∏—Ä—É–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –æ –Ω–∞—á–∞–ª–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            player_tags = []
            for player in game.players.values():
                if player.username:
                    player_tags.append(f"@{player.username}")
                else:
                    player_tags.append(f"[{player.first_name or '–ò–≥—Ä–æ–∫'}](tg://user?id={player.user_id})")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏ –≤ –ª–µ—Å–Ω–æ–º —Å—Ç–∏–ª–µ
            tag_message = (
                "üå≤ <b>–õ–µ—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è...</b> üå≤\n\n"
                "ü¶å –í—Å–µ –ª–µ—Å–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª—è–Ω–µ –¥–ª—è –∏–≥—Ä—ã –≤ –õ–µ—Å –∏ –í–æ–ª–∫–∏!\n"
                "üçÉ –®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç—å–µ–≤, –ø–µ–Ω–∏–µ –ø—Ç–∏—Ü, –∏ —Ç–∞–π–Ω—ã–µ –∑–∞–≥–æ–≤–æ—Ä—ã –≤ —Ç–µ–Ω–∏ –¥–µ—Ä–µ–≤—å–µ–≤...\n\n"
                f"üêæ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–µ—Å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞:</b> {', '.join(player_tags)}\n\n"
                "üé≠ –†–æ–ª–∏ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ä–µ–¥–∏ –∑–≤–µ—Ä—É—à–µ–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.\n"
                "üåô –°–∫–æ—Ä–æ –Ω–∞—Å—Ç—É–ø–∏—Ç –ø–µ—Ä–≤–∞—è –Ω–æ—á—å –≤ –ª–µ—Å—É, –∫–æ–≥–¥–∞ —Ö–∏—â–Ω–∏–∫–∏ –≤—ã–π–¥—É—Ç –Ω–∞ –æ—Ö–æ—Ç—É..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏
            try:
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text(tag_message, parse_mode='HTML')
                else:
                    await context.bot.send_message(
                        chat_id=game.chat_id,
                        text=tag_message,
                        parse_mode='HTML',
                        message_thread_id=game.thread_id
                    )
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏: {send_error}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ parse_mode
                try:
                    await context.bot.send_message(
                        chat_id=game.chat_id,
                        text=tag_message,
                        message_thread_id=game.thread_id
                    )
                except Exception as fallback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ (fallback): {fallback_error}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —Å —Ç–µ–≥–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã: {e}")

    async def end_game_winner(self, context: ContextTypes.DEFAULT_TYPE, game: Game, winner: Optional[Team] = None):
        if getattr(game, "game_over_sent", False):
            return
        game.game_over_sent = True

        game.phase = GamePhase.GAME_OVER
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if hasattr(game, 'db_game_id') and game.db_game_id:
            winner_team = winner.value if winner else None
            finish_game_in_db(game.db_game_id, winner_team)
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        game.cancel_day_timer()
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        await self._unpin_all_bot_messages(context, game)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        try:
            from game_end_logic import GameEndLogic
            game_end_logic = GameEndLogic(game)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if winner:
                result = {
                    "winner": winner,
                    "reason": "üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–±–µ–¥–æ–π –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥!",
                    "details": f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {'–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ' if winner == Team.HERBIVORES else '–•–∏—â–Ω–∏–∫–∏'}"
                }
            else:
                result = {
                    "winner": Team.HERBIVORES,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    "reason": "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
                    "details": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                }
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—Ä–µ—à–∫–∏ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ
            nuts_info = ""
            try:
                nuts_info = await self.award_nuts_for_game(game, winner)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ä–µ—à–∫–æ–≤: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
            message_text = game_end_logic.get_game_over_message(result, nuts_info)
            
        except ImportError:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            if winner:
                winner_text = "üèÜ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏!" if winner == Team.HERBIVORES else "üèÜ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏!"
                message_text = f"üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! {winner_text}\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}"
            else:
                message_text = "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ–º–æ–π
        try:
            await context.bot.send_message(
                chat_id=game.chat_id,
                text=message_text,
                message_thread_id=game.thread_id,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
            # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.send_message(
                    chat_id=game.chat_id,
                    text=message_text.replace('*', '').replace('_', ''),
                    message_thread_id=game.thread_id
                )
            except Exception as e2:
                    logger.error(f"Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            if self.db and game.players:
                await self.update_player_stats_after_game(game, winner)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: {e}")
        

        for pid in list(game.players.keys()):
            if pid in self.player_games:
                del self.player_games[pid]

        chat_id = game.chat_id
        if chat_id in self.games:
            del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        players_to_remove = []
        for user_id, game_chat_id in self.player_games.items():
            if game_chat_id == chat_id:
                players_to_remove.append(user_id)
        
        for user_id in players_to_remove:
            del self.player_games[user_id]

    # ---------------- callbacks: voting, night actions, welcome buttons ----------------
    async def handle_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return

        user_id = query.from_user.id
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ –∏–≥—Ä–æ–∫—É
        if user_id not in self.player_games:
            await query.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
            return

        chat_id = self.player_games[user_id]
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        game = self.games[chat_id]
        if game.phase != GamePhase.VOTING:
            await query.answer("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if query.data == "vote_skip":
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –≤ –∏–≥—Ä—É
            success = game.vote(user_id, None)  # None –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫
            if success:
                await query.edit_message_text("‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!\n\nüïê –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–ø—É—Å–∫–∏)
                if hasattr(game, 'total_voters') and hasattr(game, 'voting_type') and game.voting_type == "exile":
                    if len(game.votes) >= game.total_voters:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                        if not (hasattr(game, 'exile_voting_completed') and game.exile_voting_completed):
                            # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ
                            asyncio.create_task(self.complete_exile_voting_early(context, game))
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
            return
        
        target_id = int(query.data.split('_', 1)[1])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–±—è
        if target_id == user_id:
            await query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!\n\nüîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", show_alert=True)
            return
        
        success = game.vote(user_id, target_id)
        
        if success:
            target_player = game.players[target_id]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞–Ω–µ–µ
            already_voted = user_id in game.votes
            if already_voted:
                await query.edit_message_text(f"üîÑ –í–∞—à –≥–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –≥–æ–ª–æ—Å—É–µ—Ç–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ: {target_player.username}\n\nüïê –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
            else:
                await query.edit_message_text(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ: {target_player.username}\n\nüïê –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è)
            if hasattr(game, 'total_voters') and hasattr(game, 'voting_type') and game.voting_type == "exile":
                if len(game.votes) >= game.total_voters:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    if not (hasattr(game, 'exile_voting_completed') and game.exile_voting_completed):
                        # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ
                        asyncio.create_task(self.complete_exile_voting_early(context, game))
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å!")

    async def handle_night_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        user_id = query.from_user.id

        if user_id in self.player_games:
            chat_id = self.player_games[user_id]
            if chat_id in self.night_interfaces:
                await self.night_interfaces[chat_id].handle_night_action(update, context)
            else:
                await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        else:
            await query.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!", show_alert=True)

    async def handle_welcome_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return

        if query.data == "welcome_start_game":
            # welcome_start_game –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –µ—Å—Ç—å –∏ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º
            chat_id = query.message.chat.id
            if chat_id in self.games:
                game = self.games[chat_id]
                if game.phase == GamePhase.WAITING and game.can_start_game():
                    # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
                    await self.handle_start_game_callback(query, context)
                else:
                    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ
                    await self.join_from_callback(query, context)
            else:
                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ (—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é)
                await self.join_from_callback(query, context)
        elif query.data == "welcome_rules":
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å –∏ –í–æ–ª–∫–∏':\n\n"
                "üé≠ –†–æ–ª–∏:\n"
                "üê∫ –í–æ–ª–∫–∏ (–•–∏—â–Ω–∏–∫–∏) - —Å—Ç–∞—è, –ø–æ –Ω–æ—á–∞–º —Å—ä–µ–¥–∞–µ—Ç –ø–æ –∑–≤–µ—Ä—é\n"
                "ü¶ä –õ–∏—Å–∞ (–•–∏—â–Ω–∏–∫–∏) - –≤–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã\n"
                "üê∞ –ó–∞–π—Ü—ã (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –º–∏—Ä–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏\n"
                "ü¶´ –ö—Ä–æ—Ç (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - —Ä–æ–µ—Ç –Ω–æ—Ä–∫–∏, —É–∑–Ω–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π\n"
                "ü¶¶ –ë–æ–±—ë—Ä (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n\n"
                "üåô –ù–æ—á–Ω—ã–µ —Ñ–∞–∑—ã: –í–æ–ª–∫–∏ ‚Üí –õ–∏—Å–∞ ‚Üí –ë–æ–±—ë—Ä ‚Üí –ö—Ä–æ—Ç\n"
                "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ —Ñ–∞–∑—ã: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
                "üèÜ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
                reply_markup=reply_markup
            )
        elif query.data == "welcome_status":
            await self.status_from_callback(query, context)
        elif query.data == "welcome_cancel_game":
            await self.cancel_game_from_welcome(query, context)
        elif query.data == "welcome_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            keyboard = [
                [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="welcome_start_game")],
                [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="welcome_rules")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data="welcome_status")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if await self.is_user_admin(query, context):
                quick_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"
                keyboard.append([InlineKeyboardButton(quick_mode_text, callback_data="toggle_quick_mode_game")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            welcome_text = (
                "üå≤ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å –∏ –í–æ–ª–∫–∏!</b> üå≤\n\n"
                "üé≠ –≠—Ç–æ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏!\n\n"
                "üê∫ <b>–•–∏—â–Ω–∏–∫–∏:</b> –í–æ–ª–∫–∏ –∏ –õ–∏—Å–∞\n"
                "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:</b> –ó–∞–π—Ü—ã, –ö—Ä–æ—Ç –∏ –ë–æ–±—ë—Ä\n\n"
                "üéØ <b>–¶–µ–ª—å:</b> –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!\n\n"
                f"üë• –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {self.global_settings.get_min_players()} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"{'‚ö° –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù' if self.global_settings.is_test_mode() else ''}\n"
                "‚è∞ –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–æ—á–Ω—ã—Ö –∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ñ–∞–∑\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            )

            await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')

    async def cancel_game_from_welcome(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∏–≥—Ä—É –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user_id)
            if chat_member.status not in ['creator', 'administrator']:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∏–≥—Ä—É!")
                return
        except Exception:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!")
            return

        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return

        game = self.games[chat_id]

        if game.phase != GamePhase.WAITING:
            await query.edit_message_text("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–≥—Ä—É –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤!")
            return

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        del self.games[chat_id]
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
            try:
                await context.bot.unpin_chat_message(chat_id, game.pinned_message_id)
            except Exception:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

        await query.edit_message_text("üõë –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

    async def handle_day_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã"""
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        update = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update, context, "admin"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return

        chat_id = query.message.chat.id
        user_id = query.from_user.id

        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return

        game = self.games[chat_id]

        if query.data == "day_end_discussion":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_permission, error_msg = await self.check_game_permissions(update, context, "day_end_discussion")
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            if game.phase != GamePhase.DAY:
                await query.edit_message_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!")
                return

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
            game.cancel_day_timer()
            logger.info(f"–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∏–≥—Ä—ã {game.chat_id}")

            await query.edit_message_text("üèÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ!")
            # –°–æ–∑–¥–∞–µ–º mock update –¥–ª—è start_voting_phase
            mock_update = type('MockUpdate', (), {
                'message': type('MockMessage', (), {
                    'reply_text': lambda self, text, *kwargs: context.bot.send_message(
                        chat_id=game.chat_id, 
                        text=text, 
                        message_thread_id=game.thread_id
                    )
                })()
            })()
            await self.start_voting_phase(context, game)

        elif query.data == "day_timer_diagnostics":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_permission, error_msg = await self.check_game_permissions(query, context, "day_timer_diagnostics")
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            if game.phase != GamePhase.DAY:
                await query.edit_message_text("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            timer_status = game.get_day_timer_status()
            phase_info = f"–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {game.phase.value}"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            from datetime import datetime
            if game.day_start_time:
                elapsed = (datetime.now() - game.day_start_time).total_seconds()
                elapsed_minutes = int(elapsed // 60)
                elapsed_seconds = int(elapsed % 60)
                time_info = f"–í—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è: {elapsed_minutes}–º {elapsed_seconds}—Å"
            else:
                time_info = "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ —Ç–∞–π–º–µ—Ä–∞
            if game.day_timer_task:
                if game.day_timer_task.done():
                    task_info = "–ó–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞: –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                else:
                    task_info = "–ó–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞: –∞–∫—Ç–∏–≤–Ω–∞"
            else:
                task_info = "–ó–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            diagnostics_text = (
                f"üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞</b>\n\n"
                f"üìä {phase_info}\n"
                f"‚è∞ {timer_status}\n"
                f"üïê {time_info}\n"
                f"üîß {task_info}\n\n"
                "üí° –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å"
            keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_diagnostics")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(diagnostics_text, parse_mode='HTML', reply_markup=reply_markup)

        elif query.data == "close_diagnostics":
            await query.edit_message_text("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

        elif query.data == "repeat_current_phase":
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä—ã
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã)
            update_temp = Update(update_id=0, callback_query=query)
            has_permission, error_msg = await self.check_user_permissions(
                update_temp, context, "member"
            )
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            if game.phase == GamePhase.WAITING:
                await query.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è!", show_alert=True)
                return

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
            if game.phase == GamePhase.DAY:
                # –î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞
                phase_message = (
                    "‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª–æ —É—Ç—Ä–æ ‚òÄÔ∏è\n\n"
                    "üå≤ –í—Å–µ –∑–≤–µ—Ä—É—à–∫–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –Ω–∞ –ª–µ—Å–Ω–æ–π –ø–æ–ª—è–Ω–µ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n"
                    f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                    f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                    "üí¨ –û–±—Å—É–∂–¥–∞–π—Ç–µ, –∫–æ–≥–æ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –≤ —Ö–∏—â–Ω–∏—á–µ—Å—Ç–≤–µ!\n"
                    "üïê –£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π..."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
                keyboard = [
                    [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="day_end_discussion")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
            elif game.phase == GamePhase.NIGHT:
                # –ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞
                phase_message = (
                    "üåô –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô\n\n"
                    "üå≤ –í—Å–µ –∑–≤–µ—Ä—É—à–∫–∏ –∑–∞—Å—ã–ø–∞—é—Ç –≤ —Å–≤–æ–∏—Ö —É–∫—Ä—ã—Ç–∏—è—Ö...\n"
                    f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                    f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                    "üê∫ –•–∏—â–Ω–∏–∫–∏ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –æ—Ö–æ—Ç—É...\n"
                    "ü¶´ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ —Å–ø—è—Ç –±–µ—Å–ø–æ–∫–æ–π–Ω–æ..."
                )
                reply_markup = None
                
            elif game.phase == GamePhase.VOTING:
                # –§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                phase_message = (
                    "üó≥Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è! üó≥Ô∏è\n\n"
                    "üå≤ –í—Å–µ –∑–≤–µ—Ä—É—à–∫–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è.\n"
                    f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                    f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                    "üó≥Ô∏è –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–≤–µ—Ä—å–∫–∞!\n"
                    "‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è...\n\n"
                    "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º - —Ç–∞–º –≤–∞—Å –∂–¥–µ—Ç –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
                )
                reply_markup = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                alive_players = game.get_alive_players()
                for voter in alive_players:
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π
                    voting_targets = [p for p in alive_players if p.user_id != voter.user_id]
                    keyboard = [[InlineKeyboardButton(f"üó≥Ô∏è {self.get_display_name(p.user_id, p.username, p.first_name)}", callback_data=f"vote_{p.user_id}")] for p in voting_targets]
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
                    keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="vote_skip")])
                    reply_markup_voting = InlineKeyboardMarkup(keyboard)

                    try:
                        await context.bot.send_message(
                            chat_id=voter.user_id,
                            text=(
                                "üå≤ –í—Ä–µ–º—è —Ä–µ—à–∞—Ç—å —Å—É–¥—å–±—É –ª–µ—Å–∞!\n\n"
                                "ü¶å –ö–æ–≥–æ –∏–∑ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –ª–µ—Å–∞ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –æ–ø–∞—Å–Ω—ã–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–≤–µ—Ä—É—à–µ–∫?\n"
                                "‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä:"
                            ),
                            reply_markup=reply_markup_voting
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫—É {voter.user_id}: {e}")
                
            else:
                # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                phase_message = (
                    "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üèÅ\n\n"
                    f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                    f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                    "üå≤ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                )
                reply_markup = None
            
            await context.bot.send_message(
                        chat_id=game.chat_id, 
                text=phase_message,
                reply_markup=reply_markup,
                        message_thread_id=game.thread_id
                    )
            
            phase_names = {
                GamePhase.DAY: "–¥–Ω—è",
                GamePhase.NIGHT: "–Ω–æ—á–∏", 
                GamePhase.VOTING: "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
                GamePhase.GAME_OVER: "–∏–≥—Ä—ã"
            }
            phase_name = phase_names.get(game.phase, "—ç—Ç–∞–ø–∞")
            await query.edit_message_text(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {phase_name} –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


    # ---------------- settings UI (basic, non-persistent) ----------------
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_game_permissions(update, context, "settings")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chat_settings = get_chat_settings(chat_id)
        
        test_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if chat_settings['test_mode'] else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"

        keyboard = [
            [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã", callback_data="settings_timers")],
            [InlineKeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", callback_data="settings_roles")],
            [InlineKeyboardButton("üë• –õ–∏–º–∏—Ç—ã –∏–≥—Ä–æ–∫–æ–≤", callback_data="settings_players")],
            [InlineKeyboardButton("üå≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏", callback_data="forest_settings")],
            [InlineKeyboardButton(test_mode_text, callback_data="settings_toggle_test")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_reset_chat")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if chat_id in self.games:
            keyboard.insert(-1, [InlineKeyboardButton("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="settings_reset")])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞
        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n\n"
            f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if chat_settings['test_mode'] else '–í–´–ö–õ'}\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {chat_settings['min_players']}-{chat_settings['max_players']}\n"
            f"‚è±Ô∏è –¢–∞–π–º–µ—Ä—ã: –ù–æ—á—å {chat_settings['night_duration']}—Å, –î–µ–Ω—å {chat_settings['day_duration']}—Å, –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {chat_settings['vote_duration']}—Å\n"
            f"üé≠ –†–æ–ª–∏: –õ–∏—Å–∞ —É–º—Ä–µ—Ç —á–µ—Ä–µ–∑ {chat_settings['fox_death_threshold']} –Ω–æ—á–µ–π, –ö—Ä–æ—Ç —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {chat_settings['mole_reveal_threshold']} –Ω–æ—á–µ–π\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞: {'–í–ö–õ' if chat_settings['beaver_protection'] else '–í–´–ö–õ'}\n"
            f"üèÅ –õ–∏–º–∏—Ç—ã: {chat_settings['max_rounds']} —Ä–∞—É–Ω–¥–æ–≤, {chat_settings['max_time']//60} –º–∏–Ω, –º–∏–Ω–∏–º—É–º {chat_settings['min_alive']} –∂–∏–≤—ã—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        await update.message.reply_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_temp = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update_temp, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        user_id = query.from_user.id
        chat_id = query.message.chat.id

        game = self.games.get(chat_id)  # –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        
        if query.data == "settings_timers":
            await self.show_timer_settings(query, context)
        elif query.data == "settings_roles":
            await self.show_role_settings(query, context)
        elif query.data == "settings_toggle_test":
            await self.toggle_quick_mode(query, context, game)
        elif query.data == "toggle_quick_mode_game":
            await self.toggle_quick_mode_from_game(query, context, game)
        elif query.data == "settings_global":
            await self.show_global_settings(query, context)
        elif query.data == "settings_players":
            await self.show_player_settings(query, context)
        elif query.data == "settings_reset_chat":
            await self.reset_chat_settings(query, context)
        elif query.data == "confirm_reset_chat":
            await self.confirm_reset_chat_settings(query, context)
        elif query.data == "settings_reset":
            if game:
                await self.reset_game_stats(query, context, game)
            else:
                await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        elif query.data == "settings_close":
            await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        elif query.data == "players_min":
            await self.show_min_players_options(query, context)
        elif query.data == "players_max":
            await self.show_max_players_options(query, context)
        elif query.data == "forest_settings":
            await self.show_forest_settings(query, context)
        elif query.data == "forest_rewards_settings":
            await self.show_rewards_settings(query, context)
        elif query.data == "forest_dead_settings":
            await self.show_dead_settings(query, context)
        elif query.data == "forest_settings_back":
            await self.show_forest_settings(query, context)
        elif query.data == "set_loser_rewards_true":
            await self.set_loser_rewards_setting(query, context, True)
        elif query.data == "set_loser_rewards_false":
            await self.set_loser_rewards_setting(query, context, False)
        elif query.data == "set_dead_rewards_true":
            await self.set_dead_rewards_setting(query, context, True)
        elif query.data == "set_dead_rewards_false":
            await self.set_dead_rewards_setting(query, context, False)
        # buy_item_ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º handler'–æ–º
        elif query.data == "back_to_main":
            await self.show_main_menu(query, context)
        elif query.data == "show_balance":
            await self.show_balance_menu(query, context)
        elif query.data == "show_shop":
            await self.show_shop_menu(query, context)
        elif query.data == "show_stats":
            await self.show_stats_menu(query, context)
        elif query.data == "close_menu":
            await query.edit_message_text("üå≤ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
        elif query.data == "show_inventory":
            await self.show_inventory(query, context)
        elif query.data == "show_chat_stats":
            await self.show_chat_stats(query, context)
        elif query.data == "close_profile":
            await query.edit_message_text("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç")
        elif query.data == "back_to_profile":
            await self.back_to_profile(query, context)
        elif query.data == "join_chat":
            await self.handle_join_chat(query, context)
        elif query.data == "language_settings":
            await self.handle_language_settings(query, context)
        elif query.data == "show_profile_pm":
            await self.show_profile_pm(query, context)
        elif query.data == "show_roles_pm":
            await self.show_roles_pm(query, context)
        elif query.data == "lang_ru":
            await self.handle_language_ru(query, context)
        elif query.data == "lang_en_disabled":
            await self.handle_language_en_disabled(query, context)
        elif query.data == "show_rules_pm":
            await self.show_rules_pm(query, context)
        elif query.data == "back_to_start":
            await self.back_to_start(query, context)
        elif query.data == "repeat_role_actions":
            await self.repeat_role_actions(query, context)
        elif query.data.startswith("farewell_message_"):
            user_id = int(query.data.split("_")[2])
            await self.handle_farewell_message(query, context, user_id)
        elif query.data == "leave_forest":
            await self.handle_leave_forest(query, context)
        elif query.data.startswith("farewell_"):
            parts = query.data.split("_")
            if len(parts) >= 3:
                farewell_type = parts[1]
                user_id = int(parts[2])
                if farewell_type == "custom":
                    await self.handle_custom_farewell(query, context, user_id)
                else:
                    await self.handle_farewell_type(query, context, farewell_type, user_id)
        elif query.data.startswith("farewell_back_"):
            user_id = int(query.data.split("_")[2])
            await self.handle_farewell_back(query, context, user_id)

    async def show_timer_settings(self, query, context):
        chat_id = query.message.chat.id
        chat_settings = get_chat_settings(chat_id)
        
        keyboard = [
            [InlineKeyboardButton("üåô –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—á–∏", callback_data="timer_night")],
            [InlineKeyboardButton("‚òÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è", callback_data="timer_day")],
            [InlineKeyboardButton("üó≥Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", callback_data="timer_vote")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        
        night_min = chat_settings['night_duration'] // 60
        night_sec = chat_settings['night_duration'] % 60
        day_min = chat_settings['day_duration'] // 60
        day_sec = chat_settings['day_duration'] % 60
        vote_min = chat_settings['vote_duration'] // 60
        vote_sec = chat_settings['vote_duration'] % 60
        
        night_text = f"{night_min}–º {night_sec}—Å" if night_min > 0 else f"{night_sec}—Å"
        day_text = f"{day_min}–º {day_sec}—Å" if day_min > 0 else f"{day_sec}—Å"
        vote_text = f"{vote_min}–º {vote_sec}—Å" if vote_min > 0 else f"{vote_sec}—Å"
        
        await query.edit_message_text(
            f"‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤\n\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüåô –ù–æ—á—å: {night_text}\n‚òÄÔ∏è –î–µ–Ω—å: {day_text}\nüó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {vote_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_player_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤"""
        chat_id = query.message.chat.id
        chat_settings = get_chat_settings(chat_id)
        
        keyboard = [
            [InlineKeyboardButton("üë• –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_min")],
            [InlineKeyboardButton("üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_max")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        
        await query.edit_message_text(
            f"üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤\n\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüë• –ú–∏–Ω–∏–º—É–º: {chat_settings['min_players']} –∏–≥—Ä–æ–∫–æ–≤\nüë• –ú–∞–∫—Å–∏–º—É–º: {chat_settings['max_players']} –∏–≥—Ä–æ–∫–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_min_players_options(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("3 –∏–≥—Ä–æ–∫–∞", callback_data="set_min_players_3")],
            [InlineKeyboardButton("4 –∏–≥—Ä–æ–∫–∞", callback_data="set_min_players_4")],
            [InlineKeyboardButton("5 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_min_players_5")],
            [InlineKeyboardButton("6 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_min_players_6")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_players")]
        ]
        
        await query.edit_message_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_max_players_options(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("8 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_max_players_8")],
            [InlineKeyboardButton("10 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_max_players_10")],
            [InlineKeyboardButton("12 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_max_players_12")],
            [InlineKeyboardButton("15 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_max_players_15")],
            [InlineKeyboardButton("20 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_max_players_20")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_players")]
        ]
        
        await query.edit_message_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def reset_chat_settings(self, query, context):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º"""
        chat_id = query.message.chat.id
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset_chat")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_back")]
        ]
        
        await query.edit_message_text(
            "üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º:\n\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ\n"
            "‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: 4-12\n"
            "‚Ä¢ –¢–∞–π–º–µ—Ä—ã: –ù–æ—á—å 60—Å, –î–µ–Ω—å 300—Å, –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ 120—Å\n"
            "‚Ä¢ –†–æ–ª–∏: –õ–∏—Å–∞ —É–º—Ä–µ—Ç —á–µ—Ä–µ–∑ 2 –Ω–æ—á–∏, –ö—Ä–æ—Ç —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –Ω–æ—á–∏\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞: –í–ö–õ\n"
            "‚Ä¢ –õ–∏–º–∏—Ç—ã: 20 —Ä–∞—É–Ω–¥–æ–≤, 60 –º–∏–Ω, –º–∏–Ω–∏–º—É–º 2 –∂–∏–≤—ã—Ö\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def confirm_reset_chat_settings(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        chat_id = query.message.chat.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = reset_chat_settings(chat_id)
        
        if success:
            await query.edit_message_text(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!\n\n"
                "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º."
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

    async def show_role_settings(self, query, context):
        keyboard = [
            [InlineKeyboardButton("üê∫ –í–æ–ª–∫–∏: 25%", callback_data="role_wolves_25")],
            [InlineKeyboardButton("ü¶ä –õ–∏—Å–∞: 15%", callback_data="role_fox_15")],
            [InlineKeyboardButton("ü¶´ –ö—Ä–æ—Ç: 15%", callback_data="role_mole_15")],
            [InlineKeyboardButton("ü¶¶ –ë–æ–±—ë—Ä: 10%", callback_data="role_beaver_10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        await query.edit_message_text(
            "üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π\n\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüê∫ –í–æ–ª–∫–∏: 25%\nü¶ä –õ–∏—Å–∞: 15%\nü¶´ –ö—Ä–æ—Ç: 15%\nü¶¶ –ë–æ–±—ë—Ä: 10%\nüê∞ –ó–∞–π—Ü—ã: 35% (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def toggle_quick_mode(self, query, context, game: Optional[Game]):
        chat_id = query.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        if game and game.phase != GamePhase.WAITING:
            await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
        chat_settings = get_chat_settings(chat_id)
        current_mode = chat_settings['test_mode']
        new_mode = not current_mode
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = update_chat_settings(chat_id, test_mode=new_mode)
        
        if success:
            mode_text = "–í–ö–õ" if new_mode else "–í–´–ö–õ"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if game:
                game.is_test_mode = new_mode
            
            await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            min_players = 3 if new_mode else 6
            
            await query.edit_message_text(
                f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: {mode_text}\n\n"
                f"–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {min_players}\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä!"
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

    async def toggle_quick_mode_from_game(self, query, context, game: Optional[Game]):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã"""
        logger.info(f"üîÑ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è toggle_quick_mode_from_game –¥–ª—è —á–∞—Ç–∞ {query.message.chat.id}")
        chat_id = query.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await self.is_user_admin(query, context)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}: {is_admin}")
        
        if not is_admin:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        if game and game.phase != GamePhase.WAITING:
            await query.answer("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
        chat_settings = get_chat_settings(chat_id)
        current_mode = chat_settings['test_mode']
        new_mode = not current_mode
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º min_players –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        min_players = 3 if new_mode else 6
        success = update_chat_settings(chat_id, test_mode=new_mode, min_players=min_players)
        
        if success:
            mode_text = "–í–ö–õ" if new_mode else "–í–´–ö–õ"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.global_settings.set_test_mode(new_mode)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if game:
                game.is_test_mode = new_mode
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            min_players = 3 if new_mode else 6
            
            await query.answer(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {mode_text} (–º–∏–Ω–∏–º—É–º: {min_players} –∏–≥—Ä–æ–∫–æ–≤)", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await self.update_registration_message(query, context, game)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)

    async def update_registration_message(self, query, context, game: Optional[Game]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        if not game:
            return
            
        chat_id = query.message.chat.id
        max_players = getattr(game, "MAX_PLAYERS", 12)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –Ω–∏–∫–Ω–µ–π–º–∞–º–∏
        players_list = ""
        for player in game.players.values():
            player_tag = self.format_player_tag(player.username, player.user_id, make_clickable=True)
            players_list += f"‚Ä¢ {player_tag}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –∏–≥—Ä–æ–∫–æ–≤
        chat_settings = get_chat_settings(chat_id)
        min_players = chat_settings.get('min_players', 6)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        message = (
            f"üå≤ <b>–õ–µ—Å –∏ –í–æ–ª–∫–∏ - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> üå≤\n\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}\n"
            f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {min_players}\n\n"
            f"üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}"
        )
        
        if game.can_start_game():
            message += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
        else:
            message += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, min_players - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")])
        
        # –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        keyboard.append([InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="leave_registration")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å" (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π)
        if game.phase != GamePhase.WAITING:
            keyboard.append([InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", callback_data="repeat_role_actions")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ú–∞–≥–∞–∑–∏–Ω"
        keyboard.append([InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if await self.is_user_admin(query, context):
            quick_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"
            keyboard.append([InlineKeyboardButton(quick_mode_text, callback_data="toggle_quick_mode_game")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
        if game.can_start_game():
            keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")])
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if await self.is_user_admin(query, context):
            keyboard.append([InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="cancel_game")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')

    async def show_global_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_back")]
        ]
        
        await query.edit_message_text(
            self.global_settings.get_settings_summary(),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_timer_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤"""
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_temp = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update_temp, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
        if query.data == "timer_night":
            await self.show_night_duration_options(query, context)
        elif query.data == "timer_day":
            await self.show_day_duration_options(query, context)
        elif query.data == "timer_vote":
            await self.show_vote_duration_options(query, context)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
            await self.show_timer_settings(query, context)

    async def handle_role_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π"""
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_temp = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update_temp, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
        if query.data.startswith("role_wolves_"):
            percentage = int(query.data.split("_")[2])
            current_distribution = self.global_settings.get("role_distribution", {})
            current_distribution["wolves"] = percentage / 100.0
            self.global_settings.set("role_distribution", current_distribution)
            await query.edit_message_text(f"üê∫ –î–æ–ª—è –≤–æ–ª–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {percentage}%!\n\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.")
        elif query.data.startswith("role_fox_"):
            percentage = int(query.data.split("_")[2])
            current_distribution = self.global_settings.get("role_distribution", {})
            current_distribution["fox"] = percentage / 100.0
            self.global_settings.set("role_distribution", current_distribution)
            await query.edit_message_text(f"ü¶ä –î–æ–ª—è –ª–∏—Å—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {percentage}%!\n\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.")
        elif query.data.startswith("role_mole_"):
            percentage = int(query.data.split("_")[2])
            current_distribution = self.global_settings.get("role_distribution", {})
            current_distribution["mole"] = percentage / 100.0
            self.global_settings.set("role_distribution", current_distribution)
            await query.edit_message_text(f"ü¶´ –î–æ–ª—è –∫—Ä–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {percentage}%!\n\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.")
        elif query.data.startswith("role_beaver_"):
            percentage = int(query.data.split("_")[2])
            current_distribution = self.global_settings.get("role_distribution", {})
            current_distribution["beaver"] = percentage / 100.0
            self.global_settings.set("role_distribution", current_distribution)
            await query.edit_message_text(f"ü¶¶ –î–æ–ª—è –±–æ–±—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {percentage}%!\n\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
            await self.show_role_settings(query, context)

    async def handle_settings_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_temp = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update_temp, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chat_settings = get_chat_settings(chat_id)
        
        test_mode_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if chat_settings['test_mode'] else "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"

        keyboard = [
            [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã", callback_data="settings_timers")],
            [InlineKeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", callback_data="settings_roles")],
            [InlineKeyboardButton("üë• –õ–∏–º–∏—Ç—ã –∏–≥—Ä–æ–∫–æ–≤", callback_data="settings_players")],
            [InlineKeyboardButton("üå≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏", callback_data="forest_settings")],
            [InlineKeyboardButton(test_mode_text, callback_data="settings_toggle_test")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_reset_chat")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if chat_id in self.games:
            keyboard.insert(-1, [InlineKeyboardButton("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="settings_reset")])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞
        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n\n"
            f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if chat_settings['test_mode'] else '–í–´–ö–õ'}\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {chat_settings['min_players']}-{chat_settings['max_players']}\n"
            f"‚è±Ô∏è –¢–∞–π–º–µ—Ä—ã: –ù–æ—á—å {chat_settings['night_duration']}—Å, –î–µ–Ω—å {chat_settings['day_duration']}—Å, –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {chat_settings['vote_duration']}—Å\n"
            f"üé≠ –†–æ–ª–∏: –õ–∏—Å–∞ —É–º—Ä–µ—Ç —á–µ—Ä–µ–∑ {chat_settings['fox_death_threshold']} –Ω–æ—á–µ–π, –ö—Ä–æ—Ç —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {chat_settings['mole_reveal_threshold']} –Ω–æ—á–µ–π\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞: {'–í–ö–õ' if chat_settings['beaver_protection'] else '–í–´–ö–õ'}\n"
            f"üèÅ –õ–∏–º–∏—Ç—ã: {chat_settings['max_rounds']} —Ä–∞—É–Ω–¥–æ–≤, {chat_settings['max_time']//60} –º–∏–Ω, –º–∏–Ω–∏–º—É–º {chat_settings['min_alive']} –∂–∏–≤—ã—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def show_night_duration_options(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—á–∏"""
        chat_id = query.message.chat.id
        chat_settings = get_chat_settings(chat_id)
        current_duration = chat_settings['night_duration']
        
        options = [30, 45, 60, 90, 120]
        keyboard = []
        
        for duration in options:
            button_text = f"{duration} —Å–µ–∫—É–Ω–¥"
            if duration == current_duration:
                button_text += " ‚úÖ"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_night_{duration}")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞–π–º–µ—Ä–∞–º", callback_data="timer_back")])
        
        await query.edit_message_text(
            "üåô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—á–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_day_duration_options(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–Ω—è"""
        chat_id = query.message.chat.id
        chat_settings = get_chat_settings(chat_id)
        current_duration = chat_settings['day_duration']
        
        options = [120, 180, 300, 420, 600]  # 2, 3, 5, 7, 10 –º–∏–Ω—É—Ç
        keyboard = []
        
        for duration in options:
            minutes = duration // 60
            button_text = f"{minutes} –º–∏–Ω—É—Ç"
            if duration == current_duration:
                button_text += " ‚úÖ"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_day_{duration}")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞–π–º–µ—Ä–∞–º", callback_data="timer_back")])
        
        await query.edit_message_text(
            "‚òÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–Ω—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_vote_duration_options(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = query.message.chat.id
        chat_settings = get_chat_settings(chat_id)
        current_duration = chat_settings['vote_duration']
        
        options = [60, 90, 120, 180, 300]  # 1, 1.5, 2, 3, 5 –º–∏–Ω—É—Ç
        keyboard = []
        
        for duration in options:
            if duration == 60:
                button_text = "1 –º–∏–Ω—É—Ç–∞"
            elif duration == 90:
                button_text = "1.5 –º–∏–Ω—É—Ç—ã"
            else:
                minutes = duration // 60
                button_text = f"{minutes} –º–∏–Ω—É—Ç—ã"
            
            if duration == current_duration:
                button_text += " ‚úÖ"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_vote_{duration}")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞–π–º–µ—Ä–∞–º", callback_data="timer_back")])
        
        await query.edit_message_text(
            "üó≥Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def reset_game_stats(self, query, context, game: Game):
        if game.phase != GamePhase.WAITING:
            await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.")
            return
        game.current_round = 0
        game.game_start_time = None
        game.phase_end_time = None
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–∞!\n\n‚úÖ –†–∞—É–Ω–¥: 0\n‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: —Å–±—Ä–æ—à–µ–Ω–æ\n‚úÖ –¢–∞–π–º–µ—Ä—ã: —Å–±—Ä–æ—à–µ–Ω—ã")

    async def handle_timer_values(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∞–π–º–µ—Ä–æ–≤"""
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_temp = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update_temp, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        if query.data == "timer_back":
            await self.show_timer_settings(query, context)
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if query.data.startswith("set_night_"):
            seconds = int(query.data.split("_")[2])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = update_chat_settings(chat_id, night_duration=seconds)
            if success:
                await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–æ–π
                await self.show_night_duration_options(query, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
        elif query.data.startswith("set_day_"):
            seconds = int(query.data.split("_")[2])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = update_chat_settings(chat_id, day_duration=seconds)
            if success:
                await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–æ–π
                await self.show_day_duration_options(query, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
        elif query.data.startswith("set_vote_"):
            seconds = int(query.data.split("_")[2])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = update_chat_settings(chat_id, vote_duration=seconds)
            if success:
                await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–æ–π
                await self.show_vote_duration_options(query, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
        elif query.data.startswith("set_min_players_"):
            players = int(query.data.split("_")[3])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            update_chat_settings(chat_id, min_players=players)
            await query.edit_message_text(f"üë• –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {players}!\n\n‚úÖ –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.")
        elif query.data.startswith("set_max_players_"):
            players = int(query.data.split("_")[3])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            update_chat_settings(chat_id, max_players=players)
            await query.edit_message_text(f"üë• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {players}!\n\n‚úÖ –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.")

    # ---------------- night actions processing ----------------
    async def send_night_actions_to_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        chat_id = game.chat_id
        if chat_id in self.night_interfaces:
            await self.night_interfaces[chat_id].send_role_reminders(context)

    async def send_squirrel_message(self, context: ContextTypes.DEFAULT_TYPE, player: Player):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–ª–æ—á–∫–∏ –∏–∑–≥–Ω–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
            from role_translator import get_role_name_russian
            role_name = get_role_name_russian(player.role)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
            player_name = player.username or player.first_name or "–ò–≥—Ä–æ–∫"
            
            squirrel_message = (
                f"üçÇ –û—Å–µ–Ω–Ω–∏–π –ª–∏—Å—Ç —É–ø–∞–ª üçÇ\n\n"
                f"üêøÔ∏è –ú–∞–ª–µ–Ω—å–∫–∞—è –±–µ–ª–æ—á–∫–∞ —Å –ø–µ—á–∞–ª—å–Ω—ã–º–∏ –≥–ª–∞–∑–∫–∞–º–∏ –ø–æ–¥–æ—à–ª–∞ –∫ —Ç–µ–±–µ, {player_name}...\n\n"
                f"üí≠ \"–õ–µ—Å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö, {player_name},\" - –≥–æ–≤–æ—Ä–∏—Ç –æ–Ω–∞.\n"
                f"üåÖ \"–°–æ–ª–Ω—Ü–µ –∑–∞—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ–±—è –≤ —ç—Ç–æ–º –º–∏—Ä–µ.\"\n\n"
                f"üé≠ –¢–≤–æ—è —Ä–æ–ª—å: {role_name}\n"
                f"üö´ –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
                f"üîá –ú–æ–ª—á–∞–Ω–∏–µ - —Ç–≤–æ—è –Ω–æ–≤–∞—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å.\n\n"
                f"üåå –ë–µ–ª–æ—á–∫–∞ –±–µ—Ä–µ–∂–Ω–æ –∑–∞–±–∏—Ä–∞–µ—Ç —Ç–≤–æ—é –¥—É—à—É, —á—Ç–æ–±—ã –æ—Ç–Ω–µ—Å—Ç–∏ –µ—ë –≤ –∑–≤—ë–∑–¥–Ω—ã–π –ª–µ—Å...\n\n"
                f"‚≠êÔ∏è –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {player_name} ‚≠êÔ∏è"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üí¨ –°–∫–∞–∑–∞—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data=f"farewell_message_{player.user_id}")],
                [InlineKeyboardButton("üå≤ –ü–æ–∫–∏–Ω—É—Ç—å –ª–µ—Å", callback_data="leave_forest")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
            await context.bot.send_message(
                chat_id=player.user_id,
                text=squirrel_message,
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–ª–æ—á–∫–∏ –∏–≥—Ä–æ–∫—É {player_name} ({player.user_id})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–ª–æ—á–∫–∏ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

    async def send_wolf_victim_pm(self, context: ContextTypes.DEFAULT_TYPE, victim_info: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –õ–° –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—ä–µ–ª –≤–æ–ª–∫"""
        try:
            user_id = victim_info['user_id']
            username = victim_info['username']
            role_name = victim_info['role_name']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"–ù–µ –ø–æ—Å–ª—É—à–∞–ª—Å—è, —Ç—ã @{username} –≤–∑—Ä–æ—Å–ª—ã—Ö –¥–∞ –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π, "
                f"–æ—Ç–∫—Ä—ã–ª –¥–≤–µ—Ä—å –∑–ª–æ–º—É –≤–æ–ª–∫—É. –ò –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç —Ç–µ–±—è –Ω–æ–∂–∫–∏ –¥–∞ –æ—Ä–µ—à–∫–æ–≤ –Ω–µ–º–Ω–æ–∂–∫–æ. "
                f"–ø–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º!\n\n"
                f"üé≠ –¢–≤–æ—è —Ä–æ–ª—å: {role_name}\n"
                f"üö´ –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
                f"üîá –ú–æ–ª—á–∞–Ω–∏–µ - —Ç–≤–æ—è –Ω–æ–≤–∞—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üí¨ –°–∫–∞–∑–∞—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data=f"farewell_message_{user_id}")],
                [InlineKeyboardButton("üå≤ –ü–æ–∫–∏–Ω—É—Ç—å –ª–µ—Å", callback_data="leave_forest")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–°
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –õ–° –∂–µ—Ä—Ç–≤–µ –≤–æ–ª–∫–∞ {username} (ID: {user_id})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –∂–µ—Ä—Ç–≤–µ –≤–æ–ª–∫–∞: {e}")

    async def send_mole_check_pm(self, context: ContextTypes.DEFAULT_TYPE, check_info: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –õ–° –∫—Ä–æ—Ç—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            mole_id = check_info['mole_id']
            mole_username = check_info['mole_username']
            target_username = check_info['target_username']
            target_role = check_info['target_role']
            check_result = check_info['check_result']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
            from role_translator import get_role_name_russian
            role_name = get_role_name_russian(target_role)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
            pm_message = self._create_mole_pm_message(target_role, target_username, check_result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –õ–°
            message = (
                f"ü¶´ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–≤–æ–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
                f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π: @{target_username}\n"
                f"üé≠ –†–æ–ª—å: {role_name}\n\n"
                f"{pm_message}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–°
            await context.bot.send_message(
                chat_id=mole_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –õ–° –∫—Ä–æ—Ç—É {mole_username} (ID: {mole_id}) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –∫—Ä–æ—Ç—É: {e}")

    def _create_mole_pm_message(self, target_role, target_username: str, check_result: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏"""
        from game_logic import Role
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞
        role_genitive = {
            Role.WOLF: "–≤–æ–ª–∫–∞",
            Role.FOX: "–ª–∏—Å—ã", 
            Role.HARE: "–∑–∞–π—Ü–∞",
            Role.MOLE: "–∫—Ä–æ—Ç–∞",
            Role.BEAVER: "–±–æ–±—Ä–∞"
        }
        role_genitive_name = role_genitive.get(target_role, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫—Ä–æ—Ç–∞
        if target_role == Role.WOLF:
            if "–æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ –æ—Ö–æ—Ç—É" in check_result:
                return f"ü¶° –ö—Ä–æ—Ç –∑–∞–≥–ª—è–Ω—É–ª –≤ –Ω–æ—Ä–∫—É, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–∞. –ü–æ—Ö–æ–∂–µ, @{target_username} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ –æ—Ö–æ—Ç—É..."
            else:
                return f"ü¶° –ö—Ä–æ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∏–∑-–ø–æ–¥ —Ç–∏—à–∫–∞ –∏ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —ç—Ç–æ @{target_username} - –í–æ–ª–∫!"
        
        elif target_role == Role.FOX:
            if "–æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ –¥–µ–ª–æ" in check_result:
                return f"ü¶° –ö—Ä–æ—Ç –∑–∞–≥–ª—è–Ω—É–ª –≤ –Ω–æ—Ä–∫—É, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–∞. –ü–æ—Ö–æ–∂–µ, @{target_username} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ –¥–µ–ª–æ..."
            else:
                return f"ü¶° –ö—Ä–æ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∏–∑-–ø–æ–¥ —Ç–∏—à–∫–∞ –∏ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —ç—Ç–æ @{target_username} - –õ–∏—Å–∞!"
        
        elif target_role == Role.HARE:
            if "–æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ –¥–µ–ª–∞–º" in check_result:
                return f"ü¶° –ö—Ä–æ—Ç –∑–∞–≥–ª—è–Ω—É–ª –≤ –Ω–æ—Ä–∫—É, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–∞. –ü–æ—Ö–æ–∂–µ, @{target_username} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ –¥–µ–ª–∞–º..."
            else:
                return f"ü¶° –ö—Ä–æ—Ç –ø—Ä–∏—à—ë–ª –∫ –Ω–æ—Ä–∫–µ @{target_username}, –æ–Ω –æ—Ç–∫—Ä—ã–ª –¥–≤–µ—Ä—å. –í—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ, –æ–Ω –º–∏—Ä–Ω—ã–π."
        
        elif target_role == Role.BEAVER:
            if "–æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ–º–æ–≥–∞—Ç—å" in check_result:
                return f"ü¶° –ö—Ä–æ—Ç –∑–∞–≥–ª—è–Ω—É–ª –≤ –Ω–æ—Ä–∫—É, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–∞. –ü–æ—Ö–æ–∂–µ, @{target_username} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ø–æ–º–æ–≥–∞—Ç—å..."
            else:
                return f"ü¶° –ö—Ä–æ—Ç –ø—Ä–∏—à—ë–ª –∫ –Ω–æ—Ä–∫–µ @{target_username}, –æ–Ω –æ—Ç–∫—Ä—ã–ª –¥–≤–µ—Ä—å. –í—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ, –æ–Ω –º–∏—Ä–Ω—ã–π."
        
        elif target_role == Role.MOLE:
            if "–æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–∞–∑–≤–µ–¥–∫—É" in check_result:
                return f"ü¶° –ö—Ä–æ—Ç –∑–∞–≥–ª—è–Ω—É–ª –≤ –Ω–æ—Ä–∫—É, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –ø—É—Å—Ç–∞. –ü–æ—Ö–æ–∂–µ, @{target_username} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–∞–∑–≤–µ–¥–∫—É..."
            else:
                return f"ü¶° –ö—Ä–æ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∏–∑-–ø–æ–¥ —Ç–∏—à–∫–∞ –∏ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —ç—Ç–æ @{target_username} - –ö—Ä–æ—Ç!"
        
        else:
            return f"ü¶° –ö—Ä–æ—Ç –∑–∞–≥–ª—è–Ω—É–ª –≤ –Ω–æ—Ä–∫—É @{target_username}, –Ω–æ –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –∑–¥–µ—Å—å –∂–∏–≤—ë—Ç..."

    async def process_night_phase(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        chat_id = game.chat_id
        if chat_id in self.night_actions:
            night_actions = self.night_actions[chat_id]
            night_interface = self.night_interfaces[chat_id]
            results = night_actions.process_all_actions()
            await night_interface.send_night_results(context, results)
            night_actions.clear_actions()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –∂–µ—Ä—Ç–≤–µ –≤–æ–ª–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if game.last_wolf_victim:
                await self.send_wolf_victim_pm(context, game.last_wolf_victim)
                game.last_wolf_victim = None  # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –∫—Ä–æ—Ç—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if game.last_mole_check:
                await self.send_mole_check_pm(context, game.last_mole_check)
                game.last_mole_check = None  # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        winner = game.check_game_end()
        if winner:
            await self.end_game_winner(context, game, winner)
            return


    async def complete_exile_voting_early(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–∑–≤–∞–Ω —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        if hasattr(game, 'exile_voting_completed') and game.exile_voting_completed:
            logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if game.phase != GamePhase.VOTING or not hasattr(game, 'voting_type') or game.voting_type != "exile":
            logger.info(f"–ò–≥—Ä–∞ –Ω–µ –≤ —Ñ–∞–∑–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ: phase={game.phase}, voting_type={getattr(game, 'voting_type', 'None')}")
            return
            
        game.exile_voting_completed = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
        
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –≤—Å–µ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º process_voting_results –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await self.process_voting_results(context, game)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_exile_voting_early: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            game.exile_voting_completed = False

    # ---------------- –Ω–æ–≤—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------
    async def handle_join_game_callback(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ"""
        try:
            query = update.callback_query
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback join_game –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_permission, error_msg = await self.check_user_permissions(
                update, context, "member"
            )
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            await self.join_from_callback(query, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_join_game_callback: {e}")
            if update.callback_query:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ!")
    
    async def handle_start_game_callback(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
        try:
            query = update.callback_query
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback start_game –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await query.answer()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_permission, error_msg = await self.check_game_permissions(
                update, context, "start_game"
            )
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            chat_id = query.message.chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–∞
            if chat_id not in self.games:
                await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            game = self.games[chat_id]
            if game.phase != GamePhase.WAITING:
                await query.edit_message_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
                return
            
            if not game.can_start_game():
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
                return
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
            if game.start_game():
                await self.start_game_common(query, context, game)
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start_game_callback: {e}")
            if update.callback_query:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã!")

    async def handle_leave_registration_callback(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            query = update.callback_query
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback leave_registration –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await query.answer()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_permission, error_msg = await self.check_user_permissions(
                update, context, "member"
            )
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            user_id = query.from_user.id
            chat_id = query.message.chat.id
            
            if user_id not in self.player_games:
                await query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ!", show_alert=True)
                return
            
            if self.player_games[user_id] != chat_id:
                await query.answer("‚ùå –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!", show_alert=True)
                return
            
            game = self.games[chat_id]
            if game.phase != GamePhase.WAITING:
                await query.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
                return
            
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            if game.remove_player(user_id):
                del self.player_games[user_id]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                await self._update_join_message(chat_id, context)
                
                await query.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≥—Ä—É!", show_alert=True)
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_leave_registration_callback: {e}")
            if update.callback_query:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

    async def handle_cancel_game_callback(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–≥—Ä—ã"""
        try:
            query = update.callback_query
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback cancel_game –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await query.answer()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
            has_permission, error_msg = await self.check_user_permissions(
                update, context, "admin"
            )
            if not has_permission:
                await query.answer(error_msg, show_alert=True)
                return
            
            chat_id = query.message.chat.id
            user_id = query.from_user.id
            
            if chat_id not in self.games:
                await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
                return
            
            game = self.games[chat_id]
            if game.phase != GamePhase.WAITING:
                await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –∏–≥—Ä—É
            game.phase = GamePhase.GAME_OVER
            del self.games[chat_id]
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
            for user_id in list(self.player_games.keys()):
                if self.player_games[user_id] == chat_id:
                    del self.player_games[user_id]
            
            await query.edit_message_text("üõë –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel_game_callback: {e}")
            if update.callback_query:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã!")

    async def handle_end_game_callback(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_game_permissions(
            update, context, "end_game"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        chat_id = query.message.chat.id
        user_id = query.from_user.id
        
        if chat_id not in self.games:
            await query.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return
        
        game = self.games[chat_id]
        if game.phase == GamePhase.WAITING:
            await query.answer("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
        if user_id not in self.player_games or self.player_games[user_id] != chat_id:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –º–æ–≥—É—Ç –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å!")
            return

        await self._end_game_internal(query, context, game, "–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")

    async def start_game_common(self, update_or_query, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
        chat_id = game.chat_id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        player_tags = []
        for player in game.players.values():
            if player.username:
                player_tags.append(f"@{player.username}")
            else:
                player_tags.append(f"[{player.first_name or '–ò–≥—Ä–æ–∫'}](tg://user?id={player.user_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤ —Å–∫–∞–∑–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ
        start_message = (
            "üå≤ <b>–õ–µ—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è...</b> üå≤\n\n"
            "ü¶å –í—Å–µ –ª–µ—Å–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª—è–Ω–µ –¥–ª—è –∏–≥—Ä—ã –≤ –õ–µ—Å –∏ –í–æ–ª–∫–∏!\n"
            "üçÉ –®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç—å–µ–≤, –ø–µ–Ω–∏–µ –ø—Ç–∏—Ü, –∏ —Ç–∞–π–Ω—ã–µ –∑–∞–≥–æ–≤–æ—Ä—ã –≤ —Ç–µ–Ω–∏ –¥–µ—Ä–µ–≤—å–µ–≤...\n\n"
            f"üêæ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–µ—Å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞:</b> {', '.join(player_tags)}\n\n"
            "üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä–≤–∞—è –Ω–æ—á—å –≤ –Ω–∞—à–µ–º –≤–æ–ª—à–µ–±–Ω–æ–º –ª–µ—Å—É...\n"
            "üé≠ –†–æ–ª–∏ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ä–µ–¥–∏ –∑–≤–µ—Ä—É—à–µ–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.\n"
            "üåÖ –°–∫–æ—Ä–æ –Ω–∞—Å—Ç—É–ø–∏—Ç —Ä–∞—Å—Å–≤–µ—Ç, –∫–æ–≥–¥–∞ —Ö–∏—â–Ω–∏–∫–∏ –≤—ã–π–¥—É—Ç –Ω–∞ –æ—Ö–æ—Ç—É..."
        )
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=start_message,
            parse_mode='HTML',
            message_thread_id=game.thread_id
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ—á—å (—Ä–æ–ª–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ start_night_phase)
        await self.start_night_phase(context, game)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        self.save_game_state(chat_id)

    async def send_roles_to_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for player in game.players.values():
            role_info = self.get_role_info(player.role)
            team_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if player.team.name == "PREDATORS" else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
            
            role_message = (
                f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ '–õ–µ—Å –∏ –í–æ–ª–∫–∏':\n\n"
                f"üë§ {role_info['name']}\n"
                f"üè¥ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n\n"
                f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{role_info['description']}"
            )
            
            try:
                await context.bot.send_message(chat_id=player.user_id, text=role_message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

    # ---------------- helper ----------------
    async def send_role_button_to_passive_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        passive_roles = [Role.HARE]  # –ó–∞–π—Ü—ã –Ω–µ –∏–º–µ—é—Ç –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

        for player in game.players.values():
            if player.is_alive and player.role in passive_roles:
                keyboard = [[InlineKeyboardButton(
                    "üé≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é —Ä–æ–ª—å",
                    callback_data=f"night_view_role_{player.user_id}"
                )]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                try:
                    await context.bot.send_message(
                        chat_id=player.user_id,
                        text="üåô –ù–æ—á—å –≤ –ª–µ—Å—É...\n\n–í—ã —Å–ø–∏—Ç–µ, –Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å:",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

    async def handle_view_my_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏—á–∫—É"""
        if not update or not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update = Update(update_id=0, callback_query=query)
        has_permission, error_msg = await self.check_user_permissions(
            update, context, "member"
        )
        if not has_permission:
            await query.answer(error_msg, show_alert=True)
            return
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ
        if user_id not in self.player_games:
            await query.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
            return
        
        chat_id = self.player_games[user_id]
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        game = self.games[chat_id]
        if user_id not in game.players:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∏–≥—Ä—ã!")
            return
        
        player = game.players[user_id]
        role_info = self.get_role_info(player.role)
        team_name = "ü¶Å –•–∏—â–Ω–∏–∫–∏" if player.team.name == "PREDATORS" else "üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ"
        
        role_message = (
            f"üåô –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–π —Ä–æ–ª–∏:\n\n"
            f"üé≠{role_info['name']}\n"
            f"üìù {role_info['description']}"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await context.bot.send_message(chat_id=user_id, text=role_message)
            # –ù–µ –∏–∑–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await query.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Ä–æ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {user_id}: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ alert, –Ω–µ –∏–∑–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É!\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (/start –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º).", 
                show_alert=True
            )

    def get_role_info(self, role: Role) -> Dict[str, str]:
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞—ë—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±–µ—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})

    # ---------------- bot lifecycle: setup and run ----------------
    async def setup_bot_commands(self, application: Application):
        commands = [
            # üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            BotCommand("start", "üå≤ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"),
            BotCommand("join", "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"),
            BotCommand("help", "üÜò –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
            BotCommand("rules", "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
            BotCommand("balance", "üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
            BotCommand("shop", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤"),
            BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"),
            BotCommand("global_stats", "üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("nickname", "üé≠ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º"),
            BotCommand("reset_nickname", "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º"),
            
            # üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
            BotCommand("start_game", "üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
            BotCommand("end_game", "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"),
            BotCommand("end", "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (–∫—Ä–∞—Ç–∫–∞—è)"),
            BotCommand("leave", "üëã –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É"),
            
            # ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã"),
            BotCommand("quick_mode", "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º"),
            BotCommand("force_end", "‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"),
            BotCommand("clear_all_games", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–≥—Ä—ã"),
            BotCommand("setup_channel", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞"),
        ]
        try:
            await application.bot.set_my_commands(commands)
            logger.info("Bot commands set.")
        except Exception as ex:
            logger.error(f"Failed to set bot commands: {ex}")

    def run(self):
        application = Application.builder().token(BOT_TOKEN).build()

        # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("inventory", self.inventory_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("rules", self.rules))
        application.add_handler(CommandHandler("join", self.join))
        application.add_handler(CommandHandler("leave", self.leave))
        application.add_handler(CommandHandler("start_game", self.start_game))
        application.add_handler(CommandHandler("end_game", self.end_game))
        application.add_handler(CommandHandler("end", self.end_game))  # –ê–ª–∏–∞—Å –¥–ª—è end_game
        application.add_handler(CommandHandler("force_end", self.force_end))
        application.add_handler(CommandHandler("clear_all_games", self.clear_all_games))
        application.add_handler(CommandHandler("settings", self.settings))
        application.add_handler(CommandHandler("status", self.status))
        application.add_handler(CommandHandler("quick_mode", self.handle_quick_mode_command)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã quick_mode
        application.add_handler(CommandHandler("setup_channel", self.setup_channel)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã setup_channel
        application.add_handler(CommandHandler("remove_channel", self.remove_channel)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã remove_channel
        application.add_handler(CommandHandler("save_state", self.save_state_command)) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        application.add_handler(CommandHandler("auto_save_status", self.auto_save_status_command)) # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        application.add_handler(CommandHandler("balance", self.balance_command)) # –ö–æ–º–∞–Ω–¥–∞ /balance
        application.add_handler(CommandHandler("shop", self.shop_command)) # –ö–æ–º–∞–Ω–¥–∞ /shop
        application.add_handler(CommandHandler("profile", self.profile_command)) # –ö–æ–º–∞–Ω–¥–∞ /profile
        application.add_handler(CommandHandler("global_stats", self.global_stats_command)) # –ö–æ–º–∞–Ω–¥–∞ /global_stats
        application.add_handler(CommandHandler("nickname", self.nickname_command)) # –ö–æ–º–∞–Ω–¥–∞ /nickname
        application.add_handler(CommandHandler("reset_nickname", self.reset_nickname_command)) # –ö–æ–º–∞–Ω–¥–∞ /reset_nickname
        application.add_handler(CommandHandler("game", self.game_command)) # –ö–æ–º–∞–Ω–¥–∞ /game
        application.add_handler(CommandHandler("cancel", self.cancel_command)) # –ö–æ–º–∞–Ω–¥–∞ /cancel
        

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —á–∞—Ç—É
        application.add_handler(ChatMemberHandler(self.handle_bot_join, ChatMemberHandler.MY_CHAT_MEMBER))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, self.handle_private_message))

        # callbacks
        application.add_handler(CallbackQueryHandler(self.handle_vote, pattern=r"^vote_"))
        application.add_handler(CallbackQueryHandler(self.handle_night_action, pattern=r"^night_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^settings_"))
        application.add_handler(CallbackQueryHandler(self.handle_welcome_buttons, pattern=r"^welcome_"))
        application.add_handler(CallbackQueryHandler(self.handle_day_actions, pattern=r"^day_"))
        
        # –ù–æ–≤—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CallbackQueryHandler(self.handle_join_game_callback, pattern=r"^join_game$"))
        application.add_handler(CallbackQueryHandler(self.handle_start_game_callback, pattern=r"^start_game$"))
        application.add_handler(CallbackQueryHandler(self.handle_leave_registration_callback, pattern=r"^leave_registration$"))
        application.add_handler(CallbackQueryHandler(self.handle_cancel_game_callback, pattern=r"^cancel_game$"))
        application.add_handler(CallbackQueryHandler(self.handle_end_game_callback, pattern=r"^end_game$"))
        
        # settings submenu/back handlers
        application.add_handler(CallbackQueryHandler(self.handle_timer_settings, pattern=r"^timer_"))
        application.add_handler(CallbackQueryHandler(self.handle_role_settings, pattern=r"^role_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings_back, pattern=r"^settings_back$"))
        application.add_handler(CallbackQueryHandler(self.handle_timer_values, pattern=r"^set_"))
        application.add_handler(CallbackQueryHandler(self.handle_timer_values, pattern=r"^timer_back"))
        application.add_handler(CallbackQueryHandler(self.handle_view_my_role, pattern=r"^view_my_role$"))
        application.add_handler(CallbackQueryHandler(self.handle_view_my_role, pattern=r"^night_view_role_"))
        
        # shop and profile handlers
        application.add_handler(CallbackQueryHandler(self.handle_buy_item_callback, pattern=r"^buy_item_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^show_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^back_to_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^close_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^farewell_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^leave_forest"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^join_chat"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^language_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^show_profile_pm"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^show_roles_pm"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^lang_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^show_rules_pm"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^back_to_start"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^repeat_role_actions"))

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
        async def post_init(application):
            await self.setup_bot_commands(application)

        application.post_init = post_init

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (blocking call)
        try:
            application.run_polling()
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        except Exception as e:
            if "Conflict" in str(e):
                logger.error("‚ùå –û—à–∏–±–∫–∞ Conflict: –ó–∞–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!")
                logger.error("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
                logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                raise
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if self.db:
                close_db()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    async def handle_private_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É"""
        if not update.message:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≥—Ä—É–ø–ø–∞)
        if update.effective_chat.type != 'private':
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if f'waiting_custom_farewell_{user_id}' in context.user_data:
            await self.handle_custom_farewell_text(update, context, user_id, username)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 100 –æ—Ä–µ—à–∫–æ–≤
        try:
            if self.db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
                existing_user = get_user_by_telegram_id(user_id)
                if not existing_user:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º 100 –æ—Ä–µ—à–∫–æ–≤
                    create_user(user_id, username)
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ–∑–¥–∞–Ω –≤ –ë–î —Å –±–∞–ª–∞–Ω—Å–æ–º 100 –æ—Ä–µ—à–∫–æ–≤")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    welcome_text = (
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                        f"üå∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å–Ω—É—é –ú–∞—Ñ–∏—é!\n"
                        f"üí∞ –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 100 –æ—Ä–µ—à–∫–æ–≤\n\n"
                        f"üéÆ –î–ª—è –∏–≥—Ä—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join\n"
                        f"üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: /balance\n"
                        f"üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: /rules\n"
                        f"‚ùì –ü–æ–º–æ—â—å: /help"
                    )
                    await update.message.reply_text(welcome_text)
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                    await update.message.reply_text(
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                        f"üéÆ –î–ª—è –∏–≥—Ä—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join\n"
                        f"üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: /balance\n"
                        f"üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: /rules\n"
                        f"‚ùì –ü–æ–º–æ—â—å: /help"
                    )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_bot_join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ —á–∞—Ç—É"""
        chat_member_updated = update.my_chat_member
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
        if (chat_member_updated.new_chat_member.status == 'member' and 
            chat_member_updated.old_chat_member.status in ['left', 'kicked']):
            
            chat_id = update.effective_chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
            # (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if chat_id not in self.games:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏
                await self.send_welcome_message(chat_id, context)
    
    
    async def send_welcome_message(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
        welcome_text = (
            "üå≤ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–õ–µ—Å –∏ –í–æ–ª–∫–∏'!</b> üå≤\n\n"
            "üé≠ <b>–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏</b>\n\n"
            "üê∫ <b>–•–∏—â–Ω–∏–∫–∏:</b> –í–æ–ª–∫–∏ + –õ–∏—Å–∞\n"
            "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:</b> –ó–∞–π—Ü—ã + –ö—Ä–æ—Ç + –ë–æ–±—ë—Ä\n\n"
            "üåô <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
            "‚Ä¢ –ù–æ—á—å—é —Ö–∏—â–Ω–∏–∫–∏ –æ—Ö–æ—Ç—è—Ç—Å—è, —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –∑–∞—â–∏—â–∞—é—Ç—Å—è\n"
            "‚Ä¢ –î–Ω–µ–º –≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç –∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ\n"
            "‚Ä¢ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤\n\n"
            f"üë• –ú–∏–Ω–∏–º—É–º: {self.global_settings.get_min_players()} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"{'‚ö° –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú' if self.global_settings.is_test_mode() else ''}\n\n"
            "üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="welcome_start_game")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = await context.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö (–Ω–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
            try:
                await context.bot.pin_chat_message(chat_id, welcome_message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
            except Exception:
                # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} (–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

    async def handle_quick_mode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /quick_mode –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        has_permission, error_msg = await self.check_user_permissions(update, context, "admin")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        if not await self.check_bot_permissions_decorator(update, context):
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã–º —Ä–µ–∂–∏–º–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º!")
            return

        game = self.games.get(chat_id)  # –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        if game and game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.")
            return

        self.global_settings.toggle_test_mode() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        mode_text = "–≤–∫–ª—é—á–µ–Ω" if self.global_settings.is_test_mode() else "–≤—ã–∫–ª—é—á–µ–Ω"
        min_players = self.global_settings.get_min_players()

        result_text = (
            f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º {mode_text}!\n\n"
            f"üìã –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {min_players}\n"
        )

        if game:
            result_text += (
                f"üéÆ –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: {'‚úÖ' if game.can_start_game() else '‚ùå'}\n"
                f"üë• –¢–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}"
            )
        else:
            result_text += "‚ÑπÔ∏è –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π `/join` –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"

        await update.message.reply_text(result_text)

    async def show_forest_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏"""
        from forest_mafia_settings import ForestWolvesSettings
        forest_settings = ForestWolvesSettings(self.global_settings)
        
        keyboard = forest_settings.get_forest_wolves_settings_keyboard()
        summary = forest_settings.get_settings_summary()
        
        await query.edit_message_text(
            summary,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def show_rewards_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥"""
        from forest_mafia_settings import ForestWolvesSettings
        forest_settings = ForestWolvesSettings(self.global_settings)
        
        keyboard = forest_settings.get_rewards_settings_keyboard()
        
        current_enabled = self.global_settings.get("forest_wolves_features", {}).get("loser_rewards_enabled", True)
        status_text = "–í–ö–õ" if current_enabled else "–í–´–ö–õ"
        
        await query.edit_message_text(
            f"üèÜ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥</b>\n\n"
            f"üå∞ –ù–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º: {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def set_loser_rewards_setting(self, query, context, enabled: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö"""
        from forest_mafia_settings import ForestWolvesSettings
        forest_settings = ForestWolvesSettings(self.global_settings)
        
        success = forest_settings.apply_setting("loser_rewards", enabled)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.edit_message_text(
                f"üèÜ –ù–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º {status_text}!\n\n"
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.",
                reply_markup=forest_settings.get_forest_settings_back_keyboard()
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)

    async def show_dead_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–µ—Ä—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        try:
            forest_settings = ForestWolvesSettings()
            keyboard = forest_settings.get_dead_settings_keyboard()
            
            settings_text = (
                "üíÄ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–µ—Ä—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</b> üíÄ\n\n"
                "üå≤ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –ø–æ–ª—É—á–∞—é—Ç –ª–∏ —É–º–µ—Ä—à–∏–µ –∏–≥—Ä–æ–∫–∏ –æ—Ä–µ—à–∫–∏ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ.\n\n"
                "üí° <b>–ù–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º</b> - –ø–æ–ª—É—á–∞—é—Ç –ª–∏ –æ—Ä–µ—à–∫–∏ –∏–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—Ä–ª–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."
            )
            
            await query.edit_message_text(settings_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–º–µ—Ä—à–∏—Ö: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫!", show_alert=True)

    async def set_dead_rewards_setting(self, query, context, value: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–≥—Ä–∞–¥ —É–º–µ—Ä—à–∏–º –∏–≥—Ä–æ–∫–∞–º"""
        try:
            chat_id = query.message.chat.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = update_chat_settings(chat_id, dead_rewards_enabled=value)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                forest_settings = ForestWolvesSettings()
                forest_settings.global_settings.update_forest_feature("dead_rewards_enabled", value)
                
                status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                await query.edit_message_text(
                    f"üíÄ –ù–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º {status_text}!\n\n"
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä.",
                    reply_markup=forest_settings.get_forest_settings_back_keyboard()
                )
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–µ—Ä—à–∏—Ö: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)

    async def handle_buy_item_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        if not query:
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
            item_id = int(query.data.split("_")[2])
            await self.handle_buy_item(query, context, item_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–∫—É–ø–∫–∏: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

    async def update_shop_message(self, query, context):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
            from database_psycopg2 import get_shop_items
            shop_items = get_shop_items()
            
            if not shop_items:
                await query.edit_message_text("üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç</b>\n\n–¢–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ!", parse_mode='HTML')
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for item in shop_items:
                price = int(item['price'])
                button_text = f"{item['item_name']} - {price}üå∞"
                callback_data = f"buy_item_{item['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
            shop_text = f"üå≤ <b>–õ–µ—Å–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω</b>\n\n"
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            shop_text += f"üë§ <b>{clickable_name}:</b>\n"
            shop_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            shop_text += "üõçÔ∏è <b>–ß—Ç–æ –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å?</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            for item in shop_items:
                shop_text += f"<b>{item['item_name']}</b>\n"
                shop_text += f"üìù {item['description']}\n"
                shop_text += f"üí∞ {int(item['price'])} –æ—Ä–µ—à–∫–æ–≤\n\n"
            
            await query.edit_message_text(shop_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞!", show_alert=True)

    async def handle_buy_item(self, query, context, item_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            from database_psycopg2 import get_shop_items
            shop_items = get_shop_items()
            item = None
            for shop_item in shop_items:
                if shop_item['id'] == item_id:
                    item = shop_item
                    break
            
            if not item:
                await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ç–æ–º–∞—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∫—É–ø–æ–∫
            from database_psycopg2 import buy_item
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DECIMAL –≤ int (—Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å float –∏–∑ –ë–î)
            item_price = int(float(item['price']))
            result = buy_item(user_id, item['item_name'], item_price)
            
            if result['success']:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                success_message = (
                    f"‚úÖ –¢—ã –∫—É–ø–∏–ª: {result['item_name']}\n"
                    f"üå∞ –ë–∞–ª–∞–Ω—Å: {result['balance']}\n"
                    f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
                )
                
                await query.answer(success_message, show_alert=True)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∫—É–ø–∏–ª {result['item_name']} –∑–∞ {item_price} –æ—Ä–µ—à–∫–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result['balance']}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
                await self.update_shop_message(query, context)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –æ—à–∏–±–∫—É (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É)
                error_message = f"‚ùå {result['error']}"
                if 'balance' in result:
                    error_message += f"\nüå∞ –ë–∞–ª–∞–Ω—Å: {result['balance']}"
                
                await query.answer(error_message, show_alert=True)
                logger.warning(f"‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}): {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏!\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            await query.answer(error_message, show_alert=True)

    async def show_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            keyboard = [
                [InlineKeyboardButton("üå∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üå≤ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –õ–µ—Å –∏ –≤–æ–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    async def show_balance_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            keyboard = [
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            
            balance_text = f"üå≤ <b>–ë–∞–ª–∞–Ω—Å –õ–µ—Å –∏ –≤–æ–ª–∫–∏</b>\n\n"
            balance_text += f"üë§ <b>{clickable_name}:</b>\n"
            balance_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            balance_text += "üí° –û—Ä–µ—à–∫–∏ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –∏–≥—Ä–∞—è –≤ –õ–µ—Å –∏ –≤–æ–ª–∫–∏!"
            
            await query.edit_message_text(balance_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def show_shop_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
            shop_items = get_shop_items()
            
            if not shop_items:
                await query.edit_message_text("üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç</b>\n\n–¢–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ!", parse_mode='HTML')
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for item in shop_items:
                price = int(item['price'])
                button_text = f"{item['item_name']} - {price}üå∞"
                callback_data = f"buy_item_{item['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
            shop_text = f"üå≤ <b>–õ–µ—Å–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω</b>\n\n"
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            shop_text += f"üë§ <b>{clickable_name}:</b>\n"
            shop_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            shop_text += "üõçÔ∏è <b>–ß—Ç–æ –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å?</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            for item in shop_items:
                shop_text += f"<b>{item['item_name']}</b>\n"
                shop_text += f"üìù {item['description']}\n"
                shop_text += f"üí∞ {int(item['price'])} –æ—Ä–µ—à–∫–æ–≤\n\n"
            
            await query.edit_message_text(shop_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

    async def show_stats_menu(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_psycopg2 import get_player_detailed_stats
            stats = get_player_detailed_stats(user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            stats_text = f"üå≤ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –õ–µ—Å –∏ –≤–æ–ª–∫–∏</b>\n\n"
            stats_text += f"üë§ <b>{username}:</b>\n\n"
            
            if stats:
                stats_text += f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('games_played', 0)}\n"
                stats_text += f"üèÜ –ü–æ–±–µ–¥: {stats.get('wins', 0)}\n"
                stats_text += f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.get('losses', 0)}\n"
                stats_text += f"üå∞ –û—Ä–µ—à–∫–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('total_nuts', 0)}\n"
            else:
                stats_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n"
                stats_text += "üéÆ –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!"
            
            await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name or "Unknown"
            
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            logger.info(f"üë§ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            keyboard = [
                [InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∫–∞", callback_data="show_inventory")],
                [InlineKeyboardButton("üìú –°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏", callback_data="show_chat_stats")],
                [InlineKeyboardButton("üå∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_profile")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b> üë§\n\n"
            profile_text += f"üå≤ <b>{clickable_name}</b>\n"
            profile_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            profile_text += "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            profile_text += "üß∫ <b>–ö–æ—Ä–∑–∏–Ω–∫–∞</b> - –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
            profile_text += "üìú <b>–°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
            profile_text += "üå∞ <b>–ë–∞–ª–∞–Ω—Å</b> - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–µ—à–∫–∞—Ö\n"
            profile_text += "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b> - –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"
            
            await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def global_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name or "Unknown"
            
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            logger.info(f"üåç –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_psycopg2 import get_player_detailed_stats
            stats = get_player_detailed_stats(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"üåç <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üåç\n\n"
            stats_text += f"üë§ <b>{username}</b>\n\n"
            
            if stats:
                games_played = stats.get('games_played', 0)
                games_won = stats.get('games_won', 0)
                games_lost = stats.get('games_lost', 0)
                win_rate = stats.get('win_rate', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from database_balance_manager import balance_manager
                total_nuts = balance_manager.get_user_balance(user_id)
                
                stats_text += f"üéÆ <b>–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                stats_text += f"‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games_played}\n"
                stats_text += f"‚Ä¢ –ü–æ–±–µ–¥: {games_won}\n"
                stats_text += f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {games_lost}\n"
                stats_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n\n"
                
                stats_text += f"üå∞ <b>–û—Ä–µ—à–∫–∏:</b>\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_nuts}\n"
                stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –∏–≥—Ä—É: {total_nuts // games_played if games_played > 0 else 0}\n\n"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
                if 'role_stats' in stats:
                    role_stats = stats['role_stats']
                    stats_text += f"üé≠ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º:</b>\n"
                    for role, count in role_stats.items():
                        stats_text += f"‚Ä¢ {role}: {count} —Ä–∞–∑\n"
            else:
                stats_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n"
                stats_text += "üéÆ –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!\n\n"
                stats_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"
            
            await update.message.reply_text(stats_text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def nickname_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–≥—Ä–æ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name or "Unknown"
            
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            if not context.args:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                from database_psycopg2 import get_user_nickname, get_display_name
                
                current_nickname = get_user_nickname(user_id)
                display_name = get_display_name(user_id, username, update.effective_user.first_name)
                
                help_text = f"üé≠ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–æ–º</b>\n\n"
                help_text += f"üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {display_name}\n"
                
                if current_nickname:
                    help_text += f"üé≠ <b>–ù–∏–∫–Ω–µ–π–º:</b> {current_nickname}\n\n"
                    help_text += f"üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                    help_text += f"‚Ä¢ <code>/nickname –ù–æ–≤—ã–π–ù–∏–∫</code> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º\n"
                    help_text += f"‚Ä¢ <code>/nickname clear</code> - —É–¥–∞–ª–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º\n"
                    help_text += f"‚Ä¢ <code>/reset_nickname</code> - –±—ã—Å—Ç—Ä–æ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º\n"
                else:
                    help_text += f"üé≠ <b>–ù–∏–∫–Ω–µ–π–º:</b> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
                    help_text += f"üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                    help_text += f"‚Ä¢ <code>/nickname –ù–æ–≤—ã–π–ù–∏–∫</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º\n"
                
                help_text += f"\nüìù <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
                help_text += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                help_text += f"‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã\n"
                help_text += f"‚Ä¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n"
                help_text += f"‚Ä¢ –ù–∏–∫–Ω–µ–π–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö"
                
                await update.message.reply_text(help_text, parse_mode='HTML')
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            nickname_arg = " ".join(context.args).strip()
            
            if nickname_arg.lower() == "clear":
                # –£–¥–∞–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º
                from database_psycopg2 import clear_user_nickname, get_display_name
                
                if clear_user_nickname(user_id):
                    display_name = get_display_name(user_id, username, update.effective_user.first_name)
                    await update.message.reply_text(
                        f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º —É–¥–∞–ª–µ–Ω!</b>\n\n"
                        f"üë§ <b>–¢–µ–ø–µ—Ä—å –≤–∞—Å –±—É–¥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å:</b> {display_name}",
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
                from database_psycopg2 import set_user_nickname, is_nickname_available, get_display_name
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
                if not is_nickname_available(nickname_arg, user_id):
                    await update.message.reply_text(
                        f"‚ùå <b>–ù–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç!</b>\n\n"
                        f"üé≠ –ù–∏–∫–Ω–µ–π–º '{nickname_arg}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º.\n"
                        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º.",
                        parse_mode='HTML'
                    )
                    return
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
                if set_user_nickname(user_id, nickname_arg):
                    display_name = get_display_name(user_id, username, update.effective_user.first_name)
                    await update.message.reply_text(
                        f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                        f"üé≠ <b>–í–∞—à –Ω–∏–∫–Ω–µ–π–º:</b> {nickname_arg}\n"
                        f"üë§ <b>–í–∞—Å –±—É–¥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å:</b> {display_name}\n\n"
                        f"üí° –ù–∏–∫–Ω–µ–π–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö!",
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞!</b>\n\n"
                        f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º:\n"
                        f"‚Ä¢ –ù–µ –ø—É—Å—Ç–æ–π\n"
                        f"‚Ä¢ –ù–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                        f"‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã",
                        parse_mode='HTML'
                    )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã nickname: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def reset_nickname_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–≥—Ä–æ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_permission, error_msg = await self.check_user_permissions(update, context, "member")
        if not has_permission:
            await self.send_permission_error(update, context, error_msg)
            return
        
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name or "Unknown"
            
            if not self.db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∫–Ω–µ–π–º
            from database_psycopg2 import get_user_nickname, clear_user_nickname, get_display_name
            
            current_nickname = get_user_nickname(user_id)
            
            if not current_nickname:
                await update.message.reply_text(
                    "‚ÑπÔ∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞!</b>\n\n"
                    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/nickname –ù–æ–≤—ã–π–ù–∏–∫</code> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞.",
                    parse_mode='HTML'
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º
            if clear_user_nickname(user_id):
                display_name = get_display_name(user_id, username, update.effective_user.first_name)
                await update.message.reply_text(
                    f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
                    f"üé≠ <b>–£–¥–∞–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º:</b> {current_nickname}\n"
                    f"üë§ <b>–¢–µ–ø–µ—Ä—å –≤–∞—Å –±—É–¥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å:</b> {display_name}\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/nickname –ù–æ–≤—ã–π–ù–∏–∫</code> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞.",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã reset_nickname: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_farewell_message(self, query, context, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if query.from_user.id != user_id:
                await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            can_send, error_message, game_data = await self.can_send_farewell_message(user_id)
            
            logger.info(f"–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: can_send={can_send}, error={error_message}")
            
            if not can_send:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –º–µ–Ω—é
                error_text = (
                    f"‚ùå <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
                    f"{error_message}\n\n"
                    f"üí° –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ:\n"
                    f"‚Ä¢ –ü–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ\n"
                    f"‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã\n"
                    f"‚Ä¢ –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞"
                )
                
                keyboard = [
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"farewell_back_{user_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(error_text, reply_markup=reply_markup, parse_mode='HTML')
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–æ—â–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            keyboard = [
                [InlineKeyboardButton("üå≤ –õ–µ—Å–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ", callback_data=f"farewell_forest_{user_id}")],
                [InlineKeyboardButton("üê∫ –ü—Ä–æ—â–∞–Ω–∏–µ –≤–æ–ª–∫–∞", callback_data=f"farewell_wolf_{user_id}")],
                [InlineKeyboardButton("ü¶ä –ü—Ä–æ—â–∞–Ω–∏–µ –ª–∏—Å—ã", callback_data=f"farewell_fox_{user_id}")],
                [InlineKeyboardButton("üê∞ –ü—Ä–æ—â–∞–Ω–∏–µ –∑–∞–π—Ü–∞", callback_data=f"farewell_hare_{user_id}")],
                [InlineKeyboardButton("ü¶´ –ü—Ä–æ—â–∞–Ω–∏–µ –±–æ–±—Ä–∞", callback_data=f"farewell_beaver_{user_id}")],
                [InlineKeyboardButton("üï≥Ô∏è –ü—Ä–æ—â–∞–Ω–∏–µ –∫—Ä–æ—Ç–∞", callback_data=f"farewell_mole_{user_id}")],
                [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"farewell_custom_{user_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"farewell_back_{user_id}")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            farewell_text = (
                "üçÇ <b>–ü—Ä–æ—â–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞</b> üçÇ\n\n"
                "üå≤ –õ–µ—Å –ø—Ä–æ—â–∞–µ—Ç—Å—è —Å —Ç–æ–±–æ–π...\n"
                "üí≠ –í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±–∏—Ç–∞—Ç–µ–ª—è–º–∏ –ª–µ—Å–∞:\n\n"
                "üåø –ö–∞–∂–¥–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –∏–º–µ–µ—Ç —Å–≤–æ–π –æ—Å–æ–±—ã–π –ª–µ—Å–Ω–æ–π —Å—Ç–∏–ª—å!\n\n"
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—â–∞–Ω–∏–µ: –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"
            )
            
            await query.edit_message_text(farewell_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def handle_leave_forest(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∏–¥–∞–Ω–∏–µ –ª–µ—Å–∞"""
        try:
            farewell_text = (
                "üå≤ <b>–ü–æ–∫–∏–¥–∞–Ω–∏–µ –ª–µ—Å–∞</b> üå≤\n\n"
                "üçÇ –¢—ã —Ç–∏—Ö–æ –ø–æ–∫–∏–¥–∞–µ—à—å –ª–µ—Å...\n"
                "üåô –¢–≤–æ—è –¥—É—à–∞ —É—Ö–æ–¥–∏—Ç –≤ –∑–≤—ë–∑–¥–Ω—ã–π –ª–µ—Å –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
                "‚≠êÔ∏è –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –ø—É—Ç–Ω–∏–∫! ‚≠êÔ∏è"
            )
            
            await query.edit_message_text(farewell_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è –ª–µ—Å–∞: {e}")

    async def can_send_farewell_message(self, user_id: int) -> tuple[bool, str, dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Returns:
            tuple[bool, str, dict]: (–º–æ–∂–Ω–æ_–æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ, –¥–∞–Ω–Ω—ã–µ_–∏–≥—Ä—ã)
        """
        try:
            from datetime import datetime, timedelta
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–Ω—É—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é)
            last_game = None
            last_game_chat_id = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
            for chat_id, game in self.games.items():
                if user_id in [player.user_id for player in game.players.values()]:
                    last_game = game
                    last_game_chat_id = chat_id
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}, —Ñ–∞–∑–∞: {game.phase}")
                    break
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä—É
            if not last_game:
                try:
                    from database_psycopg2 import fetch_query
                    
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    query = """
                        SELECT chat_id, thread_id, game_data, created_at, updated_at
                        FROM active_games_state 
                        WHERE game_data->>'phase' = 'finished'
                        AND game_data->'players' ? %s
                        ORDER BY updated_at DESC 
                        LIMIT 1
                    """
                    
                    result = fetch_query(query, (str(user_id),))
                    if result:
                        game_data = result[0]
                        last_game_chat_id = game_data['chat_id']
                        last_game = {
                            'chat_id': game_data['chat_id'],
                            'thread_id': game_data['thread_id'],
                            'updated_at': game_data['updated_at']
                        }
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {last_game_chat_id}")
                    else:
                        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as db_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î: {db_error}")
                    # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
                    if last_game_chat_id:
                        last_game = {
                            'chat_id': last_game_chat_id,
                            'thread_id': None,
                            'updated_at': datetime.now()
                        }
            
            if not last_game:
                logger.warning(f"–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False, "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ.", {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ —É–∂–µ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
            if last_game_chat_id in self.games:
                current_game = self.games[last_game_chat_id]
                if current_game.phase != 'finished' and user_id not in [player.user_id for player in current_game.players.values()]:
                    return False, "‚ùå –í —á–∞—Ç–µ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞! –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.", {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–Ω–µ –ø–æ–∑–∂–µ —á–µ–º —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
            game_end_time = None
            if hasattr(last_game, 'updated_at'):
                game_end_time = last_game.updated_at
            elif isinstance(last_game, dict):
                game_end_time = last_game.get('updated_at')
            
            if game_end_time:
                if isinstance(game_end_time, str):
                    try:
                        game_end_time = datetime.fromisoformat(game_end_time.replace('Z', '+00:00'))
                    except:
                        game_end_time = datetime.now()
                
                current_time = datetime.now(game_end_time.tzinfo) if game_end_time.tzinfo else datetime.now()
                time_diff = current_time - game_end_time
                
                if time_diff > timedelta(hours=24):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 24 —á–∞—Å–æ–≤
                    return False, f"‚ùå –ü—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã. (–ü—Ä–æ—à–ª–æ: {time_diff.total_seconds()/3600:.1f} —á–∞—Å–æ–≤)", {}
            
            return True, "", last_game
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", {}

    async def send_farewell_to_chat(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, farewell_type: str, username: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            can_send, error_message, game_data = await self.can_send_farewell_message(user_id)
            
            if not can_send:
                logger.warning(f"–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
                return False, error_message
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
            chat_id = game_data.get('chat_id')
            thread_id = game_data.get('thread_id')
            
            logger.info(f"–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: chat_id={chat_id}, thread_id={thread_id}, game_data={game_data}")
            
            if not chat_id:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_name = self.get_display_name(user_id, username, None)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É
            farewell_messages = {
                "forest": f"üå≤ {display_name} –ø—Ä–æ—â–∞–µ—Ç—Å—è —Å –ª–µ—Å–æ–º: \"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É, –¥—Ä—É–∑—å—è! –õ–µ—Å –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –º–æ—ë–º —Å–µ—Ä–¥—Ü–µ... üåø\"",
                "wolf": f"üê∫ {display_name} –≤–æ–µ—Ç –Ω–∞ –ø—Ä–æ—â–∞–Ω–∏–µ: \"–ê—É—É—É! –ë—ã–ª–æ –∫—Ä—É—Ç–æ –æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å –≤–∞–º–∏! –£–≤–∏–¥–∏–º—Å—è –≤ –∑–≤—ë–∑–¥–Ω–æ–º –ª–µ—Å—É! üåô\"",
                "fox": f"ü¶ä {display_name} –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º: \"–•–∏-—Ö–∏! –ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–≥—Ä–∞! –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ –º–æ–∏ —Ö–∏—Ç—Ä–æ—Å—Ç–∏! üçá\"",
                "hare": f"üê∞ {display_name} –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–µ—Ç: \"–ü—Ä—ã–≥-—Å–∫–æ–∫! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–µ—Å–µ–ª—å–µ! –õ–µ—Å –ø–æ–ª–æ–Ω —á—É–¥–µ—Å! ü•ï\"",
                "beaver": f"ü¶´ {display_name} —Å—Ç—É—á–∏—Ç —Ö–≤–æ—Å—Ç–æ–º: \"–¢—É–∫-—Ç—É–∫! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∫–æ–º–∞–Ω–¥–∞! –°—Ç—Ä–æ–∏–º –º–æ—Å—Ç—ã –¥—Ä—É–∂–±—ã! üåâ\"",
                "mole": f"üï≥Ô∏è {display_name} –≤—ã–≥–ª—è–¥—ã–≤–∞–µ—Ç –∏–∑ –Ω–æ—Ä–∫–∏: \"–ö–æ–ø–∞—é-–∫–æ–ø–∞—é! –ë—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä—ã—Ç—å —Ç—É–Ω–Ω–µ–ª–∏! –î–æ –≤—Å—Ç—Ä–µ—á–∏! üï≥Ô∏è\""
            }
            
            message = farewell_messages.get(farewell_type, farewell_messages["forest"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∏–≥—Ä—ã
            if thread_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    message_thread_id=thread_id
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message
                )
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –≤ —á–∞—Ç {chat_id}")
            return True, "‚úÖ –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"

    async def handle_farewell_type(self, query, context, farewell_type: str, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ—â–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if query.from_user.id != user_id:
                await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)
                return
            
            username = query.from_user.username or query.from_user.first_name or "–ò–≥—Ä–æ–∫"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            success, message = await self.send_farewell_to_chat(context, user_id, farewell_type, username)
            
            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirmation_text = (
                    f"‚úÖ <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üå≤ –¢–≤–æ—ë –ø—Ä–æ—â–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ {farewell_type} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –∏–≥—Ä—ã.\n\n"
                    f"üçÇ –õ–µ—Å –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å —Ç–≤–æ–∏ —Å–ª–æ–≤–∞...\n"
                    f"‚≠êÔ∏è –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {username}!"
                )
                
                await query.edit_message_text(confirmation_text)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                error_text = (
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                    f"{message}\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
                await query.edit_message_text(error_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–ø–∞ –ø—Ä–æ—â–∞–Ω–∏—è: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def handle_custom_farewell(self, query, context, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if query.from_user.id != user_id:
                await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            can_send, error_message, game_data = await self.can_send_farewell_message(user_id)
            
            if not can_send:
                error_text = (
                    f"‚ùå <b>–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n\n"
                    f"{error_message}\n\n"
                    f"üí° –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ:\n"
                    f"‚Ä¢ –ü–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ\n"
                    f"‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã\n"
                    f"‚Ä¢ –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞"
                )
                
                keyboard = [
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"farewell_back_{user_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(error_text, reply_markup=reply_markup, parse_mode='HTML')
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            custom_text = (
                "‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> ‚úçÔ∏è\n\n"
                "üå≤ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "üí≠ <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥—É—Ö–µ –∏–≥—Ä—ã\n"
                "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ \"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É, –¥—Ä—É–∑—å—è! –ë—ã–ª–æ –≤–µ—Å–µ–ª–æ! üåø\"\n"
                "‚Ä¢ \"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –ª–µ—Å! –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ! üê∫\"\n\n"
                "‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data=f"farewell_back_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(custom_text, reply_markup=reply_markup, parse_mode='HTML')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            from datetime import datetime
            context.user_data[f'waiting_custom_farewell_{user_id}'] = {
                'game_data': game_data,
                'start_time': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–Ω–∏—è: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def handle_custom_farewell_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, username: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–Ω–∏—è"""
        try:
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_data = context.user_data.get(f'waiting_custom_farewell_{user_id}')
            if not waiting_data:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)
            start_time = waiting_data['start_time']
            current_time = datetime.now()
            if current_time - start_time > timedelta(minutes=5):
                del context.user_data[f'waiting_custom_farewell_{user_id}']
                await update.message.reply_text("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
            if message_text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
                del context.user_data[f'waiting_custom_farewell_{user_id}']
                await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message_text) > 200:
                await update.message.reply_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
                return
            
            if len(message_text) < 5:
                await update.message.reply_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            bad_words = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π', '–ª–æ—Ö', '–ø—Ä–∏–¥—É—Ä–æ–∫']
            if any(word in message_text.lower() for word in bad_words):
                await update.message.reply_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—É—Ö–µ –∏–≥—Ä—ã –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π."
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            game_data = waiting_data['game_data']
            chat_id = game_data.get('chat_id')
            thread_id = game_data.get('thread_id')
            
            if not chat_id:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_name = self.get_display_name(user_id, username, None)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            farewell_message = f"üí¨ {display_name} –ø—Ä–æ—â–∞–µ—Ç—Å—è: \"{message_text}\""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∏–≥—Ä—ã
            try:
                if thread_id:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=farewell_message,
                        message_thread_id=thread_id
                    )
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=farewell_message
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                del context.user_data[f'waiting_custom_farewell_{user_id}']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirmation_text = (
                    f"‚úÖ <b>–í–∞—à–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> \"{message_text}\"\n\n"
                    f"üå≤ –í–∞—à–µ –ø—Ä–æ—â–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –∏–≥—Ä—ã.\n"
                    f"üçÇ –õ–µ—Å –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –≤–∞—à–∏ —Å–ª–æ–≤–∞...\n"
                    f"‚≠êÔ∏è –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {username}!"
                )
                
                await update.message.reply_text(confirmation_text, parse_mode='HTML')
                
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –≤ —á–∞—Ç {chat_id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_farewell_back(self, query, context, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é –ø—Ä–æ—â–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if query.from_user.id != user_id:
                await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø—Ä–æ—â–∞–Ω–∏—è
            await self.handle_farewell_message(query, context, user_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø—Ä–æ—â–∞–Ω–∏—è: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def show_inventory(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–∫–æ—Ä–∑–∏–Ω–∫–∞)"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            from database_psycopg2 import get_user_inventory_detailed
            
            inventory_data = get_user_inventory_detailed(user_id)
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            
            inventory_text = f"üß∫ <b>–ö–æ—Ä–∑–∏–Ω–∫–∞</b> üß∫\n\n"
            inventory_text += f"üë§ <b>{clickable_name}</b>\n\n"
            
            if not inventory_data['success']:
                inventory_text += f"‚ùå {inventory_data['error']}"
            elif inventory_data['items']:
                inventory_text += "üõçÔ∏è <b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
                
                for item in inventory_data['items']:
                    item_name = item['item_name']
                    count = item['count']
                    inventory_text += f"‚Ä¢ {item_name} x{count}\n"
                
                inventory_text += f"\nüì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {inventory_data['total_items']} –≤–∏–¥–æ–≤\n"
                inventory_text += f"üå∞ –û—Ä–µ—à–∫–∏: {inventory_data['balance']}"
            else:
                inventory_text += "üì¶ –ö–æ—Ä–∑–∏–Ω–∫–∞ –ø—É—Å—Ç–∞\n\n"
                inventory_text += "üõçÔ∏è –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã!\n"
                inventory_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–∞–≥–∞–∑–∏–Ω' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
            
            await query.edit_message_text(inventory_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!", show_alert=True)

    async def show_chat_stats(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ (—Å–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏)"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            chat_id = query.message.chat.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            stats = get_player_chat_stats(user_id, chat_id)
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            
            stats_text = f"üìú <b>–°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏</b> üìú\n\n"
            stats_text += f"üë§ <b>{clickable_name}</b>\n"
            stats_text += f"üå≤ <b>–í —ç—Ç–æ–º —á–∞—Ç–µ</b>\n\n"
            
            if stats:
                games_played = stats.get('games_played', 0)
                games_won = stats.get('games_won', 0)
                games_lost = stats.get('games_lost', 0)
                total_nuts = stats.get('total_nuts', 0)
                win_rate = (games_won / games_played * 100) if games_played > 0 else 0
                
                stats_text += f"üéÆ <b>–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                stats_text += f"‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games_played}\n"
                stats_text += f"‚Ä¢ –ü–æ–±–µ–¥: {games_won}\n"
                stats_text += f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {games_lost}\n"
                stats_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n\n"
                
                stats_text += f"üå∞ <b>–û—Ä–µ—à–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:</b>\n"
                stats_text += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_nuts}\n"
                stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –∏–≥—Ä—É: {total_nuts // games_played if games_played > 0 else 0}\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                if 'role_stats' in stats:
                    role_stats = stats['role_stats']
                    stats_text += f"üé≠ <b>–†–æ–ª–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:</b>\n"
                    for role, count in role_stats.items():
                        stats_text += f"‚Ä¢ {role}: {count} —Ä–∞–∑\n"
                
                # –†–µ–π—Ç–∏–Ω–≥ –≤ —á–∞—Ç–µ
                if 'chat_rank' in stats:
                    rank = stats['chat_rank']
                    stats_text += f"\nüèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –≤ —á–∞—Ç–µ:</b> #{rank}"
            else:
                stats_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø—É—Å—Ç–∞\n\n"
                stats_text += "üéÆ –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!\n\n"
                stats_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /global_stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            
            await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!", show_alert=True)

    async def back_to_profile(self, query, context):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –∏–≥—Ä–æ–∫–∞"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
            keyboard = [
                [InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∫–∞", callback_data="show_inventory")],
                [InlineKeyboardButton("üìú –°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏", callback_data="show_chat_stats")],
                [InlineKeyboardButton("üå∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_profile")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –Ω–∏–∫–Ω–µ–π–º–∞
            clickable_name = self.format_player_tag(username, user_id, make_clickable=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b> üë§\n\n"
            profile_text += f"üå≤ <b>{clickable_name}</b>\n"
            profile_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            profile_text += "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            profile_text += "üß∫ <b>–ö–æ—Ä–∑–∏–Ω–∫–∞</b> - –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
            profile_text += "üìú <b>–°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
            profile_text += "üå∞ <b>–ë–∞–ª–∞–Ω—Å</b> - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–µ—à–∫–∞—Ö\n"
            profile_text += "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b> - –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"
            
            await query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def handle_join_chat(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏ –≤ —á–∞—Ç'"""
        try:
            join_text = (
                "üéÆ <b>–í–æ–π—Ç–∏ –≤ —á–∞—Ç</b> üéÆ\n\n"
                "üå≤ –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ:\n\n"
                "1Ô∏è‚É£ <b>–ù–∞–π–¥–∏—Ç–µ —á–∞—Ç —Å –∏–≥—Ä–æ–π</b>\n"
                "‚Ä¢ –ò—â–∏—Ç–µ —á–∞—Ç—ã, –≥–¥–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ '–õ–µ—Å –∏ –í–æ–ª–∫–∏'\n"
                "‚Ä¢ –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞\n\n"
                "2Ô∏è‚É£ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ</b>\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/join` –≤ —á–∞—Ç–µ —Å –∏–≥—Ä–æ–π\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–≥—Ä—ã\n\n"
                "3Ô∏è‚É£ <b>–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!</b>\n"
                "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã\n"
                "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞\n\n"
                "üí° <b>–°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π —á–∞—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É!"
            )
            
            keyboard = [
                [InlineKeyboardButton("üå≤ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ–π —á–∞—Ç", url=f"https://t.me/{context.bot.username}?startgroup=true")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(join_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '–í–æ–π—Ç–∏ –≤ —á–∞—Ç': {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def handle_language_settings(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–Ø–∑—ã–∫ / Language'"""
        try:
            language_text = (
                "üåç <b>–Ø–∑—ã–∫ / Language</b> üåç\n\n"
                "üå≤ <b>–†—É—Å—Å–∫–∏–π (Russian)</b>\n"
                "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –±–æ—Ç–∞\n"
                "‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                "‚Ä¢ –†–æ–ª–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n\n"
                "üá∫üá∏ <b>English</b>\n"
                "‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
                "‚Ä¢ English language (coming soon)\n\n"
                "üí° <b>–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫</b>"
            )
            
            keyboard = [
                [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
                [InlineKeyboardButton("üá∫üá∏ English (—Å–∫–æ—Ä–æ)", callback_data="lang_en_disabled")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(language_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def show_profile_pm(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            user_id = query.from_user.id
            username = query.from_user.username or query.from_user.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database_balance_manager import balance_manager
            user_balance = balance_manager.get_user_balance(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –õ–°
            keyboard = [
                [InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∫–∞", callback_data="show_inventory")],
                [InlineKeyboardButton("üìú –°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏", callback_data="show_chat_stats")],
                [InlineKeyboardButton("üå∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="show_shop")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b> üë§\n\n"
            profile_text += f"üå≤ <b>{username}</b>\n"
            profile_text += f"üå∞ –û—Ä–µ—à–∫–∏: {user_balance}\n\n"
            profile_text += "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            profile_text += "üß∫ <b>–ö–æ—Ä–∑–∏–Ω–∫–∞</b> - –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
            profile_text += "üìú <b>–°–≤–∏—Ç–æ–∫ —á–µ—Å—Ç–∏</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–∞—Ö\n"
            profile_text += "üå∞ <b>–ë–∞–ª–∞–Ω—Å</b> - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–µ—à–∫–∞—Ö\n"
            profile_text += "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b> - –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"
            
            await query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –õ–°: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def show_roles_pm(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            roles_text = (
                "üé≠ <b>–†–æ–ª–∏ –≤ –∏–≥—Ä–µ</b> üé≠\n\n"
                "üê∫ <b>–•–ò–©–ù–ò–ö–ò (Predators)</b>\n\n"
                "üê∫ <b>–í–æ–ª–∫</b>\n"
                "‚Ä¢ –£–±–∏–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∂–¥—É—é –Ω–æ—á—å\n"
                "‚Ä¢ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n"
                "‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≥–Ω–∞–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º\n\n"
                "ü¶ä <b>–õ–∏—Å–∞</b>\n"
                "‚Ä¢ –ö—Ä–∞–¥–µ—Ç –æ—Ä–µ—à–∫–∏ —É –∏–≥—Ä–æ–∫–æ–≤\n"
                "‚Ä¢ –£–º–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ 2 –∫—Ä–∞–∂\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –≤–æ–ª–∫–∞–º\n\n"
                "üê∞ <b>–¢–†–ê–í–û–Ø–î–ù–´–ï (Herbivores)</b>\n\n"
                "üê∞ <b>–ó–∞–π–µ—Ü</b>\n"
                "‚Ä¢ –û–±—ã—á–Ω—ã–π –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å\n"
                "‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–±–∏—Ç –≤–æ–ª–∫–æ–º\n"
                "‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏\n\n"
                "ü¶´ <b>–ë–æ–±—ë—Ä</b>\n"
                "‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –Ω–æ—á—å\n"
                "‚Ä¢ –ú–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç –≤–æ–ª–∫–∞\n"
                "‚Ä¢ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑\n\n"
                "üï≥Ô∏è <b>–ö—Ä–æ—Ç</b>\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
                "‚Ä¢ –£–∑–Ω–∞–µ—Ç, –∫—Ç–æ —Ö–∏—â–Ω–∏–∫, –∞ –∫—Ç–æ –Ω–µ—Ç\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º"
            )
            
            keyboard = [
                [InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞", callback_data="show_rules_pm")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(roles_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–æ–ª–µ–π –≤ –õ–°: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


    async def repeat_role_actions(self, query, context):
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞"""
        try:
            user_id = query.from_user.id
            chat_id = query.message.chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if chat_id not in self.games:
                await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return
            
            game = self.games[chat_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –∏–¥–µ—Ç
            if game.phase == GamePhase.WAITING:
                await query.answer("‚è≥ –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
            if user_id not in game.players:
                await query.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
                return
            
            player = game.players[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Ñ–∞–∑—ã
            if game.phase == GamePhase.NIGHT:
                await self._send_night_role_actions(query, context, game, player)
            elif game.phase == GamePhase.DAY:
                await self._send_day_role_actions(query, context, game, player)
            elif game.phase == GamePhase.VOTING:
                await self._send_voting_role_actions(query, context, game, player)
            else:
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã!", show_alert=True)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Ä–æ–ª–∏: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def _send_night_role_actions(self, query, context, game, player):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–æ–ª–∏"""
        try:
            if player.role == Role.WOLF:
                # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–æ–ª–∫–∞
                message = (
                    "üê∫ <b>–í–∞—à–∞ —Ä–æ–ª—å: –í–æ–ª–∫</b>\n\n"
                    "üåô <b>–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞:"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
                keyboard = []
                for player_id, p in game.players.items():
                    if p.is_alive and p.role != Role.WOLF:
                        display_name = self.get_display_name(p.user_id, p.username, p.first_name)
                        keyboard.append([InlineKeyboardButton(f"üéØ {display_name}", callback_data=f"wolf_kill_{player_id}")])
                
                if keyboard:
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                else:
                    await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π!", show_alert=True)
                    
            elif player.role == Role.FOX:
                # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–∏—Å—ã
                message = (
                    "ü¶ä <b>–í–∞—à–∞ —Ä–æ–ª—å: –õ–∏—Å–∞</b>\n\n"
                    "üåô <b>–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É –¥–ª—è –∫—Ä–∞–∂–∏ –æ—Ä–µ—à–∫–æ–≤:"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏–≤—ã–º–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º–∏
                keyboard = []
                for player_id, p in game.players.items():
                    if p.is_alive and p.team == Team.HERBIVORES:
                        display_name = self.get_display_name(p.user_id, p.username, p.first_name)
                        keyboard.append([InlineKeyboardButton(f"üí∞ {display_name}", callback_data=f"fox_steal_{player_id}")])
                
                if keyboard:
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                else:
                    await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π!", show_alert=True)
                    
            elif player.role == Role.MOLE:
                # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫—Ä–æ—Ç–∞
                message = (
                    "ü¶´ <b>–í–∞—à–∞ —Ä–æ–ª—å: –ö—Ä–æ—Ç</b>\n\n"
                    "üåô <b>–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏:"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
                keyboard = []
                for player_id, p in game.players.items():
                    if p.is_alive and p.role != Role.MOLE:
                        display_name = self.get_display_name(p.user_id, p.username, p.first_name)
                        keyboard.append([InlineKeyboardButton(f"üîç {display_name}", callback_data=f"mole_check_{player_id}")])
                
                if keyboard:
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                else:
                    await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π!", show_alert=True)
                    
            elif player.role == Role.BEAVER:
                # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–æ–±—Ä–∞
                message = (
                    "ü¶¶ <b>–í–∞—à–∞ —Ä–æ–ª—å: –ë–æ–±—ë—Ä</b>\n\n"
                    "üåô <b>–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã:"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏–≤—ã–º–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º–∏
                keyboard = []
                for player_id, p in game.players.items():
                    if p.is_alive and p.team == Team.HERBIVORES and p.role != Role.BEAVER:
                        display_name = self.get_display_name(p.user_id, p.username, p.first_name)
                        keyboard.append([InlineKeyboardButton(f"üõ°Ô∏è {display_name}", callback_data=f"beaver_protect_{player_id}")])
                
                if keyboard:
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
                else:
                    await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π!", show_alert=True)
                    
            else:
                # –ó–∞—è—Ü - –Ω–µ—Ç –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                message = (
                    "üê∞ <b>–í–∞—à–∞ —Ä–æ–ª—å: –ó–∞—è—Ü</b>\n\n"
                    "üåô <b>–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –û—Ç–¥—ã—Ö–∞–π—Ç–µ –∏ –∂–¥–∏—Ç–µ —É—Ç—Ä–∞!"
                )
                await query.message.reply_text(message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def _send_day_role_actions(self, query, context, game, player):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–æ–ª–∏"""
        try:
            message = (
                f"‚òÄÔ∏è <b>–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞</b>\n\n"
                f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {self.get_role_name_russian(player.role)}\n"
                f"üè∑Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞:</b> {'–•–∏—â–Ω–∏–∫–∏' if player.team == Team.PREDATORS else '–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ'}\n\n"
                f"üí¨ <b>–û–±—Å—É–∂–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –Ω–æ—á–∏ –∏ –≤—ã–¥–≤–∏–≥–∞–π—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è!</b>\n\n"
                f"üéØ <b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {'–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö' if player.team == Team.PREDATORS else '–ù–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤'}"
            )
            
            await query.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def _send_voting_role_actions(self, query, context, game, player):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏"""
        try:
            message = (
                f"üó≥Ô∏è <b>–§–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</b>\n\n"
                f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {self.get_role_name_russian(player.role)}\n"
                f"üè∑Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞:</b> {'–•–∏—â–Ω–∏–∫–∏' if player.team == Team.PREDATORS else '–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ'}\n\n"
                f"üó≥Ô∏è <b>–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ!</b>\n\n"
                f"üéØ <b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {'–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö' if player.team == Team.PREDATORS else '–ù–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤'}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∏–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            keyboard = []
            for player_id, p in game.players.items():
                if p.is_alive and p.user_id != player.user_id:
                    display_name = self.get_display_name(p.user_id, p.username, p.first_name)
                    keyboard.append([InlineKeyboardButton(f"üó≥Ô∏è {display_name}", callback_data=f"vote_{player_id}")])
            
            if keyboard:
                keyboard.append([InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="vote_skip")])
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–° —Å –±–æ—Ç–æ–º" (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
                if game.chat_id != player.user_id:
                    keyboard.append([InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–° —Å –±–æ—Ç–æ–º", url=f"https://t.me/{context.bot.username}")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
            else:
                await query.message.reply_text(message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def back_to_start(self, query, context):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            keyboard = [
                [InlineKeyboardButton("üå≤ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ–π —á–∞—Ç", url=f"https://t.me/{context.bot.username}?startgroup=true")],
                [InlineKeyboardButton("üéÆ –í–æ–π—Ç–∏ –≤ —á–∞—Ç", callback_data="join_chat")],
                [InlineKeyboardButton("üåç –Ø–∑—ã–∫ / Language", callback_data="language_settings")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile_pm")],
                [InlineKeyboardButton("üé≠ –†–æ–ª–∏", callback_data="show_roles_pm")],
                [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ (–†–æ–ª—å)", url=f"https://t.me/{context.bot.username}?start=role")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = (
                "üå≤ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
                "–Ø –±–æ—Ç-–≤–µ–¥—É—â–∏–π –¥–ª—è –∏–≥—Ä—ã –≤ üå≤ <b>–õ–µ—Å –∏ –í–æ–ª–∫–∏</b>.\n\n"
                "üé≠ <b>–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏</b>\n\n"
                "üê∫ <b>–•–∏—â–Ω–∏–∫–∏:</b> –í–æ–ª–∫–∏ + –õ–∏—Å–∞\n"
                "üê∞ <b>–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:</b> –ó–∞–π—Ü—ã + –ö—Ä–æ—Ç + –ë–æ–±—ë—Ä\n\n"
                "üåô <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
                "‚Ä¢ –ù–æ—á—å—é —Ö–∏—â–Ω–∏–∫–∏ –æ—Ö–æ—Ç—è—Ç—Å—è, —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –∑–∞—â–∏—â–∞—é—Ç—Å—è\n"
                "‚Ä¢ –î–Ω–µ–º –≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç –∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ\n"
                "‚Ä¢ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤\n\n"
                "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            )
            
            await query.edit_message_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    async def handle_language_ru(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        try:
            await query.answer("üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: {e}")

    async def handle_language_en_disabled(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤—ã–±—Ä–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–æ—Ç–∫–ª—é—á–µ–Ω)"""
        try:
            await query.answer("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", show_alert=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: {e}")

    async def show_rules_pm(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            rules_text = (
                "üìñ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</b> üìñ\n\n"
                "üå≤ <b>–õ–µ—Å –∏ –í–æ–ª–∫–∏</b> - —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è'\n\n"
                "üéØ <b>–¶–µ–ª—å –∏–≥—Ä—ã:</b>\n"
                "‚Ä¢ –•–∏—â–Ω–∏–∫–∏: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö\n"
                "‚Ä¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: –Ω–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤\n\n"
                "üåô <b>–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞:</b>\n"
                "‚Ä¢ –í–æ–ª–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞\n"
                "‚Ä¢ –õ–∏—Å–∞ –∫—Ä–∞–¥–µ—Ç –æ—Ä–µ—à–∫–∏ —É –∏–≥—Ä–æ–∫–∞\n"
                "‚Ä¢ –ë–æ–±—ë—Ä –∑–∞—â–∏—â–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
                "‚Ä¢ –ö—Ä–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞\n\n"
                "‚òÄÔ∏è <b>–î–Ω–µ–≤–Ω–∞—è —Ñ–∞–∑–∞:</b>\n"
                "‚Ä¢ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç —Å–æ–±—ã—Ç–∏—è –Ω–æ—á–∏\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ\n"
                "‚Ä¢ –ò–∑–≥–Ω–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É\n\n"
                "üé≠ <b>–†–æ–ª–∏:</b>\n"
                "‚Ä¢ <b>–í–æ–ª–∫</b> - —É–±–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –Ω–æ—á—å\n"
                "‚Ä¢ <b>–õ–∏—Å–∞</b> - –∫—Ä–∞–¥–µ—Ç –æ—Ä–µ—à–∫–∏ (—É–º–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ 2 –∫—Ä–∞–∂)\n"
                "‚Ä¢ <b>–ó–∞–π–µ—Ü</b> - –æ–±—ã—á–Ω—ã–π –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å\n"
                "‚Ä¢ <b>–ë–æ–±—ë—Ä</b> - –∑–∞—â–∏—â–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤\n"
                "‚Ä¢ <b>–ö—Ä–æ—Ç</b> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏\n\n"
                "üèÜ <b>–ü–æ–±–µ–¥–∞:</b>\n"
                "‚Ä¢ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
                "‚Ä¢ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –∏–∑–≥–Ω–∞–ª–∏ –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤\n\n"
                "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏"
            )
            
            keyboard = [
                [InlineKeyboardButton("üé≠ –†–æ–ª–∏", callback_data="show_roles_pm")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(rules_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª –≤ –õ–°: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


if __name__ == "__main__":
    bot = ForestWolvesBot()
    bot.run()