import logging
import asyncio
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from game_logic import Game, GamePhase, Role, Team, Player
from config import BOT_TOKEN, MIN_PLAYERS
from night_actions import NightActions
from night_interface import NightInterface

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ForestMafiaBot:
    def __init__(self):
        self.games: Dict[int, Game] = {}  # chat_id -> Game
        self.player_games: Dict[int, int] = {}  # user_id -> chat_id
        self.night_actions: Dict[int, NightActions] = {}  # chat_id -> NightActions
        self.night_interfaces: Dict[int, NightInterface] = {}  # chat_id -> NightInterface
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üå≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å–Ω—É—é –í–æ–∑–Ω—é! üå≤\n\n"
            "–≠—Ç–æ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
            "/leave - –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É\n"
            "/start_game - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
            "/end_game - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
            "/force_end - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã\n"
            "/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"
        )
    
    async def rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules"""
        rules_text = (
            "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å–Ω–∞—è –í–æ–∑–Ω—è':\n\n"
            "üé≠ –†–æ–ª–∏:\n"
            "üê∫ –í–æ–ª–∫–∏ (–•–∏—â–Ω–∏–∫–∏) - —Å—Ç–∞—è, –ø–æ –Ω–æ—á–∞–º —Å—ä–µ–¥–∞–µ—Ç –ø–æ –∑–≤–µ—Ä—é\n"
            "ü¶ä –õ–∏—Å–∞ (–•–∏—â–Ω–∏–∫–∏) - –≤–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã, –¥–≤–∞–∂–¥—ã –æ–±–≤–æ—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–≤–µ—Ä—å —É—Ö–æ–¥–∏—Ç\n"
            "üê∞ –ó–∞–π—Ü—ã (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –º–∏—Ä–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏, —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "ü¶´ –ö—Ä–æ—Ç (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - —Ä–æ–µ—Ç –Ω–æ—Ä–∫–∏, —É–∑–Ω–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π\n"
            "ü¶¶ –ë–æ–±—ë—Ä (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n\n"
            "üåô –ù–æ—á–Ω—ã–µ —Ñ–∞–∑—ã: –í–æ–ª–∫–∏ ‚Üí –õ–∏—Å–∞ ‚Üí –ë–æ–±—ë—Ä ‚Üí –ö—Ä–æ—Ç\n"
            "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ —Ñ–∞–∑—ã: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "üèÜ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"
        )
        await update.message.reply_text(rules_text)
    
    async def join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or str(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ
        if user_id in self.player_games:
            other_chat_id = self.player_games[user_id]
            if other_chat_id != chat_id:
                await update.message.reply_text(
                    "‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!"
                )
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id not in self.games:
            self.games[chat_id] = Game(chat_id)
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])
        
        game = self.games[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–∞
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text(
                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        if game.add_player(user_id, username):
            self.player_games[user_id] = chat_id
            await update.message.reply_text(
                f"‚úÖ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
                f"–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{game.MAX_PLAYERS if hasattr(game, 'MAX_PLAYERS') else 12}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤."
            )
    
    async def leave(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leave"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or str(user_id)
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!"
            )
            return
        
        game = self.games[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–∞
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text(
                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ
        if user_id not in game.players:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!"
            )
            return
        
        # –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É
        if game.leave_game(user_id):
            # –£–¥–∞–ª—è–µ–º –∏–∑ player_games
            if user_id in self.player_games:
                del self.player_games[user_id]
            
            await update.message.reply_text(
                f"üëã {username} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n"
                f"–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{12}"
            )
            
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞, —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
            if not game.can_start_game():
                await update.message.reply_text(
                    "‚ö†Ô∏è –ò–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞. –ò–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞."
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É."
            )
    
    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_game"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            )
            return
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
            )
            return
        
        game = self.games[chat_id]
        
        if not game.can_start_game():
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤."
            )
            return
        
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text(
                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!"
            )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        if game.start_game():
            await self.start_night_phase(update, context, game)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")
    
    async def end_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end_game - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!"
            )
            return
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
            )
            return
        
        game = self.games[chat_id]
        
        if game.phase == GamePhase.WAITING:
            await update.message.reply_text(
                "‚ùå –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_game —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
            )
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        await self.end_game_internal(update, context, game, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")
    
    async def force_end(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /force_end - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!"
            )
            return
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
            )
            return
        
        game = self.games[chat_id]
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await self.end_game_internal(update, context, game, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")
    
    async def end_game_internal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game, reason: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
        game.phase = GamePhase.GAME_OVER
        
        await update.message.reply_text(
            f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìã –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
            f"–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}\n"
            f"–§–∞–∑–∞: {game.phase.value}"
        )
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        for player_id in game.players:
            if player_id in self.player_games:
                del self.player_games[player_id]
        
        chat_id = game.chat_id
        del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]
    
    async def start_night_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É"""
        await update.message.reply_text(
            "üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å –≤ –ª–µ—Å—É...\n"
            "–í—Å–µ –∑–≤–µ—Ä–∏ –∑–∞—Å—ã–ø–∞—é—Ç, –∫—Ä–æ–º–µ –Ω–æ—á–Ω—ã—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π.\n\n"
            "üé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –∏—Ö —Ä–æ–ª—å—é
        for player in game.players.values():
            role_info = self.get_role_info(player.role)
            try:
                await context.bot.send_message(
                    chat_id=player.user_id,
                    text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']}\n\n{role_info['description']}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –Ω–æ—á—å, –≤–æ–ª–∫–∏ –∑–Ω–∞–∫–æ–º—è—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
        wolves = game.get_players_by_role(Role.WOLF)
        if len(wolves) > 1:
            wolves_text = "üê∫ –í–æ–ª–∫–∏, –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º:\n"
            for wolf in wolves:
                wolves_text += f"‚Ä¢ {wolf.username}\n"
            
            for wolf in wolves:
                try:
                    await context.bot.send_message(
                        chat_id=wolf.user_id,
                        text=wolves_text
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ª–∫—É {wolf.user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        await self.send_night_actions_to_players(context, game)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã
        asyncio.create_task(self.night_phase_timer(update, context, game))
    
    async def night_phase_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã"""
        await asyncio.sleep(60)  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–µ—Ä–≤—É—é –Ω–æ—á—å
        
        if game.phase == GamePhase.NIGHT:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            await self.process_night_phase(update, context, game)
            await self.start_day_phase(update, context, game)
    
    async def start_day_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Ñ–∞–∑—É"""
        game.start_day()
        
        await update.message.reply_text(
            "‚òÄÔ∏è –í–æ—Å—Ö–æ–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ! –õ–µ—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è.\n\n"
            "üå≤ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–µ—à–∏—Ç—å, –∫–æ–≥–æ –∏–∑–≥–Ω–∞—Ç—å."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
        asyncio.create_task(self.day_phase_timer(update, context, game))
    
    async def day_phase_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã"""
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        
        if game.phase == GamePhase.DAY:
            await self.start_voting_phase(update, context, game)
    
    async def start_voting_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–∞–∑—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        game.start_voting()
        
        alive_players = game.get_alive_players()
        if len(alive_players) < 2:
            await self.end_game(update, context, game)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        keyboard = []
        for player in alive_players:
            keyboard.append([InlineKeyboardButton(
                f"üó≥Ô∏è {player.username}",
                callback_data=f"vote_{player.user_id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üó≥Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∑–≤–µ—Ä—è –∏–∑ –ª–µ—Å–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–≥–Ω–∞—Ç—å:",
            reply_markup=reply_markup
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        asyncio.create_task(self.voting_timer(update, context, game))
    
    async def voting_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        
        if game.phase == GamePhase.VOTING:
            await self.process_voting_results(update, context, game)
    
    async def process_voting_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        exiled_player = game.process_voting()
        
        if exiled_player:
            await update.message.reply_text(
                f"üö´ {exiled_player.username} –∏–∑–≥–Ω–∞–Ω –∏–∑ –ª–µ—Å–∞!\n"
                f"–ï–≥–æ —Ä–æ–ª—å: {self.get_role_info(exiled_player.role)['name']}"
            )
        else:
            await update.message.reply_text(
                "ü§ù –ù–∏—á—å—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏! –ù–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
        winner = game.check_game_end()
        if winner:
            await self.end_game_winner(update, context, game, winner)
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—á—å
            await self.start_new_night(update, context, game)
    
    async def start_new_night(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –Ω–æ—á—å"""
        game.start_night()
        
        await update.message.reply_text(
            "üåô –°–Ω–æ–≤–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å –≤ –ª–µ—Å—É...\n"
            "–ù–æ—á–Ω—ã–µ –æ–±–∏—Ç–∞—Ç–µ–ª–∏ —Å–æ–≤–µ—Ä—à–∞—é—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        await self.send_night_actions_to_players(context, game)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã
        asyncio.create_task(self.night_phase_timer(update, context, game))
    
    async def end_game_winner(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game, winner: Optional[Team] = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
        game.phase = GamePhase.GAME_OVER
        
        if winner:
            winner_text = "üèÜ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏!" if winner == Team.HERBIVORES else "üèÜ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏!"
            await update.message.reply_text(
                f"üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! {winner_text}\n\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n"
                f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
                f"–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}"
            )
        else:
            await update.message.reply_text(
                "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        for player_id in game.players:
            if player_id in self.player_games:
                del self.player_games[player_id]
        
        chat_id = game.chat_id
        del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]
    
    async def handle_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        
        if chat_id not in self.games:
            return
        
        game = self.games[chat_id]
        
        if game.phase != GamePhase.VOTING:
            await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ü–µ–ª–∏ –∏–∑ callback_data
        target_id = int(query.data.split('_')[1])
        
        if game.vote(user_id, target_id):
            await query.edit_message_text(
                f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞."
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å!")
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
            )
            return
        
        game = self.games[chat_id]
        
        if game.phase == GamePhase.WAITING:
            status_text = (
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{12}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞: {MIN_PLAYERS}\n\n"
                "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n"
            )
            
            for player in game.players.values():
                status_text += f"‚Ä¢ {player.username}\n"
            
            if game.can_start_game():
                status_text += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            else:
                status_text += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â–µ {MIN_PLAYERS - len(game.players)} –∏–≥—Ä–æ–∫–æ–≤"
        else:
            phase_names = {
                GamePhase.NIGHT: "üåô –ù–æ—á—å",
                GamePhase.DAY: "‚òÄÔ∏è –î–µ–Ω—å",
                GamePhase.VOTING: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                GamePhase.GAME_OVER: "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            }
            
            status_text = (
                f"üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç\n\n"
                f"üìä –§–∞–∑–∞: {phase_names.get(game.phase, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                "–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
            )
            
            for player in game.get_alive_players():
                status_text += f"‚Ä¢ {player.username}\n"
        
        await update.message.reply_text(status_text)
    
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"
            )
            return
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
            )
            return
        
        game = self.games[chat_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã", callback_data="settings_timers")],
            [InlineKeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", callback_data="settings_roles")],
            [InlineKeyboardButton("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="settings_reset")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=reply_markup
        )
    
    async def send_night_actions_to_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞–º —Å –Ω–æ—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏"""
        chat_id = game.chat_id
        if chat_id in self.night_interfaces:
            night_interface = self.night_interfaces[chat_id]
            await night_interface.send_role_reminders(context)
    
    async def process_night_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É"""
        chat_id = game.chat_id
        if chat_id in self.night_actions:
            night_actions = self.night_actions[chat_id]
            night_interface = self.night_interfaces[chat_id]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            results = night_actions.process_all_actions()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await night_interface.send_night_results(context, results)
            
            # –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á–∏
            night_actions.clear_actions()
    
    async def handle_night_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ–∫
        if user_id in self.player_games:
            chat_id = self.player_games[user_id]
                    if chat_id in self.night_interfaces:
            night_interface = self.night_interfaces[chat_id]
            await night_interface.handle_night_action(update, context)
    
    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return
        
        game = self.games[chat_id]
        data = query.data.split('_')[1]
        
        if data == "timers":
            await self.show_timer_settings(query, context, game)
        elif data == "roles":
            await self.show_role_settings(query, context, game)
        elif data == "reset":
            await self.reset_game_stats(query, context, game)
        elif data == "close":
            await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    
    async def show_timer_settings(self, query, context, game):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üåô –ù–æ—á—å: 60—Å", callback_data="timer_night_60")],
            [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å: 5–º–∏–Ω", callback_data="timer_day_300")],
            [InlineKeyboardButton("üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: 2–º–∏–Ω", callback_data="timer_vote_120")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤\n\n"
            "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            "üåô –ù–æ—á—å: 60 —Å–µ–∫—É–Ω–¥\n"
            "‚òÄÔ∏è –î–µ–Ω—å: 5 –º–∏–Ω—É—Ç\n"
            "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: 2 –º–∏–Ω—É—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=reply_markup
        )
    
    async def show_role_settings(self, query, context, game):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π"""
        keyboard = [
            [InlineKeyboardButton("üê∫ –í–æ–ª–∫–∏: 25%", callback_data="role_wolves_25")],
            [InlineKeyboardButton("ü¶ä –õ–∏—Å–∞: 15%", callback_data="role_fox_15")],
            [InlineKeyboardButton("ü¶´ –ö—Ä–æ—Ç: 15%", callback_data="role_mole_15")],
            [InlineKeyboardButton("ü¶¶ –ë–æ–±—ë—Ä: 10%", callback_data="role_beaver_10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π\n\n"
            "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            "üê∫ –í–æ–ª–∫–∏: 25%\n"
            "ü¶ä –õ–∏—Å–∞: 15%\n"
            "ü¶´ –ö—Ä–æ—Ç: 15%\n"
            "ü¶¶ –ë–æ–±—ë—Ä: 10%\n"
            "üê∞ –ó–∞–π—Ü—ã: 35% (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def reset_game_stats(self, query, context, game):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã"""
        if game.phase != GamePhase.WAITING:
            await query.edit_message_text(
                "‚ùå –ù–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã."
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        game.current_round = 0
        game.game_start_time = None
        game.phase_end_time = None
        
        await query.edit_message_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
            "‚úÖ –†–∞—É–Ω–¥: 0\n"
            "‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: —Å–±—Ä–æ—à–µ–Ω–æ\n"
            "‚úÖ –¢–∞–π–º–µ—Ä—ã: —Å–±—Ä–æ—à–µ–Ω—ã"
        )
    
    async def handle_settings_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return
        
        game = self.games[chat_id]
        data = query.data
        
        if data == "settings_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await self.settings(update, context)
        elif data.startswith("timer_"):
            await self.handle_timer_setting(query, context, game, data)
        elif data.startswith("role_"):
            await self.handle_role_setting(query, context, game, data)
    
    async def handle_timer_setting(self, query, context, game, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤"""
        parts = data.split('_')
        timer_type = parts[1]
        current_value = int(parts[2])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if timer_type == "night":
            options = [30, 45, 60, 90, 120]
            current = 60
        elif timer_type == "day":
            options = [180, 300, 420, 600]
            current = 300
        elif timer_type == "vote":
            options = [60, 90, 120, 180]
            current = 120
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–∞–π–º–µ—Ä–∞!")
            return
        
        keyboard = []
        for option in options:
            mark = "‚úÖ " if option == current else ""
            keyboard.append([InlineKeyboardButton(
                f"{mark}{option} —Å–µ–∫" if option < 60 else f"{mark}{option//60} –º–∏–Ω",
                callback_data=f"set_timer_{timer_type}_{option}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        timer_names = {"night": "üåô –ù–æ—á—å", "day": "‚òÄÔ∏è –î–µ–Ω—å", "vote": "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"}
        await query.edit_message_text(
            f"‚è±Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞: {timer_names.get(timer_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current} —Å–µ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def handle_role_setting(self, query, context, game, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        parts = data.split('_')
        role_type = parts[1]
        current_value = int(parts[2])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if role_type == "wolves":
            options = [20, 25, 30, 35]
            current = 25
        elif role_type == "fox":
            options = [10, 15, 20, 25]
            current = 15
        elif role_type == "mole":
            options = [10, 15, 20, 25]
            current = 15
        elif role_type == "beaver":
            options = [5, 10, 15, 20]
            current = 10
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å!")
            return
        
        keyboard = []
        for option in options:
            mark = "‚úÖ " if option == current else ""
            keyboard.append([InlineKeyboardButton(
                f"{mark}{option}%",
                callback_data=f"set_role_{role_type}_{option}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        role_names = {"wolves": "üê∫ –í–æ–ª–∫–∏", "fox": "ü¶ä –õ–∏—Å–∞", "mole": "ü¶´ –ö—Ä–æ—Ç", "beaver": "ü¶¶ –ë–æ–±—ë—Ä"}
        await query.edit_message_text(
            f"üé≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {role_names.get(role_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current}%\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def handle_set_values(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return
        
        game = self.games[chat_id]
        data = query.data.split('_')
        
        if len(data) != 4:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        setting_type = data[1]  # timer –∏–ª–∏ role
        setting_name = data[2]  # night, day, vote, wolves, fox, mole, beaver
        new_value = int(data[3])
        
        if setting_type == "timer":
            await self.apply_timer_setting(query, context, game, setting_name, new_value)
        elif setting_type == "role":
            await self.apply_role_setting(query, context, game, setting_name, new_value)
    
    async def apply_timer_setting(self, query, context, game, timer_type, new_value):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        
        timer_names = {"night": "üåô –ù–æ—á—å", "day": "‚òÄÔ∏è –î–µ–Ω—å", "vote": "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"}
        time_text = f"{new_value} —Å–µ–∫" if new_value < 60 else f"{new_value//60} –º–∏–Ω"
        
        await query.edit_message_text(
            f"‚úÖ –¢–∞–π–º–µ—Ä {timer_names.get(timer_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {time_text}!\n\n"
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ."
        )
    
    async def apply_role_setting(self, query, context, game, role_type, new_value):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        
        role_names = {"wolves": "üê∫ –í–æ–ª–∫–∏", "fox": "ü¶ä –õ–∏—Å–∞", "mole": "ü¶´ –ö—Ä–æ—Ç", "beaver": "ü¶¶ –ë–æ–±—ë—Ä"}
        
        await query.edit_message_text(
            f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_names.get(role_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}%!\n\n"
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ."
        )
    
    def get_role_info(self, role: Role) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("rules", self.rules))
        application.add_handler(CommandHandler("join", self.join))
        application.add_handler(CommandHandler("leave", self.leave))
        application.add_handler(CommandHandler("start_game", self.start_game))
        application.add_handler(CommandHandler("end_game", self.end_game))
        application.add_handler(CommandHandler("force_end", self.force_end))
        application.add_handler(CommandHandler("settings", self.settings))
        application.add_handler(CommandHandler("status", self.status))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query
        application.add_handler(CallbackQueryHandler(self.handle_vote, pattern="^vote_"))
        application.add_handler(CallbackQueryHandler(self.handle_night_action, pattern="^night_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern="^settings_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings_back, pattern="^(settings_back|timer_|role_)"))
        application.add_handler(CallbackQueryHandler(self.handle_set_values, pattern="^set_(timer|role)_"))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == "__main__":
    bot = ForestMafiaBot()
    bot.run()
