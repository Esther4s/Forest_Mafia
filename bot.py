#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
from typing import Dict, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

from game_logic import Game, GamePhase, Role, Team, Player  # –≤–∞—à–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
from config import BOT_TOKEN, MIN_PLAYERS, TEST_MODE, TEST_MIN_PLAYERS  # –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from night_actions import NightActions
from night_interface import NightInterface
from global_settings import GlobalSettings # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GlobalSettings

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ForestMafiaBot:
    def __init__(self):
        # chat_id -> Game
        self.games: Dict[int, Game] = {}
        # user_id -> chat_id
        self.player_games: Dict[int, int] = {}
        # chat_id -> NightActions
        self.night_actions: Dict[int, NightActions] = {}
        # chat_id -> NightInterface
        self.night_interfaces: Dict[int, NightInterface] = {}
        # Global settings instance
        self.global_settings = GlobalSettings()

    # ---------------- basic commands ----------------
    async def welcome_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="welcome_start_game")],
            [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="welcome_rules")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data="welcome_status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = (
            "üå≤ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å–Ω—É—é –í–æ–∑–Ω—é!* üå≤\n\n"
            "üé≠ –≠—Ç–æ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏!\n\n"
            "üê∫ *–•–∏—â–Ω–∏–∫–∏:* –í–æ–ª–∫–∏ –∏ –õ–∏—Å–∞\n"
            "üê∞ *–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:* –ó–∞–π—Ü—ã, –ö—Ä–æ—Ç –∏ –ë–æ–±—ë—Ä\n\n"
            "üéØ *–¶–µ–ª—å:* –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!\n\n"
            f"üë• –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {self.global_settings.get_min_players()} –∏–≥—Ä–æ–∫–æ–≤\n"
            f"{'üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù' if self.global_settings.is_test_mode() else ''}\n"
            "‚è∞ –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–æ—á–Ω—ã—Ö –∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ñ–∞–∑\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )

        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        rules_text = (
            "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å–Ω–∞—è –í–æ–∑–Ω—è':\n\n"
            "üé≠ –†–æ–ª–∏:\n"
            "üê∫ –í–æ–ª–∫–∏ (–•–∏—â–Ω–∏–∫–∏) - —Å—Ç–∞—è, –ø–æ –Ω–æ—á–∞–º —Å—ä–µ–¥–∞–µ—Ç –ø–æ –∑–≤–µ—Ä—é\n"
            "ü¶ä –õ–∏—Å–∞ (–•–∏—â–Ω–∏–∫–∏) - –≤–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã\n"
            "üê∞ –ó–∞–π—Ü—ã (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –º–∏—Ä–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏\n"
            "ü¶´ –ö—Ä–æ—Ç (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - —Ä–æ–µ—Ç –Ω–æ—Ä–∫–∏, —É–∑–Ω–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π\n"
            "ü¶¶ –ë–æ–±—ë—Ä (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n\n"
            "üåô –ù–æ—á–Ω—ã–µ —Ñ–∞–∑—ã: –í–æ–ª–∫–∏ ‚Üí –õ–∏—Å–∞ ‚Üí –ë–æ–±—ë—Ä ‚Üí –ö—Ä–æ—Ç\n"
            "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ —Ñ–∞–∑—ã: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "üèÜ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"
        )
        await update.message.reply_text(rules_text)

    # ---------------- callback helpers ----------------
    async def join_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        chat_id = query.message.chat.id
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.full_name or str(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:  # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–º.")
            return

        # already in another game?
        if user_id in self.player_games:
            other_chat = self.player_games[user_id]
            if other_chat != chat_id:
                try:
                    other_chat_info = await context.bot.get_chat(other_chat)
                    chat_name = other_chat_info.title or f"–ß–∞—Ç {other_chat}"
                except:
                    chat_name = f"–ß–∞—Ç {other_chat}"
                await query.edit_message_text(f"‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!\n–ß–∞—Ç: {chat_name}")
                return
            else:
                # –ò–≥—Ä–æ–∫ —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                game = self.games[chat_id]
                max_players = getattr(game, "MAX_PLAYERS", 12)
                
                keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="welcome_start_game")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}",
                    reply_markup=reply_markup
                )
                return

        # create game if needed
        if chat_id not in self.games:
            self.games[chat_id] = Game(chat_id)
            self.games[chat_id].is_test_mode = self.global_settings.is_test_mode()
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])

        game = self.games[chat_id]

        if game.phase != GamePhase.WAITING:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return

        if game.add_player(user_id, username):
            self.player_games[user_id] = chat_id
            max_players = getattr(game, "MAX_PLAYERS", 12)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="welcome_start_game")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            join_text = f"‚úÖ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(game.players) == 1:
                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=join_text,
                    reply_markup=reply_markup
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–≥—Ä–µ
                game.pinned_message_id = message.message_id
                
                try:
                    await context.bot.pin_chat_message(
                        chat_id=chat_id,
                        message_id=message.message_id,
                        disable_notification=True
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ.")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=game.pinned_message_id,
                            text=join_text,
                            reply_markup=reply_markup
                        )
                        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        await query.edit_message_text(join_text, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(join_text, reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤.")

    async def status_from_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        chat_id = query.message.chat.id

        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
            return

        game = self.games[chat_id]

        if game.phase == GamePhase.WAITING:
            min_players = self.global_settings.get_min_players()
            status_text = (
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{getattr(game, 'MAX_PLAYERS', 12)}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞: {min_players}\n\n"
                "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n"
            )
            for player in game.players.values():
                status_text += f"‚Ä¢ {player.username}\n"
            if game.can_start_game():
                status_text += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            else:
                status_text += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, min_players - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
        else:
            phase_names = {
                GamePhase.NIGHT: "üåô –ù–æ—á—å",
                GamePhase.DAY: "‚òÄÔ∏è –î–µ–Ω—å",
                GamePhase.VOTING: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                GamePhase.GAME_OVER: "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            }
            status_text = (
                f"üéÆ –ò–≥—Ä–∞ –∏–¥—ë—Ç\n\n"
                f"üìä –§–∞–∑–∞: {phase_names.get(game.phase, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                "–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
            )
            for p in game.get_alive_players():
                status_text += f"‚Ä¢ {p.username}\n"

        await query.edit_message_text(status_text)

    # ---------------- join / leave / status ----------------
    async def join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.full_name or str(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:  # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–º.")
            return

        # already in another game?
        if user_id in self.player_games:
            other_chat = self.player_games[user_id]
            if other_chat != chat_id:
                try:
                    other_chat_info = await context.bot.get_chat(other_chat)
                    chat_name = other_chat_info.title or f"–ß–∞—Ç {other_chat}"
                except:
                    chat_name = f"–ß–∞—Ç {other_chat}"
                await update.message.reply_text(f"‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!\n–ß–∞—Ç: {chat_name}")
                return
            else:
                # –ò–≥—Ä–æ–∫ —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                game = self.games[chat_id]
                max_players = getattr(game, "MAX_PLAYERS", 12)
                
                keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="welcome_start_game")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}",
                    reply_markup=reply_markup
                )
                return

        # create game if needed
        if chat_id not in self.games:
            self.games[chat_id] = Game(chat_id)
            self.games[chat_id].is_test_mode = self.global_settings.is_test_mode()
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])

        game = self.games[chat_id]

        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return

        if game.add_player(user_id, username):
            self.player_games[user_id] = chat_id
            max_players = getattr(game, "MAX_PLAYERS", 12)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="welcome_start_game")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            join_text = f"‚úÖ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{max_players}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(game.players) == 1:
                message = await update.message.reply_text(join_text, reply_markup=reply_markup)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–≥—Ä–µ
                game.pinned_message_id = message.message_id
                
                try:
                    await context.bot.pin_chat_message(
                        chat_id=chat_id,
                        message_id=message.message_id,
                        disable_notification=True
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=game.pinned_message_id,
                            text=join_text,
                            reply_markup=reply_markup
                        )
                        await update.message.reply_text("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        await update.message.reply_text(join_text, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(join_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤.")

    async def leave(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.full_name or str(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return

        game = self.games[chat_id]

        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ–π—á–∞—Å.")
            return

        if user_id not in game.players:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return

        if game.leave_game(user_id):
            if user_id in self.player_games:
                del self.player_games[user_id]
            await update.message.reply_text(f"üëã {username} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{getattr(game, 'MAX_PLAYERS', 12)}")
            if not game.can_start_game():
                await update.message.reply_text("‚ö†Ô∏è –ò–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞. –ò–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞.")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É.")

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == update.effective_user.id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
            return

        game = self.games[chat_id]

        if game.phase == GamePhase.WAITING:
            min_players = self.global_settings.get_min_players()
            status_text = (
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{getattr(game, 'MAX_PLAYERS', 12)}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞: {min_players}\n\n"
                "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n"
            )
            for player in game.players.values():
                status_text += f"‚Ä¢ {player.username}\n"
            if game.can_start_game():
                status_text += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            else:
                status_text += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â—ë {max(0, min_players - len(game.players))} –∏–≥—Ä–æ–∫–æ–≤"
        else:
            phase_names = {
                GamePhase.NIGHT: "üåô –ù–æ—á—å",
                GamePhase.DAY: "‚òÄÔ∏è –î–µ–Ω—å",
                GamePhase.VOTING: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                GamePhase.GAME_OVER: "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            }
            status_text = (
                f"üéÆ –ò–≥—Ä–∞ –∏–¥—ë—Ç\n\n"
                f"üìä –§–∞–∑–∞: {phase_names.get(game.phase, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                "–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
            )
            for p in game.get_alive_players():
                status_text += f"‚Ä¢ {p.username}\n"

        await update.message.reply_text(status_text)

    # ---------------- starting / ending game ----------------
    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        game = self.games[chat_id]

        min_players = self.global_settings.get_min_players()
        if not game.can_start_game():
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players} –∏–≥—Ä–æ–∫–æ–≤.")
            return

        if game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
            return

        if game.start_game():
            await self.start_night_phase(update, context, game)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")

    async def end_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        game = self.games[chat_id]

        if game.phase == GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_game —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
            return

        await self._end_game_internal(update, context, game, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")

    async def force_end(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—É!")
            return

        if chat_id not in self.games:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        game = self.games[chat_id]
        await self._end_game_internal(update, context, game, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É")

    async def clear_all_games(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞ (–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ)
        if user_id != 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à user_id
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!")
            return

        games_count = len(self.games)
        players_count = len(self.player_games)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        self.games.clear()
        self.player_games.clear()
        self.night_actions.clear()
        self.night_interfaces.clear()

        await update.message.reply_text(
            f"üßπ –í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã!\n\n"
            f"üìä –ë—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: {games_count}\n"
            f"üë• –ë—ã–ª–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {players_count}"
        )

    async def _end_game_internal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game, reason: str):
        game.phase = GamePhase.GAME_OVER

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
            try:
                await context.bot.unpin_chat_message(
                    chat_id=game.chat_id,
                    message_id=game.pinned_message_id
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await update.message.reply_text(
            f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìã –ü—Ä–∏—á–∏–Ω–∞: {reason}\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}\n–§–∞–∑–∞: {game.phase.value}"
        )

        # –æ—á–∏—â–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
        for pid in list(game.players.keys()):
            if pid in self.player_games:
                del self.player_games[pid]

        chat_id = game.chat_id
        if chat_id in self.games:
            del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]

    # ---------------- night/day/vote flow ----------------
    async def start_night_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        game.start_night()
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
            try:
                await context.bot.unpin_chat_message(
                    chat_id=game.chat_id,
                    message_id=game.pinned_message_id
                )
                game.pinned_message_id = None
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        await update.message.reply_text("üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å –≤ –ª–µ—Å—É...\n–í—Å–µ –∑–≤–µ—Ä–∏ –∑–∞—Å—ã–ø–∞—é—Ç, –∫—Ä–æ–º–µ –Ω–æ—á–Ω—ã—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π.\n\nüé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –õ–° —Å —Ä–æ–ª—è–º–∏
        for player in game.players.values():
            role_info = self.get_role_info(player.role)
            try:
                await context.bot.send_message(chat_id=player.user_id, text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']}\n\n{role_info['description']}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

        # Wolves intro
        wolves = game.get_players_by_role(Role.WOLF)
        if len(wolves) > 1:
            wolves_text = "üê∫ –í–æ–ª–∫–∏, –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º:\n" + "\n".join(f"‚Ä¢ {w.username}" for w in wolves)
            for wolf in wolves:
                try:
                    await context.bot.send_message(chat_id=wolf.user_id, text=wolves_text)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ª–∫—É {wolf.user_id}: {e}")

        # –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await self.send_night_actions_to_players(context, game)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await self.send_role_button_to_passive_players(context, game)

        # —Ç–∞–π–º–µ—Ä –Ω–æ—á–∏ (–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ç–∞—Å–∫)
        asyncio.create_task(self.night_phase_timer(update, context, game))

    async def night_phase_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        await asyncio.sleep(60)  # –ø–µ—Ä–≤–∞—è –Ω–æ—á—å 60 —Å–µ–∫
        if game.phase == GamePhase.NIGHT:
            await self.process_night_phase(update, context, game)
            await self.start_day_phase(update, context, game)

    async def start_day_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        game.start_day()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
        keyboard = [
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="day_end_discussion")],
            [InlineKeyboardButton("üê∫ –í—ã–±—Ä–∞—Ç—å –≤–æ–ª–∫–∞", callback_data="day_choose_wolf")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "‚òÄÔ∏è –í–æ—Å—Ö–æ–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ! –õ–µ—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è.\n\n"
            "üå≤ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–µ—à–∏—Ç—å, –∫–æ–≥–æ –∏–∑–≥–Ω–∞—Ç—å.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∑–æ–π:",
            reply_markup=reply_markup
        )
        asyncio.create_task(self.day_phase_timer(update, context, game))

    async def day_phase_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        await asyncio.sleep(300)
        if game.phase == GamePhase.DAY:
            await self.start_voting_phase(update, context, game)

    async def start_voting_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        game.start_voting()

        alive_players = game.get_alive_players()
        if len(alive_players) < 2:
            await self._end_game_internal(update, context, game, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
        chat_message = (
            "üó≥Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ!\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∑–≤–µ—Ä—è –∏–∑ –ª–µ—Å–∞.\n\n"
            "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
        )
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(chat_message)
        elif hasattr(update, 'callback_query') and update.callback_query:
            await context.bot.send_message(chat_id=game.chat_id, text=chat_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∂–∏–≤–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –ª–∏—á–∫—É
        for voter in alive_players:
            keyboard = [[InlineKeyboardButton(f"üó≥Ô∏è {p.username}", callback_data=f"vote_{p.user_id}")] for p in alive_players]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=voter.user_id,
                    text=(
                        "üó≥Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ!\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–≥–Ω–∞—Ç—å –∏–∑ –ª–µ—Å–∞.\n"
                        "–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:"
                    ),
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫—É {voter.user_id}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        game.total_voters = len(alive_players)
        game.voting_type = "exile"  # –ü–æ–º–µ—á–∞–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        
        asyncio.create_task(self.voting_timer(context, game, update))

    async def start_wolf_voting_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –≤–æ–ª–∫–∞"""
        game.start_voting()

        alive_players = game.get_alive_players()
        if len(alive_players) < 2:
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
            elif hasattr(update, 'callback_query') and update.callback_query:
                await context.bot.send_message(chat_id=game.chat_id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
        chat_message = (
            "üê∫ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ '–ö—Ç–æ –≤–æ–ª–∫?' –Ω–∞—á–∞–ª–æ—Å—å!\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞ —Ç–æ–≥–æ, –∫–æ–≥–æ –≤—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω –≤–æ–ª–∫.\n"
            "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ù–ï –±—É–¥–µ—Ç –∏–∑–≥–Ω–∞–Ω, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—è–≤–∏—Ç—å –≤–æ–ª–∫–∞!\n\n"
            "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
        )
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(chat_message)
        elif hasattr(update, 'callback_query') and update.callback_query:
            await context.bot.send_message(chat_id=game.chat_id, text=chat_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∂–∏–≤–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –ª–∏—á–∫—É
        for voter in alive_players:
            keyboard = [[InlineKeyboardButton(f"üê∫ {p.username}", callback_data=f"wolf_vote_{p.user_id}")] for p in alive_players]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=voter.user_id,
                    text=(
                        "üê∫ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ '–ö—Ç–æ –≤–æ–ª–∫?'!\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω –≤–æ–ª–∫.\n"
                        "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ù–ï –±—É–¥–µ—Ç –∏–∑–≥–Ω–∞–Ω - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—è–≤–∏—Ç—å –≤–æ–ª–∫–∞!\n\n"
                        "–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:"
                    ),
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫—É {voter.user_id}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        game.total_voters = len(alive_players)
        game.voting_type = "wolf"  # –ü–æ–º–µ—á–∞–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        
        asyncio.create_task(self.wolf_voting_timer(context, game))

    async def wolf_voting_timer(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –≤–æ–ª–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        for _ in range(120):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
            if game.phase == GamePhase.VOTING and hasattr(game, 'total_voters'):
                if len(game.votes) >= game.total_voters:
                    # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ
                    await context.bot.send_message(
                        chat_id=game.chat_id, 
                        text="‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ."
                    )
                    await self.process_wolf_voting_results(context, game)
                    return
            
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –≤—ã—Ö–æ–¥–∏–º
            if game.phase != GamePhase.VOTING:
                return
        
        # –í—Ä–µ–º—è –≤—ã—à–ª–æ
        if game.phase == GamePhase.VOTING:
            await self.process_wolf_voting_results(context, game)

    async def voting_timer(self, context: ContextTypes.DEFAULT_TYPE, game: Game, update: Update):
        """–¢–∞–π–º–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        for _ in range(120):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç
            await asyncio.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
            if game.phase == GamePhase.VOTING and hasattr(game, 'total_voters'):
                if len(game.votes) >= game.total_voters:
                    # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ
                    await context.bot.send_message(
                        chat_id=game.chat_id, 
                        text="‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ."
                    )
                    await self.process_voting_results(update, context, game)
                    return
            
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –≤—ã—Ö–æ–¥–∏–º
            if game.phase != GamePhase.VOTING:
                return
        
        # –í—Ä–µ–º—è –≤—ã—à–ª–æ
        if game.phase == GamePhase.VOTING:
            await self.process_voting_results(update, context, game)

    async def process_voting_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        exiled_player = game.process_voting()
        if exiled_player:
            await update.message.reply_text(f"üö´ {exiled_player.username} –∏–∑–≥–Ω–∞–Ω –∏–∑ –ª–µ—Å–∞!\n–ï–≥–æ —Ä–æ–ª—å: {self.get_role_info(exiled_player.role)['name']}")
        else:
            await update.message.reply_text("ü§ù –ù–∏—á—å—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏! –ù–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω.")

        # –û—á–∏—â–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if hasattr(game, 'total_voters'):
            delattr(game, 'total_voters')
        if hasattr(game, 'voting_type'):
            delattr(game, 'voting_type')

        winner = game.check_game_end()
        if winner:
            await self.end_game_winner(update, context, game, winner)
        else:
            await self.start_new_night(update, context, game)

    async def process_wolf_voting_results(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –≤–æ–ª–∫–∞"""
        if not game.votes:
            await context.bot.send_message(
                chat_id=game.chat_id,
                text="ü§∑‚Äç‚ôÇÔ∏è –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ '–ö—Ç–æ –≤–æ–ª–∫?'!"
            )
            game.start_day()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ
            return

        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        vote_counts = {}
        for target_id in game.votes.values():
            vote_counts[target_id] = vote_counts.get(target_id, 0) + 1

        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        max_votes = max(vote_counts.values())
        max_vote_players = [pid for pid, votes in vote_counts.items() if votes == max_votes]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(max_vote_players) > 1:
            # –ù–∏—á—å—è
            suspects = [game.players[pid].username for pid in max_vote_players]
            result_text = f"ü§î –ù–∏—á—å—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ '–ö—Ç–æ –≤–æ–ª–∫?'!\n\n–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ: {', '.join(suspects)}"
        else:
            # –ï—Å—Ç—å –ª–∏–¥–µ—Ä
            suspect_id = max_vote_players[0]
            suspect = game.players[suspect_id]
            votes = vote_counts[suspect_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –≤–æ–ª–∫
            is_actually_wolf = suspect.role == Role.WOLF
            
            if is_actually_wolf:
                result_text = (f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è '–ö—Ç–æ –≤–æ–ª–∫?':\n\n"
                              f"üê∫ {suspect.username} –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤ ({votes}) –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∫–∞–∑–∞–ª—Å—è –í–û–õ–ö–û–ú!\n"
                              f"üëè –ñ–∏—Ç–µ–ª–∏ —É–≥–∞–¥–∞–ª–∏!")
            else:
                result_text = (f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è '–ö—Ç–æ –≤–æ–ª–∫?':\n\n"
                              f"üê∞ {suspect.username} –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤ ({votes}), –Ω–æ –æ–∫–∞–∑–∞–ª—Å—è {self.get_role_info(suspect.role)['name']}!\n"
                              f"üòÖ –ñ–∏—Ç–µ–ª–∏ –æ—à–∏–±–ª–∏—Å—å!")

        await context.bot.send_message(chat_id=game.chat_id, text=result_text)
        
        # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ
        game.votes.clear()
        if hasattr(game, 'total_voters'):
            delattr(game, 'total_voters')
        if hasattr(game, 'voting_type'):
            delattr(game, 'voting_type')
        game.start_day()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
        keyboard = [
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="day_end_discussion")],
            [InlineKeyboardButton("üê∫ –í—ã–±—Ä–∞—Ç—å –≤–æ–ª–∫–∞", callback_data="day_choose_wolf")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=game.chat_id,
            text="‚òÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∑–æ–π:",
            reply_markup=reply_markup
        )

    async def start_new_night(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        await self.start_night_phase(update, context, game)

    async def end_game_winner(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game, winner: Optional[Team] = None):
        game.phase = GamePhase.GAME_OVER
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        if hasattr(game, 'pinned_message_id') and game.pinned_message_id:
            try:
                await context.bot.unpin_chat_message(
                    chat_id=game.chat_id,
                    message_id=game.pinned_message_id
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        if winner:
            winner_text = "üèÜ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏!" if winner == Team.HERBIVORES else "üèÜ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏!"
            await update.message.reply_text(f"üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! {winner_text}\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}")
        else:
            await update.message.reply_text("üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

        for pid in list(game.players.keys()):
            if pid in self.player_games:
                del self.player_games[pid]

        chat_id = game.chat_id
        if chat_id in self.games:
            del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]

    # ---------------- callbacks: voting, night actions, welcome buttons ----------------
    async def handle_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ –∏–≥—Ä–æ–∫—É
        if user_id not in self.player_games:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return

        chat_id = self.player_games[user_id]
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        game = self.games[chat_id]
        if game.phase != GamePhase.VOTING:
            await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return

        target_id = int(query.data.split('_', 1)[1])
        if game.vote(user_id, target_id):
            target_player = game.players[target_id]
            await query.edit_message_text(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ: {target_player.username}\n\nüïê –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è)
            if hasattr(game, 'total_voters') and hasattr(game, 'voting_type') and game.voting_type == "exile":
                if len(game.votes) >= game.total_voters:
                    # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ
                    asyncio.create_task(self.complete_exile_voting_early(context, game, update))
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å!")

    async def handle_night_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if user_id in self.player_games:
            chat_id = self.player_games[user_id]
            if chat_id in self.night_interfaces:
                await self.night_interfaces[chat_id].handle_night_action(update, context)

    async def handle_welcome_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "welcome_start_game":
            await self.join_from_callback(query, context)
        elif query.data == "welcome_rules":
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å–Ω–∞—è –í–æ–∑–Ω—è':\n\n"
                "üé≠ –†–æ–ª–∏:\n"
                "üê∫ –í–æ–ª–∫–∏ (–•–∏—â–Ω–∏–∫–∏) - —Å—Ç–∞—è, –ø–æ –Ω–æ—á–∞–º —Å—ä–µ–¥–∞–µ—Ç –ø–æ –∑–≤–µ—Ä—é\n"
                "ü¶ä –õ–∏—Å–∞ (–•–∏—â–Ω–∏–∫–∏) - –≤–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã\n"
                "üê∞ –ó–∞–π—Ü—ã (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –º–∏—Ä–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏\n"
                "ü¶´ –ö—Ä–æ—Ç (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - —Ä–æ–µ—Ç –Ω–æ—Ä–∫–∏, —É–∑–Ω–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π\n"
                "ü¶¶ –ë–æ–±—ë—Ä (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n\n"
                "üåô –ù–æ—á–Ω—ã–µ —Ñ–∞–∑—ã: –í–æ–ª–∫–∏ ‚Üí –õ–∏—Å–∞ ‚Üí –ë–æ–±—ë—Ä ‚Üí –ö—Ä–æ—Ç\n"
                "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ —Ñ–∞–∑—ã: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
                "üèÜ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
                reply_markup=reply_markup
            )
        elif query.data == "welcome_status":
            await self.status_from_callback(query, context)
        elif query.data == "welcome_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            keyboard = [
                [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="welcome_start_game")],
                [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data="welcome_rules")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", callback_data="welcome_status")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            welcome_text = (
                "üå≤ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å–Ω—É—é –í–æ–∑–Ω—é!* üå≤\n\n"
                "üé≠ –≠—Ç–æ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏!\n\n"
                "üê∫ *–•–∏—â–Ω–∏–∫–∏:* –í–æ–ª–∫–∏ –∏ –õ–∏—Å–∞\n"
                "üê∞ *–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ:* –ó–∞–π—Ü—ã, –ö—Ä–æ—Ç –∏ –ë–æ–±—ë—Ä\n\n"
                "üéØ *–¶–µ–ª—å:* –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!\n\n"
                f"üë• –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {self.global_settings.get_min_players()} –∏–≥—Ä–æ–∫–æ–≤\n"
                f"{'üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù' if self.global_settings.is_test_mode() else ''}\n"
                "‚è∞ –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–æ—á–Ω—ã—Ö –∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ñ–∞–∑\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
            )

            await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_day_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã"""
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat.id
        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user_id)
            if chat_member.status not in ['creator', 'administrator']:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–π!")
                return
        except Exception:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!")
            return

        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
            return

        game = self.games[chat_id]

        if query.data == "day_end_discussion":
            if game.phase != GamePhase.DAY:
                await query.edit_message_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!")
                return

            await query.edit_message_text("üèÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ!")
            await self.start_voting_phase(update, context, game)

        elif query.data == "day_choose_wolf":
            if game.phase != GamePhase.DAY:
                await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –≤–æ–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑–µ!")
                return

            await query.edit_message_text("üê∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ '–ö—Ç–æ –≤–æ–ª–∫?'!")
            await self.start_wolf_voting_phase(update, context, game)

    # ---------------- settings UI (basic, non-persistent) ----------------
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        test_mode_text = "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"

        keyboard = [
            [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã", callback_data="settings_timers")],
            [InlineKeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", callback_data="settings_roles")],
            [InlineKeyboardButton(test_mode_text, callback_data="settings_toggle_test")],
            [InlineKeyboardButton("üìà –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_global")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if chat_id in self.games:
            keyboard.insert(-1, [InlineKeyboardButton("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="settings_reset")])

        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"{self.global_settings.get_settings_summary()}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        await update.message.reply_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat_id = query.message.chat.id

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        game = self.games.get(chat_id)  # –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        
        if query.data == "settings_timers":
            await self.show_timer_settings(query, context)
        elif query.data == "settings_roles":
            await self.show_role_settings(query, context)
        elif query.data == "settings_toggle_test":
            await self.toggle_test_mode(query, context, game)
        elif query.data == "settings_global":
            await self.show_global_settings(query, context)
        elif query.data == "settings_reset":
            if game:
                await self.reset_game_stats(query, context, game)
            else:
                await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        elif query.data == "settings_close":
            await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")

    async def show_timer_settings(self, query, context):
        keyboard = [
            [InlineKeyboardButton("üåô –ù–æ—á—å: 60—Å", callback_data="timer_night_60")],
            [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å: 5–º–∏–Ω", callback_data="timer_day_300")],
            [InlineKeyboardButton("üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: 2–º–∏–Ω", callback_data="timer_vote_120")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        await query.edit_message_text(
            "‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤\n\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüåô –ù–æ—á—å: 60 —Å–µ–∫—É–Ω–¥\n‚òÄÔ∏è –î–µ–Ω—å: 5 –º–∏–Ω—É—Ç\nüó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: 2 –º–∏–Ω—É—Ç—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_role_settings(self, query, context):
        keyboard = [
            [InlineKeyboardButton("üê∫ –í–æ–ª–∫–∏: 25%", callback_data="role_wolves_25")],
            [InlineKeyboardButton("ü¶ä –õ–∏—Å–∞: 15%", callback_data="role_fox_15")],
            [InlineKeyboardButton("ü¶´ –ö—Ä–æ—Ç: 15%", callback_data="role_mole_15")],
            [InlineKeyboardButton("ü¶¶ –ë–æ–±—ë—Ä: 10%", callback_data="role_beaver_10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        await query.edit_message_text(
            "üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π\n\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüê∫ –í–æ–ª–∫–∏: 25%\nü¶ä –õ–∏—Å–∞: 15%\nü¶´ –ö—Ä–æ—Ç: 15%\nü¶¶ –ë–æ–±—ë—Ä: 10%\nüê∞ –ó–∞–π—Ü—ã: 35% (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def toggle_test_mode(self, query, context, game: Optional[Game]):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if game and game.phase != GamePhase.WAITING:
            await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.")
            return

        self.global_settings.toggle_test_mode() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        mode_text = "–≤–∫–ª—é—á–µ–Ω" if self.global_settings.is_test_mode() else "–≤—ã–∫–ª—é—á–µ–Ω"
        min_players = self.global_settings.get_min_players()

        result_text = (
            f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º {mode_text}!\n\n"
            f"üìã –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {min_players}\n"
        )

        if game:
            result_text += (
                f"üéÆ –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: {'‚úÖ' if game.can_start_game() else '‚ùå'}\n"
                f"üë• –¢–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}"
            )
        else:
            result_text += "‚ÑπÔ∏è –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /join –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"

        await query.edit_message_text(result_text)

    async def show_global_settings(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_back")]
        ]
        
        await query.edit_message_text(
            self.global_settings.get_settings_summary(),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_settings_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return

        test_mode_text = "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –í–ö–õ" if self.global_settings.is_test_mode() else "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –í–´–ö–õ"

        keyboard = [
            [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã", callback_data="settings_timers")],
            [InlineKeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", callback_data="settings_roles")],
            [InlineKeyboardButton(test_mode_text, callback_data="settings_toggle_test")],
            [InlineKeyboardButton("üìà –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_global")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if chat_id in self.games:
            keyboard.insert(-1, [InlineKeyboardButton("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="settings_reset")])

        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"{self.global_settings.get_settings_summary()}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def reset_game_stats(self, query, context, game: Game):
        if game.phase != GamePhase.WAITING:
            await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.")
            return
        game.current_round = 0
        game.game_start_time = None
        game.phase_end_time = None
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–∞!\n\n‚úÖ –†–∞—É–Ω–¥: 0\n‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: —Å–±—Ä–æ—à–µ–Ω–æ\n‚úÖ –¢–∞–π–º–µ—Ä—ã: —Å–±—Ä–æ—à–µ–Ω—ã")

    # ---------------- night actions processing ----------------
    async def send_night_actions_to_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        chat_id = game.chat_id
        if chat_id in self.night_interfaces:
            await self.night_interfaces[chat_id].send_role_reminders(context)

    async def process_night_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        chat_id = game.chat_id
        if chat_id in self.night_actions:
            night_actions = self.night_actions[chat_id]
            night_interface = self.night_interfaces[chat_id]
            results = night_actions.process_all_actions()
            await night_interface.send_night_results(context, results)
            night_actions.clear_actions()

    async def handle_wolf_voting(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –≤–æ–ª–∫–∞"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ –∏–≥—Ä–æ–∫—É
        if user_id not in self.player_games:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return

        chat_id = self.player_games[user_id]
        if chat_id not in self.games:
            await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        game = self.games[chat_id]
        if game.phase != GamePhase.VOTING:
            await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return

        data = query.data.split('_')
        if len(data) != 3:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
            return

        target_id = int(data[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å—É—é—â–∏–π –∂–∏–≤ –∏ –≤ –∏–≥—Ä–µ
        voter = game.players.get(user_id)
        if not voter or not voter.is_alive:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!")
            return

        if game.vote(user_id, target_id):
            target_player = game.players[target_id]
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {target_player.username} –∫–∞–∫ –∑–∞ –≤–æ–ª–∫–∞!\n\nüïê –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
            if hasattr(game, 'total_voters') and len(game.votes) >= game.total_voters:
                # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(self.complete_wolf_voting_early(context, game))
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å!")

    async def complete_wolf_voting_early(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –≤–æ–ª–∫–∞ –¥–æ—Å—Ä–æ—á–Ω–æ"""
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –≤—Å–µ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
        if game.phase == GamePhase.VOTING and hasattr(game, 'voting_type') and game.voting_type == "wolf":
            await context.bot.send_message(
                chat_id=game.chat_id, 
                text="‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ '–ö—Ç–æ –≤–æ–ª–∫?' –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ."
            )
            await self.process_wolf_voting_results(context, game)

    async def complete_exile_voting_early(self, context: ContextTypes.DEFAULT_TYPE, game: Game, update: Update):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ"""
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –≤—Å–µ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
        if game.phase == GamePhase.VOTING and hasattr(game, 'voting_type') and game.voting_type == "exile":
            await context.bot.send_message(
                chat_id=game.chat_id, 
                text="‚ö° –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ."
            )
            await self.process_voting_results(update, context, game)

    # ---------------- helper ----------------
    async def send_role_button_to_passive_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –±–µ–∑ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        passive_roles = [Role.HARE]  # –ó–∞–π—Ü—ã –Ω–µ –∏–º–µ—é—Ç –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

        for player in game.players.values():
            if player.is_alive and player.role in passive_roles:
                keyboard = [[InlineKeyboardButton(
                    "üé≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é —Ä–æ–ª—å",
                    callback_data=f"night_view_role_{player.user_id}"
                )]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                try:
                    await context.bot.send_message(
                        chat_id=player.user_id,
                        text="üåô –ù–æ—á—å –≤ –ª–µ—Å—É...\n\n–í—ã —Å–ø–∏—Ç–µ, –Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å:",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")

    def get_role_info(self, role: Role) -> Dict[str, str]:
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞—ë—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})

    # ---------------- bot lifecycle: setup and run ----------------
    async def setup_bot_commands(self, application: Application):
        commands = [
            BotCommand("start", "üå≤ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            BotCommand("rules", "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
            BotCommand("join", "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ (—Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã)"),
            BotCommand("leave", "üëã –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É"),
            BotCommand("start_game", "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("end_game", "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("force_end", "‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("clear_all_games", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–≥—Ä—ã (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)"),
            BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"),
            BotCommand("test_mode", "üß™ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–∞–¥–º–∏–Ω—ã)"), # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        ]
        try:
            await application.bot.set_my_commands(commands)
            logger.info("Bot commands set.")
        except Exception as ex:
            logger.error(f"Failed to set bot commands: {ex}")

    def run(self):
        application = Application.builder().token(BOT_TOKEN).build()

        # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.welcome_message))
        application.add_handler(CommandHandler("rules", self.rules))
        application.add_handler(CommandHandler("join", self.join))
        application.add_handler(CommandHandler("leave", self.leave))
        application.add_handler(CommandHandler("start_game", self.start_game))
        application.add_handler(CommandHandler("end_game", self.end_game))
        application.add_handler(CommandHandler("force_end", self.force_end))
        application.add_handler(CommandHandler("clear_all_games", self.clear_all_games))
        application.add_handler(CommandHandler("settings", self.settings))
        application.add_handler(CommandHandler("status", self.status))
        application.add_handler(CommandHandler("test_mode", self.handle_test_mode_command)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã test_mode

        # callbacks
        application.add_handler(CallbackQueryHandler(self.handle_vote, pattern=r"^vote_"))
        application.add_handler(CallbackQueryHandler(self.handle_night_action, pattern=r"^night_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings, pattern=r"^settings_"))
        application.add_handler(CallbackQueryHandler(self.handle_welcome_buttons, pattern=r"^welcome_"))
        application.add_handler(CallbackQueryHandler(self.handle_day_actions, pattern=r"^day_"))
        application.add_handler(CallbackQueryHandler(self.handle_wolf_voting, pattern=r"^wolf_vote_"))
        # settings submenu/back handlers
        application.add_handler(CallbackQueryHandler(self.show_timer_settings, pattern=r"^timer_"))
        application.add_handler(CallbackQueryHandler(self.show_role_settings, pattern=r"^role_"))
        application.add_handler(CallbackQueryHandler(self.handle_settings_back, pattern=r"^settings_back$"))
        application.add_handler(CallbackQueryHandler(self.handle_welcome_buttons, pattern=r"^welcome_"))

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
        async def post_init(application):
            await self.setup_bot_commands(application)

        application.post_init = post_init

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (blocking call)
        application.run_polling()

    async def handle_test_mode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /test_mode –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id == user_id:
            await update.message.reply_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!")
            return

        game = self.games.get(chat_id)  # –ò–≥—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if game and game.phase != GamePhase.WAITING:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.")
            return

        self.global_settings.toggle_test_mode() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        mode_text = "–≤–∫–ª—é—á–µ–Ω" if self.global_settings.is_test_mode() else "–≤—ã–∫–ª—é—á–µ–Ω"
        min_players = self.global_settings.get_min_players()

        result_text = (
            f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º {mode_text}!\n\n"
            f"üìã –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {min_players}\n"
        )

        if game:
            result_text += (
                f"üéÆ –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: {'‚úÖ' if game.can_start_game() else '‚ùå'}\n"
                f"üë• –¢–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}"
            )
        else:
            result_text += "‚ÑπÔ∏è –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /join –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"

        await update.message.reply_text(result_text)


if __name__ == "__main__":
    bot = ForestMafiaBot()
    bot.run()