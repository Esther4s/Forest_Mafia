import logging
import asyncio
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from game_logic import Game, GamePhase, Role, Team, Player
from config import BOT_TOKEN, MIN_PLAYERS
from night_actions import NightActions
from night_interface import NightInterface

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ForestMafiaBot:
    def __init__(self):
        self.games: Dict[int, Game] = {}  # chat_id -> Game
        self.player_games: Dict[int, int] = {}  # user_id -> chat_id
        self.night_actions: Dict[int, NightActions] = {}  # chat_id -> NightActions
        self.night_interfaces: Dict[int, NightInterface] = {}  # chat_id -> NightInterface
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üå≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–µ—Å–Ω—É—é –í–æ–∑–Ω—é! üå≤\n\n"
            "–≠—Ç–æ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ '–ú–∞—Ñ–∏—è' —Å –ª–µ—Å–Ω—ã–º–∏ –∑–≤–µ—Ä—É—à–∫–∞–º–∏.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
            "/start_game - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
            "/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"
        )
    
    async def rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules"""
        rules_text = (
            "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–õ–µ—Å–Ω–∞—è –í–æ–∑–Ω—è':\n\n"
            "üé≠ –†–æ–ª–∏:\n"
            "üê∫ –í–æ–ª–∫–∏ (–•–∏—â–Ω–∏–∫–∏) - —Å—Ç–∞—è, –ø–æ –Ω–æ—á–∞–º —Å—ä–µ–¥–∞–µ—Ç –ø–æ –∑–≤–µ—Ä—é\n"
            "ü¶ä –õ–∏—Å–∞ (–•–∏—â–Ω–∏–∫–∏) - –≤–æ—Ä—É–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã, –¥–≤–∞–∂–¥—ã –æ–±–≤–æ—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–≤–µ—Ä—å —É—Ö–æ–¥–∏—Ç\n"
            "üê∞ –ó–∞–π—Ü—ã (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –º–∏—Ä–Ω—ã–µ –∑–≤–µ—Ä—É—à–∫–∏, —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "ü¶´ –ö—Ä–æ—Ç (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - —Ä–æ–µ—Ç –Ω–æ—Ä–∫–∏, —É–∑–Ω–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π\n"
            "ü¶¶ –ë–æ–±—ë—Ä (–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã\n\n"
            "üåô –ù–æ—á–Ω—ã–µ —Ñ–∞–∑—ã: –í–æ–ª–∫–∏ ‚Üí –õ–∏—Å–∞ ‚Üí –ë–æ–±—ë—Ä ‚Üí –ö—Ä–æ—Ç\n"
            "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ —Ñ–∞–∑—ã: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
            "üèÜ –¶–µ–ª—å: —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"
        )
        await update.message.reply_text(rules_text)
    
    async def join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or str(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ
        if user_id in self.player_games:
            other_chat_id = self.player_games[user_id]
            if other_chat_id != chat_id:
                await update.message.reply_text(
                    "‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!"
                )
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id not in self.games:
            self.games[chat_id] = Game(chat_id)
            self.night_actions[chat_id] = NightActions(self.games[chat_id])
            self.night_interfaces[chat_id] = NightInterface(self.games[chat_id], self.night_actions[chat_id])
        
        game = self.games[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–∞
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text(
                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        if game.add_player(user_id, username):
            self.player_games[user_id] = chat_id
            await update.message.reply_text(
                f"‚úÖ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
                f"–ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{game.MAX_PLAYERS if hasattr(game, 'MAX_PLAYERS') else 12}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤."
            )
    
    async def start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_game"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['creator', 'administrator']:
            await update.message.reply_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            )
            return
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
            )
            return
        
        game = self.games[chat_id]
        
        if not game.can_start_game():
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤."
            )
            return
        
        if game.phase != GamePhase.WAITING:
            await update.message.reply_text(
                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!"
            )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        if game.start_game():
            await self.start_night_phase(update, context, game)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")
    
    async def start_night_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É"""
        await update.message.reply_text(
            "üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å –≤ –ª–µ—Å—É...\n"
            "–í—Å–µ –∑–≤–µ—Ä–∏ –∑–∞—Å—ã–ø–∞—é—Ç, –∫—Ä–æ–º–µ –Ω–æ—á–Ω—ã—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π.\n\n"
            "üé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –∏—Ö —Ä–æ–ª—å—é
        for player in game.players.values():
            role_info = self.get_role_info(player.role)
            try:
                await context.bot.send_message(
                    chat_id=player.user_id,
                    text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']}\n\n{role_info['description']}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –Ω–æ—á—å, –≤–æ–ª–∫–∏ –∑–Ω–∞–∫–æ–º—è—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
        wolves = game.get_players_by_role(Role.WOLF)
        if len(wolves) > 1:
            wolves_text = "üê∫ –í–æ–ª–∫–∏, –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º:\n"
            for wolf in wolves:
                wolves_text += f"‚Ä¢ {wolf.username}\n"
            
            for wolf in wolves:
                try:
                    await context.bot.send_message(
                        chat_id=wolf.user_id,
                        text=wolves_text
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ª–∫—É {wolf.user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        await self.send_night_actions_to_players(context, game)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã
        asyncio.create_task(self.night_phase_timer(update, context, game))
    
    async def night_phase_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã"""
        await asyncio.sleep(60)  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–µ—Ä–≤—É—é –Ω–æ—á—å
        
        if game.phase == GamePhase.NIGHT:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            await self.process_night_phase(update, context, game)
            await self.start_day_phase(update, context, game)
    
    async def start_day_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Ñ–∞–∑—É"""
        game.start_day()
        
        await update.message.reply_text(
            "‚òÄÔ∏è –í–æ—Å—Ö–æ–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ! –õ–µ—Å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è.\n\n"
            "üå≤ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–µ—à–∏—Ç—å, –∫–æ–≥–æ –∏–∑–≥–Ω–∞—Ç—å."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã
        asyncio.create_task(self.day_phase_timer(update, context, game))
    
    async def day_phase_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã"""
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        
        if game.phase == GamePhase.DAY:
            await self.start_voting_phase(update, context, game)
    
    async def start_voting_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–∞–∑—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        game.start_voting()
        
        alive_players = game.get_alive_players()
        if len(alive_players) < 2:
            await self.end_game(update, context, game)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        keyboard = []
        for player in alive_players:
            keyboard.append([InlineKeyboardButton(
                f"üó≥Ô∏è {player.username}",
                callback_data=f"vote_{player.user_id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üó≥Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∑–≤–µ—Ä—è –∏–∑ –ª–µ—Å–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–≥–Ω–∞—Ç—å:",
            reply_markup=reply_markup
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        asyncio.create_task(self.voting_timer(update, context, game))
    
    async def voting_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–¢–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        
        if game.phase == GamePhase.VOTING:
            await self.process_voting_results(update, context, game)
    
    async def process_voting_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        exiled_player = game.process_voting()
        
        if exiled_player:
            await update.message.reply_text(
                f"üö´ {exiled_player.username} –∏–∑–≥–Ω–∞–Ω –∏–∑ –ª–µ—Å–∞!\n"
                f"–ï–≥–æ —Ä–æ–ª—å: {self.get_role_info(exiled_player.role)['name']}"
            )
        else:
            await update.message.reply_text(
                "ü§ù –ù–∏—á—å—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏! –ù–∏–∫—Ç–æ –Ω–µ –∏–∑–≥–Ω–∞–Ω."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
        winner = game.check_game_end()
        if winner:
            await self.end_game(update, context, game, winner)
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—á—å
            await self.start_new_night(update, context, game)
    
    async def start_new_night(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –Ω–æ—á—å"""
        game.start_night()
        
        await update.message.reply_text(
            "üåô –°–Ω–æ–≤–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å –≤ –ª–µ—Å—É...\n"
            "–ù–æ—á–Ω—ã–µ –æ–±–∏—Ç–∞—Ç–µ–ª–∏ —Å–æ–≤–µ—Ä—à–∞—é—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        await self.send_night_actions_to_players(context, game)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã
        asyncio.create_task(self.night_phase_timer(update, context, game))
    
    async def end_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game, winner: Optional[Team] = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
        game.phase = GamePhase.GAME_OVER
        
        if winner:
            winner_text = "üèÜ –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏!" if winner == Team.HERBIVORES else "üèÜ –•–∏—â–Ω–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏!"
            await update.message.reply_text(
                f"üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! {winner_text}\n\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n"
                f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
                f"–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {game.current_round}"
            )
        else:
            await update.message.reply_text(
                "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        for player_id in game.players:
            if player_id in self.player_games:
                del self.player_games[player_id]
        
        chat_id = game.chat_id
        del self.games[chat_id]
        if chat_id in self.night_actions:
            del self.night_actions[chat_id]
        if chat_id in self.night_interfaces:
            del self.night_interfaces[chat_id]
    
    async def handle_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        
        if chat_id not in self.games:
            return
        
        game = self.games[chat_id]
        
        if game.phase != GamePhase.VOTING:
            await query.edit_message_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ü–µ–ª–∏ –∏–∑ callback_data
        target_id = int(query.data.split('_')[1])
        
        if game.vote(user_id, target_id):
            await query.edit_message_text(
                f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞."
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å!")
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.games:
            await update.message.reply_text(
                "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
            )
            return
        
        game = self.games[chat_id]
        
        if game.phase == GamePhase.WAITING:
            status_text = (
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}/{12}\n"
                f"üìã –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—á–∞–ª–∞: {MIN_PLAYERS}\n\n"
                "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n"
            )
            
            for player in game.players.values():
                status_text += f"‚Ä¢ {player.username}\n"
            
            if game.can_start_game():
                status_text += "\n‚úÖ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!"
            else:
                status_text += f"\n‚è≥ –ù—É–∂–Ω–æ –µ—â–µ {MIN_PLAYERS - len(game.players)} –∏–≥—Ä–æ–∫–æ–≤"
        else:
            phase_names = {
                GamePhase.NIGHT: "üåô –ù–æ—á—å",
                GamePhase.DAY: "‚òÄÔ∏è –î–µ–Ω—å",
                GamePhase.VOTING: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                GamePhase.GAME_OVER: "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
            }
            
            status_text = (
                f"üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç\n\n"
                f"üìä –§–∞–∑–∞: {phase_names.get(game.phase, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –†–∞—É–Ω–¥: {game.current_round}\n"
                f"üë• –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(game.get_alive_players())}\n\n"
                "–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
            )
            
            for player in game.get_alive_players():
                status_text += f"‚Ä¢ {player.username}\n"
        
        await update.message.reply_text(status_text)
    
    async def send_night_actions_to_players(self, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞–º —Å –Ω–æ—á–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏"""
        chat_id = game.chat_id
        if chat_id in self.night_interfaces:
            night_interface = self.night_interfaces[chat_id]
            await night_interface.send_role_reminders(context)
    
    async def process_night_phase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game: Game):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É"""
        chat_id = game.chat_id
        if chat_id in self.night_actions:
            night_actions = self.night_actions[chat_id]
            night_interface = self.night_interfaces[chat_id]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            results = night_actions.process_all_actions()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await night_interface.send_night_results(context, results)
            
            # –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á–∏
            night_actions.clear_actions()
    
    async def handle_night_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ–∫
        if user_id in self.player_games:
            chat_id = self.player_games[user_id]
            if chat_id in self.night_interfaces:
                night_interface = self.night_interfaces[chat_id]
                await night_interface.handle_night_action(update, context)
    
    def get_role_info(self, role: Role) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("rules", self.rules))
        application.add_handler(CommandHandler("join", self.join))
        application.add_handler(CommandHandler("start_game", self.start_game))
        application.add_handler(CommandHandler("status", self.status))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query
        application.add_handler(CallbackQueryHandler(self.handle_vote, pattern="^vote_"))
        application.add_handler(CallbackQueryHandler(self.handle_night_action, pattern="^night_"))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == "__main__":
    bot = ForestMafiaBot()
    bot.run()
