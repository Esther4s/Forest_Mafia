#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ ForestMafia Bot
"""

import logging
from typing import Dict, Optional, List
from datetime import datetime

from game_logic import Game, Player, Role, Team
from database_psycopg2 import (
    init_db, close_db, create_tables,
    save_game_to_db, save_player_to_db, update_game_phase, finish_game_in_db,
    get_team_stats, get_top_players, get_player_detailed_stats
)

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db = None
        self._initialize_database()
    
    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db = init_db()
            create_tables()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db = None
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return self.db is not None
    
    def save_game_state(self, game: Game):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_available():
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
            game_id = save_game_to_db(
                chat_id=game.chat_id,
                thread_id=game.thread_id,
                phase=game.phase.value,
                round_number=game.current_round,
                is_test_mode=game.is_test_mode
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            for player in game.players.values():
                save_player_to_db(
                    game_id=game_id,
                    user_id=player.user_id,
                    username=player.username,
                    role=player.role.value,
                    team=player.team.value,
                    is_alive=player.is_alive,
                    supplies=player.supplies,
                    max_supplies=player.max_supplies,
                    is_fox_stolen=player.is_fox_stolen,
                    stolen_supplies=player.stolen_supplies,
                    is_beaver_protected=player.is_beaver_protected,
                    consecutive_nights_survived=player.consecutive_nights_survived,
                    last_action_round=player.last_action_round
                )
            
            logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (ID: {game_id})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: {e}")
    
    def update_game_phase(self, game: Game):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–∑—É –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_available():
            return
        
        try:
            update_game_phase(
                chat_id=game.chat_id,
                thread_id=game.thread_id,
                phase=game.phase.value,
                round_number=game.current_round
            )
            logger.info(f"‚úÖ –§–∞–∑–∞ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {game.phase.value}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –∏–≥—Ä—ã: {e}")
    
    def finish_game(self, game: Game, winner_team: Optional[Team]):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_available():
            return
        
        try:
            winner = winner_team.value if winner_team else None
            finish_game_in_db(
                chat_id=game.chat_id,
                thread_id=game.thread_id,
                winner_team=winner,
                final_round=game.current_round
            )
            logger.info(f"‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –ë–î (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –ë–î: {e}")
    
    def get_player_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        if not self.is_available():
            return {}
        
        try:
            stats = get_player_detailed_stats(user_id)
            return stats if stats else {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
            return {}
    
    def get_top_players(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
        if not self.is_available():
            return []
        
        try:
            return get_top_players(limit)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
            return []
    
    def get_team_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥"""
        if not self.is_available():
            return {}
        
        try:
            return get_team_stats()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return {}
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.db:
            try:
                close_db()
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
            finally:
                self.db = None


class GameStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä"""
    
    def __init__(self, database_manager: DatabaseManager):
        self.db_manager = database_manager
        self.games: Dict[int, Game] = {}
        self.player_games: Dict[int, int] = {}  # user_id -> chat_id
    
    def get_or_create_game(self, chat_id: int, thread_id: Optional[int] = None, is_test_mode: bool = True) -> Game:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É"""
        if chat_id not in self.games:
            self.games[chat_id] = Game(chat_id, thread_id, is_test_mode)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        return self.games[chat_id]
    
    def get_game(self, chat_id: int) -> Optional[Game]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—É –ø–æ ID —á–∞—Ç–∞"""
        return self.games.get(chat_id)
    
    def remove_game(self, chat_id: int):
        """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä—É"""
        if chat_id in self.games:
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
            game = self.games[chat_id]
            for player_id in game.players.keys():
                if player_id in self.player_games:
                    del self.player_games[player_id]
            
            del self.games[chat_id]
            logger.info(f"‚úÖ –ò–≥—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞")
    
    def add_player_to_game(self, user_id: int, chat_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å –∏–≥—Ä"""
        self.player_games[user_id] = chat_id
    
    def remove_player_from_game(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∏–≥—Ä"""
        if user_id in self.player_games:
            del self.player_games[user_id]
    
    def get_player_game(self, user_id: int) -> Optional[Game]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—É –∏–≥—Ä–æ–∫–∞"""
        chat_id = self.player_games.get(user_id)
        if chat_id:
            return self.games.get(chat_id)
        return None
    
    def save_all_games(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã"""
        for game in self.games.values():
            self.db_manager.save_game_state(game)
    
    def load_active_games(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–≥—Ä –∏–∑ –ë–î
        logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∏–∑ –ë–î (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    
    def cleanup_finished_games(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã"""
        finished_chats = []
        for chat_id, game in self.games.items():
            if game.phase == GamePhase.GAME_OVER:
                finished_chats.append(chat_id)
        
        for chat_id in finished_chats:
            self.remove_game(chat_id)
        
        if finished_chats:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(finished_chats)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä")
