from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Dict, List
from game_logic import Game, Role
from night_actions import NightActions

class NightInterface:
    def __init__(self, game: Game, night_actions: NightActions):
        self.game = game
        self.night_actions = night_actions
    
    async def send_night_actions_menu(self, context: ContextTypes.DEFAULT_TYPE, player_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
        actions = self.night_actions.get_player_actions(player_id)
        
        if not actions:
            return
        
        player = self.game.players.get(player_id)
        if not player:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        role_headers = {
            "wolf": "üê∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ—Ö–æ—Ç—ã:",
            "fox": "ü¶ä –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∫—Ä–∞–∂–∏ –∑–∞–ø–∞—Å–æ–≤:",
            "beaver": "ü¶¶ –í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–µ—Ä—è –¥–ª—è –ø–æ–º–æ—â–∏:",
            "mole": "ü¶´ –í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–µ—Ä—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        }
        
        header = role_headers.get(actions["type"], "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–ª—è–º–∏
        keyboard = []
        for target in actions["targets"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å
            current_mark = "‚úÖ " if actions.get("current_target") == target.user_id else ""
            button_text = f"{current_mark}{target.username}"
            
            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"night_{actions['type']}_{target.user_id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –Ω–æ—á—å
        if self.game.current_round > 1:
            keyboard.append([InlineKeyboardButton(
                "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥",
                callback_data=f"night_{actions['type']}_skip"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=header,
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    
    async def handle_night_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data.split('_')
        
        if len(data) != 3:
            return
        
        action_type = data[1]
        target_id = data[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–≥—Ä–µ
        if user_id not in self.game.players:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return
        
        player = self.game.players[user_id]
        if not player.is_alive:
            await query.edit_message_text("‚ùå –í—ã –º–µ—Ä—Ç–≤—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è!")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        success = False
        message = ""
        
        if action_type == "wolf" and player.role == Role.WOLF:
            if target_id == "skip":
                success = True
                message = "‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥"
            else:
                success = self.night_actions.set_wolf_target(user_id, int(target_id))
                if success:
                    target = self.game.players[int(target_id)]
                    message = f"üê∫ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å: {target.username}"
                else:
                    message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å"
        
        elif action_type == "fox" and player.role == Role.FOX:
            if target_id == "skip":
                success = True
                message = "‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥"
            else:
                success = self.night_actions.set_fox_target(user_id, int(target_id))
                if success:
                    target = self.game.players[int(target_id)]
                    message = f"ü¶ä –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å –¥–ª—è –∫—Ä–∞–∂–∏: {target.username}"
                else:
                    message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å"
        
        elif action_type == "beaver" and player.role == Role.BEAVER:
            if target_id == "skip":
                success = True
                message = "‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥"
            else:
                success = self.night_actions.set_beaver_target(user_id, int(target_id))
                if success:
                    target = self.game.players[int(target_id)]
                    message = f"ü¶¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–≤–µ—Ä—è –¥–ª—è –ø–æ–º–æ—â–∏: {target.username}"
                else:
                    message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å"
        
        elif action_type == "mole" and player.role == Role.MOLE:
            if target_id == "skip":
                success = True
                message = "‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥"
            else:
                success = self.night_actions.set_mole_target(user_id, int(target_id))
                if success:
                    target = self.game.players[int(target_id)]
                    message = f"ü¶´ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–≤–µ—Ä—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {target.username}"
                else:
                    message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å"
        
        else:
            message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!"
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await query.edit_message_text(
                f"{message}\n\n"
                "üåô –ñ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã..."
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await query.edit_message_text(
                f"{message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ü–µ–ª—å."
            )
    
    async def send_night_results(self, context: ContextTypes.DEFAULT_TYPE, results: Dict[str, List[str]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º"""
        if not results:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = "üåô –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if results["wolves"]:
            message += "üê∫ –î–µ–π—Å—Ç–≤–∏—è –≤–æ–ª–∫–æ–≤:\n"
            for action in results["wolves"]:
                message += f"‚Ä¢ {action}\n"
            message += "\n"
        
        if results["fox"]:
            message += "ü¶ä –î–µ–π—Å—Ç–≤–∏—è –ª–∏—Å—ã:\n"
            for action in results["fox"]:
                message += f"‚Ä¢ {action}\n"
            message += "\n"
        
        if results["beaver"]:
            message += "ü¶¶ –î–µ–π—Å—Ç–≤–∏—è –±–æ–±—Ä–∞:\n"
            for action in results["beaver"]:
                message += f"‚Ä¢ {action}\n"
            message += "\n"
        
        if results["mole"]:
            message += "ü¶´ –î–µ–π—Å—Ç–≤–∏—è –∫—Ä–æ—Ç–∞:\n"
            for action in results["mole"]:
                message += f"‚Ä¢ {action}\n"
            message += "\n"
        
        if results["deaths"]:
            message += "üíÄ –°–º–µ—Ä—Ç–∏:\n"
            for death in results["deaths"]:
                message += f"‚Ä¢ {death}\n"
            message += "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç
        try:
            await context.bot.send_message(
                chat_id=self.game.chat_id,
                text=message
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏: {e}")
    
    async def send_role_reminders(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–æ–ª—è—Ö –∏–≥—Ä–æ–∫–∞–º —Å –Ω–æ—á–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        night_roles = [Role.WOLF, Role.FOX, Role.BEAVER, Role.MOLE]
        
        for player in self.game.players.values():
            if player.is_alive and player.role in night_roles:
                role_info = self.get_role_info(player.role)
                
                reminder_text = (
                    f"üåô –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–π —Ä–æ–ª–∏:\n\n"
                    f"üé≠ {role_info['name']}\n"
                    f"üìù {role_info['description']}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π:"
                )
                
                try:
                    await context.bot.send_message(
                        chat_id=player.user_id,
                        text=reminder_text
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
                    await self.send_night_actions_menu(context, player.user_id)
                    
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player.user_id}: {e}")
    
    def get_role_info(self, role: Role) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏"""
        role_info = {
            Role.WOLF: {
                "name": "üê∫ –í–æ–ª–∫",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –í–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ª–∫–∞–º–∏ –≤—ã –æ—Ö–æ—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ—á–∞–º."
            },
            Role.FOX: {
                "name": "ü¶ä –õ–∏—Å–∞",
                "description": "–í—ã —Ö–∏—â–Ω–∏–∫! –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –≤–æ—Ä—É–µ—Ç–µ –∑–∞–ø–∞—Å—ã –µ–¥—ã —É –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.HARE: {
                "name": "üê∞ –ó–∞—è—Ü",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã —Å–ø–∏—Ç–µ –≤—Å—é –Ω–æ—á—å –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö."
            },
            Role.MOLE: {
                "name": "ü¶´ –ö—Ä–æ—Ç",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –ü–æ –Ω–æ—á–∞–º –≤—ã —Ä–æ–µ—Ç–µ –Ω–æ—Ä–∫–∏ –∏ —É–∑–Ω–∞–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥—Ä—É–≥–∏—Ö –∑–≤–µ—Ä–µ–π."
            },
            Role.BEAVER: {
                "name": "ü¶¶ –ë–æ–±—ë—Ä",
                "description": "–í—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥—Ä—É–≥–∏–º –∑–≤–µ—Ä—è–º."
            }
        }
        return role_info.get(role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"})
