#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import tempfile
import traceback
from typing import Dict, List, Optional, Tuple
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
try:
    from database_psycopg2 import (
        init_db, close_db, create_tables,
        create_user, get_user_by_telegram_id, update_user_balance, get_user_balance,
        execute_query, fetch_one, fetch_query,
        get_chat_settings, update_chat_settings, reset_chat_settings,
        save_player_action, save_vote, update_player_stats, update_user_stats,
        get_bot_setting, set_bot_setting,
        save_game_to_db, save_player_to_db, update_game_phase, finish_game_in_db,
        get_team_stats, get_top_players, get_best_predator, get_best_herbivore, get_player_detailed_stats,
        get_player_chat_stats, add_nuts_to_user, get_shop_items
    )
    from database_adapter import DatabaseAdapter
    from config import DATABASE_URL
    print("‚úÖ –ú–æ–¥—É–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ë–î: {e}")
    sys.exit(1)


class DatabaseTestSuite:
    """–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.test_results = {}
        self.db_connection = None
        self.test_data = {
            'users': [],
            'games': [],
            'players': []
        }
    
    def log_test(self, test_name: str, success: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}: {message}")
        self.test_results[test_name] = {
            'success': success,
            'message': message,
            'timestamp': datetime.now().isoformat()
        }
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            if self.db_connection:
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                for user_id in self.test_data['users']:
                    execute_query("DELETE FROM users WHERE user_id = %s", (user_id,))
                
                for game_id in self.test_data['games']:
                    execute_query("DELETE FROM games WHERE id = %s", (game_id,))
                
                close_db()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def test_database_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            self.db_connection = init_db()
            if self.db_connection is None:
                self.log_test("Database Connection", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            result = execute_query("SELECT 1 as test")
            if result:
                self.log_test("Database Connection", True, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                self.log_test("Database Connection", False, "–ó–∞–ø—Ä–æ—Å –∫ –ë–î –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è")
                return False
                
        except Exception as e:
            self.log_test("Database Connection", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_table_creation(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
        
        try:
            tables_created = create_tables()
            if not tables_created:
                self.log_test("Table Creation", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            required_tables = ['users', 'games', 'players', 'game_events', 'chat_settings']
            missing_tables = []
            
            for table in required_tables:
                result = execute_query(
                    "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = %s)",
                    (table,)
                )
                if not result or not result[0]:
                    missing_tables.append(table)
            
            if missing_tables:
                self.log_test("Table Creation", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                return False
            
            self.log_test("Table Creation", True, "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.log_test("Table Creation", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_user_operations(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
        
        try:
            test_user_id = 999999
            test_username = "test_user"
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = create_user(test_user_id, test_username, "Test", "User")
            if not success:
                self.log_test("User Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            
            self.test_data['users'].append(test_user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = get_user_by_telegram_id(test_user_id)
            if not user:
                self.log_test("User Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            success = update_user_balance(test_user_id, 100)
            if not success:
                self.log_test("User Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = get_user_balance(test_user_id)
            if balance != 100:
                self.log_test("User Operations", False, f"–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance}")
                return False
            
            self.log_test("User Operations", True, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("User Operations", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_game_operations(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–∞–º–∏"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–≥—Ä–∞–º–∏...")
        
        try:
            test_chat_id = 888888
            test_game_id = "test_game_123"
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
            success = save_game_to_db(test_game_id, test_chat_id, "registration", 0)
            if not success:
                self.log_test("Game Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")
                return False
            
            self.test_data['games'].append(test_game_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
            success = update_game_phase(test_game_id, "night", 1)
            if not success:
                self.log_test("Game Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–∑—É –∏–≥—Ä—ã")
                return False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            success = finish_game_in_db(test_game_id, "herbivores")
            if not success:
                self.log_test("Game Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É")
                return False
            
            self.log_test("Game Operations", True, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("Game Operations", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_player_operations(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–≥—Ä–æ–∫–∞–º–∏...")
        
        try:
            test_user_id = 777777
            test_game_id = "test_game_456"
            test_chat_id = 666666
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
            save_game_to_db(test_game_id, test_chat_id, "active", 1)
            self.test_data['games'].append(test_game_id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
            success = save_player_to_db(test_game_id, test_user_id, "test_player", "Test", "Player", "wolf", "predators")
            if not success:
                self.log_test("Player Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞")
                return False
            
            self.test_data['players'].append((test_game_id, test_user_id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
            success = save_player_action(test_game_id, test_user_id, "vote", "target_user_id")
            if not success:
                self.log_test("Player Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
            success = save_vote(test_game_id, test_user_id, 555555)
            if not success:
                self.log_test("Player Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–ª–æ—Å")
                return False
            
            self.log_test("Player Operations", True, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("Player Operations", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_chat_settings(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞...")
        
        try:
            test_chat_id = 555555
            test_settings = {
                "min_players": 3,
                "night_duration": 60,
                "day_duration": 300,
                "voting_duration": 120
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            success = update_chat_settings(test_chat_id, test_settings)
            if not success:
                self.log_test("Chat Settings", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = get_chat_settings(test_chat_id)
            if not settings:
                self.log_test("Chat Settings", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            if settings.get("min_players") != 3:
                self.log_test("Chat Settings", False, "–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
                return False
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            success = reset_chat_settings(test_chat_id)
            if not success:
                self.log_test("Chat Settings", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
                return False
            
            self.log_test("Chat Settings", True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("Chat Settings", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_bot_settings(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞...")
        
        try:
            test_key = "test_setting"
            test_value = "test_value_123"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            success = set_bot_setting(test_key, test_value)
            if not success:
                self.log_test("Bot Settings", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            value = get_bot_setting(test_key)
            if value != test_value:
                self.log_test("Bot Settings", False, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {value}")
                return False
            
            self.log_test("Bot Settings", True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("Bot Settings", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_statistics(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            team_stats = get_team_stats()
            if team_stats is None:
                self.log_test("Statistics", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            top_players = get_top_players(10)
            if top_players is None:
                self.log_test("Statistics", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ö–∏—â–Ω–∏–∫–æ–≤
            best_predator = get_best_predator()
            if best_predator is None:
                self.log_test("Statistics", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–≥–æ —Ö–∏—â–Ω–∏–∫–∞")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
            best_herbivore = get_best_herbivore()
            if best_herbivore is None:
                self.log_test("Statistics", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–≥–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ")
                return False
            
            self.log_test("Statistics", True, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            self.log_test("Statistics", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_shop_operations(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –º–∞–≥–∞–∑–∏–Ω–∞...")
        
        try:
            test_user_id = 444444
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–µ—Ö–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = add_nuts_to_user(test_user_id, 50)
            if not success:
                self.log_test("Shop Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ä–µ—Ö–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
            shop_items = get_shop_items()
            if shop_items is None:
                self.log_test("Shop Operations", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞")
                return False
            
            self.log_test("Shop Operations", True, "–û–ø–µ—Ä–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            self.log_test("Shop Operations", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_database_adapter(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            adapter = DatabaseAdapter()
            if not adapter:
                self.log_test("Database Adapter", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–¥–∞–ø—Ç–µ—Ä–∞
            if not hasattr(adapter, 'get_user') or not hasattr(adapter, 'save_user'):
                self.log_test("Database Adapter", False, "–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
                return False
            
            self.log_test("Database Adapter", True, "–ê–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            self.log_test("Database Adapter", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_database_performance(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            import time
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            for i in range(10):
                execute_query("SELECT 1 as test")
            
            end_time = time.time()
            execution_time = end_time - start_time
            
            if execution_time > 5.0:  # –ë–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
                self.log_test("Database Performance", False, f"–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {execution_time:.2f}s")
                return False
            
            self.log_test("Database Performance", True, f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è: {execution_time:.2f}s")
            return True
            
        except Exception as e:
            self.log_test("Database Performance", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n")
        print("=" * 50)
        
        tests = [
            ("Database Connection", self.test_database_connection),
            ("Table Creation", self.test_table_creation),
            ("User Operations", self.test_user_operations),
            ("Game Operations", self.test_game_operations),
            ("Player Operations", self.test_player_operations),
            ("Chat Settings", self.test_chat_settings),
            ("Bot Settings", self.test_bot_settings),
            ("Statistics", self.test_statistics),
            ("Shop Operations", self.test_shop_operations),
            ("Database Adapter", self.test_database_adapter),
            ("Database Performance", self.test_database_performance),
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed_tests += 1
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
                traceback.print_exc()
                print()
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("=" * 50)
        print(f"üèÅ –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {passed_tests}/{total_tests} –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_suite = DatabaseTestSuite()
    
    try:
        success = test_suite.run_all_tests()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        test_suite.cleanup()
        return 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        test_suite.cleanup()
        return 1


if __name__ == "__main__":
    sys.exit(main())
