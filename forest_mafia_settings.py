"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –õ–µ—Å–Ω–æ–π –ú–∞—Ñ–∏–∏
–í–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π, —Ç–∞–π–º–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

from typing import Dict, Any, List
from global_settings import GlobalSettings
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class ForestWolvesSettings:
    def __init__(self, global_settings: GlobalSettings):
        self.global_settings = global_settings
    
    def get_forest_wolves_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –õ–µ—Å –∏ –í–æ–ª–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üåô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ—á–∏", callback_data="forest_night_settings")],
            [InlineKeyboardButton("ü¶ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—ã", callback_data="forest_fox_settings")],
            [InlineKeyboardButton("ü¶¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–±—Ä–∞", callback_data="forest_beaver_settings")],
            [InlineKeyboardButton("ü¶´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–æ—Ç–∞", callback_data="forest_mole_settings")],
            [InlineKeyboardButton("üèÜ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥", callback_data="forest_rewards_settings")],
            [InlineKeyboardButton("üíÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–µ—Ä—à–∏—Ö", callback_data="forest_dead_settings")],
            [InlineKeyboardButton("‚è∞ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="forest_auto_end_settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_night_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ—á–∏"""
        current_duration = self.global_settings.get("night_duration", 60)
        keyboard = [
            [InlineKeyboardButton(f"üåô 30 —Å–µ–∫—É–Ω–¥", callback_data=f"set_night_30")],
            [InlineKeyboardButton(f"üåô 45 —Å–µ–∫—É–Ω–¥", callback_data=f"set_night_45")],
            [InlineKeyboardButton(f"üåô 60 —Å–µ–∫—É–Ω–¥ (—Ç–µ–∫—É—â–µ–µ)", callback_data=f"set_night_60")],
            [InlineKeyboardButton(f"üåô 90 —Å–µ–∫—É–Ω–¥", callback_data=f"set_night_90")],
            [InlineKeyboardButton(f"üåô 120 —Å–µ–∫—É–Ω–¥", callback_data=f"set_night_120")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_fox_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏—Å—ã"""
        current_threshold = self.global_settings.get("forest_wolves_features", {}).get("fox_death_threshold", 2)
        keyboard = [
            [InlineKeyboardButton(f"ü¶ä 1 –∫—Ä–∞–∂–∞ = —Å–º–µ—Ä—Ç—å", callback_data="set_fox_threshold_1")],
            [InlineKeyboardButton(f"ü¶ä 2 –∫—Ä–∞–∂–∏ = —Å–º–µ—Ä—Ç—å (—Ç–µ–∫—É—â–µ–µ)", callback_data="set_fox_threshold_2")],
            [InlineKeyboardButton(f"ü¶ä 3 –∫—Ä–∞–∂–∏ = —Å–º–µ—Ä—Ç—å", callback_data="set_fox_threshold_3")],
            [InlineKeyboardButton("ü¶ä –û—Ç–∫–ª—é—á–∏—Ç—å —Å–º–µ—Ä—Ç—å", callback_data="set_fox_threshold_0")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_beaver_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–±—Ä–∞"""
        current_enabled = self.global_settings.get("forest_wolves_features", {}).get("beaver_protection_enabled", True)
        keyboard = [
            [InlineKeyboardButton("ü¶¶ –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="set_beaver_protection_true")],
            [InlineKeyboardButton("ü¶¶ –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="set_beaver_protection_false")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_mole_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–æ—Ç–∞"""
        current_threshold = self.global_settings.get("forest_wolves_features", {}).get("mole_revelation_threshold", 0.8)
        keyboard = [
            [InlineKeyboardButton(f"ü¶´ 60% —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö = –ø–æ–±–µ–¥–∞", callback_data="set_mole_threshold_0.6")],
            [InlineKeyboardButton(f"ü¶´ 70% —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö = –ø–æ–±–µ–¥–∞", callback_data="set_mole_threshold_0.7")],
            [InlineKeyboardButton(f"ü¶´ 80% —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö = –ø–æ–±–µ–¥–∞ (—Ç–µ–∫—É—â–µ–µ)", callback_data="set_mole_threshold_0.8")],
            [InlineKeyboardButton(f"ü¶´ 90% —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö = –ø–æ–±–µ–¥–∞", callback_data="set_mole_threshold_0.9")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_rewards_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥"""
        current_enabled = self.global_settings.get("forest_wolves_features", {}).get("loser_rewards_enabled", True)
        keyboard = [
            [InlineKeyboardButton("üèÜ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º", callback_data="set_loser_rewards_true")],
            [InlineKeyboardButton("üèÜ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º", callback_data="set_loser_rewards_false")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_auto_end_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        auto_end = self.global_settings.get("auto_end_conditions", {})
        current_rounds = auto_end.get("max_rounds", 25)
        current_hours = auto_end.get("max_game_duration_hours", 3)
        current_min_players = auto_end.get("min_alive_players", 3)
        
        keyboard = [
            [InlineKeyboardButton(f"üéÆ –ú–∞–∫—Å. —Ä–∞—É–Ω–¥–æ–≤: {current_rounds}", callback_data="forest_rounds_settings")],
            [InlineKeyboardButton(f"‚è±Ô∏è –ú–∞–∫—Å. –≤—Ä–µ–º—è: {current_hours}—á", callback_data="forest_time_settings")],
            [InlineKeyboardButton(f"üë• –ú–∏–Ω. –∏–≥—Ä–æ–∫–æ–≤: {current_min_players}", callback_data="forest_players_settings")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_rounds_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—É–Ω–¥–æ–≤"""
        current_rounds = self.global_settings.get("auto_end_conditions", {}).get("max_rounds", 25)
        keyboard = [
            [InlineKeyboardButton("üéÆ 15 —Ä–∞—É–Ω–¥–æ–≤", callback_data="set_max_rounds_15")],
            [InlineKeyboardButton("üéÆ 20 —Ä–∞—É–Ω–¥–æ–≤", callback_data="set_max_rounds_20")],
            [InlineKeyboardButton(f"üéÆ 25 —Ä–∞—É–Ω–¥–æ–≤ (—Ç–µ–∫—É—â–µ–µ)", callback_data="set_max_rounds_25")],
            [InlineKeyboardButton("üéÆ 30 —Ä–∞—É–Ω–¥–æ–≤", callback_data="set_max_rounds_30")],
            [InlineKeyboardButton("üéÆ 40 —Ä–∞—É–Ω–¥–æ–≤", callback_data="set_max_rounds_40")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_auto_end_settings")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_time_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        current_hours = self.global_settings.get("auto_end_conditions", {}).get("max_game_duration_hours", 3)
        keyboard = [
            [InlineKeyboardButton("‚è±Ô∏è 1 —á–∞—Å", callback_data="set_max_time_1")],
            [InlineKeyboardButton("‚è±Ô∏è 2 —á–∞—Å–∞", callback_data="set_max_time_2")],
            [InlineKeyboardButton(f"‚è±Ô∏è 3 —á–∞—Å–∞ (—Ç–µ–∫—É—â–µ–µ)", callback_data="set_max_time_3")],
            [InlineKeyboardButton("‚è±Ô∏è 4 —á–∞—Å–∞", callback_data="set_max_time_4")],
            [InlineKeyboardButton("‚è±Ô∏è 6 —á–∞—Å–æ–≤", callback_data="set_max_time_6")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_auto_end_settings")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_players_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤"""
        current_min = self.global_settings.get("auto_end_conditions", {}).get("min_alive_players", 3)
        keyboard = [
            [InlineKeyboardButton("üë• 2 –∏–≥—Ä–æ–∫–∞", callback_data="set_min_alive_2")],
            [InlineKeyboardButton(f"üë• 3 –∏–≥—Ä–æ–∫–∞ (—Ç–µ–∫—É—â–µ–µ)", callback_data="set_min_alive_3")],
            [InlineKeyboardButton("üë• 4 –∏–≥—Ä–æ–∫–∞", callback_data="set_min_alive_4")],
            [InlineKeyboardButton("üë• 5 –∏–≥—Ä–æ–∫–æ–≤", callback_data="set_min_alive_5")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_auto_end_settings")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_forest_settings_back_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏", callback_data="forest_settings")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_forest_auto_end_back_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—é", callback_data="forest_auto_end_settings")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_dead_settings_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–º–µ—Ä—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        current_enabled = self.global_settings.get("forest_wolves_features", {}).get("dead_rewards_enabled", True)
        keyboard = [
            [InlineKeyboardButton("üíÄ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º", callback_data="set_dead_rewards_true")],
            [InlineKeyboardButton("üíÄ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º", callback_data="set_dead_rewards_false")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forest_settings_back")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_settings_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏"""
        forest_features = self.global_settings.get("forest_wolves_features", {})
        auto_end = self.global_settings.get("auto_end_conditions", {})
        
        return (
            "üå≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –õ–µ—Å –∏ –í–æ–ª–∫–∏* üå≤\n\n"
            f"ü¶ä –ü–æ—Ä–æ–≥ —Å–º–µ—Ä—Ç–∏ –ª–∏—Å—ã: {forest_features.get('fox_death_threshold', 2)} –∫—Ä–∞–∂–∏\n"
            f"ü¶¶ –ó–∞—â–∏—Ç–∞ –±–æ–±—Ä–∞: {'–í–ö–õ' if forest_features.get('beaver_protection_enabled', True) else '–í–´–ö–õ'}\n"
            f"ü¶´ –ü–æ—Ä–æ–≥ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫—Ä–æ—Ç–∞: {int(forest_features.get('mole_revelation_threshold', 0.8) * 100)}%\n"
            f"üèÜ –ù–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º: {'–í–ö–õ' if forest_features.get('loser_rewards_enabled', True) else '–í–´–ö–õ'}\n"
            f"üíÄ –ù–∞–≥—Ä–∞–¥—ã —É–º–µ—Ä—à–∏–º: {'–í–ö–õ' if forest_features.get('dead_rewards_enabled', True) else '–í–´–ö–õ'}\n"
            f"üåø –ü–æ—Ä–æ–≥ –≤—ã–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: {int(forest_features.get('herbivore_survival_threshold', 0.7) * 100)}%\n\n"
            f"‚è∞ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:\n"
            f"üéÆ –ú–∞–∫—Å–∏–º—É–º —Ä–∞—É–Ω–¥–æ–≤: {auto_end.get('max_rounds', 25)}\n"
            f"‚è±Ô∏è –ú–∞–∫—Å–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏: {auto_end.get('max_game_duration_hours', 3)}—á\n"
            f"üë• –ú–∏–Ω–∏–º—É–º –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {auto_end.get('min_alive_players', 3)}"
        )
    
    def apply_setting(self, setting_type: str, value: Any) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö"""
        try:
            if setting_type == "fox_threshold":
                return self.global_settings.update_forest_feature("fox_death_threshold", value)
            elif setting_type == "beaver_protection":
                return self.global_settings.update_forest_feature("beaver_protection_enabled", value)
            elif setting_type == "mole_threshold":
                return self.global_settings.update_forest_feature("mole_revelation_threshold", value)
            elif setting_type == "loser_rewards":
                return self.global_settings.update_forest_feature("loser_rewards_enabled", value)
            elif setting_type == "dead_rewards":
                return self.global_settings.update_forest_feature("dead_rewards_enabled", value)
            elif setting_type == "max_rounds":
                return self.global_settings.update_auto_end_condition("max_rounds", value)
            elif setting_type == "max_time":
                return self.global_settings.update_auto_end_condition("max_game_duration_hours", value)
            elif setting_type == "min_alive":
                return self.global_settings.update_auto_end_condition("min_alive_players", value)
            elif setting_type == "night_duration":
                return self.global_settings.update_timer("night", value)
            else:
                return False
        except Exception:
            return False
