#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Docker –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é
"""

import subprocess
import os
import time
import tempfile
import sys


def run_command(cmd, timeout=60):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    except Exception as e:
        return False, "", str(e)


def test_docker_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker...")
    
    success, stdout, stderr = run_command(['docker', '--version'])
    if success:
        print(f"‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stdout.strip()}")
        return True
    else:
        print(f"‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stderr}")
        return False


def test_docker_compose_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker Compose"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose...")
    
    success, stdout, stderr = run_command(['docker-compose', '--version'])
    if success:
        print(f"‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stdout.strip()}")
        return True
    else:
        print(f"‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stderr}")
        return False


def test_dockerfile():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Dockerfile"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile...")
    
    if not os.path.exists('Dockerfile'):
        print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º Dockerfile
    with open('Dockerfile', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
    required_directives = ['FROM', 'WORKDIR', 'COPY', 'RUN', 'CMD']
    missing = [d for d in required_directives if d not in content]
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã: {', '.join(missing)}")
        return False
    
    print("‚úÖ Dockerfile –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True


def test_docker_compose_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç docker-compose.yml"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml...")
    
    if not os.path.exists('docker-compose.yml'):
        print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    success, stdout, stderr = run_command(['docker-compose', 'config'])
    if success:
        print("‚úÖ docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ docker-compose.yml: {stderr}")
        return False


def test_docker_build():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–∞"""
    print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞...")
    
    success, stdout, stderr = run_command(['docker', 'build', '-t', 'forest-mafia-quick-test', '.'], timeout=300)
    if success:
        print("‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {stderr}")
        return False


def test_docker_run():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
    env_content = """BOT_TOKEN=test_token_123456789
DATABASE_URL=sqlite:///test.db
ENVIRONMENT=test
LOG_LEVEL=DEBUG
"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
        f.write(env_content)
        env_file = f.name
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        success, stdout, stderr = run_command([
            'docker', 'run', '-d',
            '--name', 'forest-mafia-quick-test',
            '--env-file', env_file,
            'forest-mafia-quick-test'
        ], timeout=60)
        
        if success:
            print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            time.sleep(5)
            success, stdout, stderr = run_command([
                'docker', 'ps', '--filter', 'name=forest-mafia-quick-test', '--format', '{{.Status}}'
            ])
            
            if success and 'Up' in stdout:
                print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {stderr}")
            return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            run_command(['docker', 'stop', 'forest-mafia-quick-test'])
            run_command(['docker', 'rm', 'forest-mafia-quick-test'])
            run_command(['docker', 'rmi', 'forest-mafia-quick-test'])
            os.unlink(env_file)
        except:
            pass


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ DOCKER –î–õ–Ø –î–ï–ü–õ–û–Ø")
    print("=" * 50)
    
    tests = [
        ("Docker Installation", test_docker_installation),
        ("Docker Compose Installation", test_docker_compose_installation),
        ("Dockerfile", test_dockerfile),
        ("Docker Compose File", test_docker_compose_file),
        ("Docker Build", test_docker_build),
        ("Docker Run", test_docker_run),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Docker –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
