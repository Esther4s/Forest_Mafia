#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import tempfile
import traceback
from typing import Dict, List, Optional, Tuple
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['BOT_TOKEN'] = 'test_token_123456789'
os.environ['DATABASE_URL'] = 'sqlite:///test.db'
os.environ['POSTGRES_USER'] = 'forest_mafia'
os.environ['POSTGRES_PASSWORD'] = 'forest_mafia_password'
os.environ['ENVIRONMENT'] = 'test'
os.environ['LOG_LEVEL'] = 'DEBUG'

print("üöÄ –¢–ï–°–¢ SQLITE –ë–ê–ó–´ –î–ê–ù–ù–´–•")
print("=" * 50)

def test_sqlite_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã SQLite –º–æ–¥—É–ª–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ SQLite...")
    
    try:
        from database import Base, Game, Player, GameEvent, PlayerAction, Vote
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        print("‚úÖ SQLite –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SQLite: {e}")
        traceback.print_exc()
        return False

def test_sqlite_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite...")
    
    try:
        from database import Base
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine('sqlite:///:memory:', echo=False)
        Base.metadata.create_all(engine)
        
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        result = session.execute("SELECT 1 as test").fetchone()
        if result and result[0] == 1:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —Ä–∞–±–æ—Ç–∞–µ—Ç")
            session.close()
            return True
        else:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –∫ SQLite –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è")
            session.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
        traceback.print_exc()
        return False

def test_sqlite_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ SQLite"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π SQLite...")
    
    try:
        from database import Base, Game, Player, GameEvent, PlayerAction, Vote
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine('sqlite:///:memory:', echo=False)
        Base.metadata.create_all(engine)
        
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É
        game = Game(
            chat_id=12345,
            status='active',
            phase='night',
            round_number=1
        )
        session.add(game)
        session.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = Player(
            user_id=111,
            username="TestPlayer",
            first_name="Test",
            last_name="User",
            game_id=game.id,
            role="wolf",
            team="predators"
        )
        session.add(player)
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        saved_game = session.query(Game).filter_by(chat_id=12345).first()
        saved_player = session.query(Player).filter_by(user_id=111).first()
        
        if saved_game and saved_player:
            print("‚úÖ –ú–æ–¥–µ–ª–∏ SQLite —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            session.close()
            return True
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ SQLite")
            session.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π SQLite: {e}")
        traceback.print_exc()
        return False

def test_sqlite_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å SQLite"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å SQLite...")
    
    try:
        from database import Base, Game, Player, GameEvent, PlayerAction, Vote
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine('sqlite:///:memory:', echo=False)
        Base.metadata.create_all(engine)
        
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        game = Game(chat_id=54321, status='active', phase='day', round_number=1)
        session.add(game)
        session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        players_data = [
            (111, "–í–æ–ª–∫1", "wolf", "predators"),
            (222, "–õ–∏—Å–∞1", "fox", "predators"),
            (333, "–ó–∞—è—Ü1", "hare", "herbivores"),
            (444, "–ö—Ä–æ—Ç1", "mole", "herbivores"),
            (555, "–ë–æ–±—ë—Ä1", "beaver", "herbivores")
        ]
        
        for user_id, username, role, team in players_data:
            player = Player(
                user_id=user_id,
                username=username,
                game_id=game.id,
                role=role,
                team=team
            )
            session.add(player)
        
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        player_count = session.query(Player).filter_by(game_id=game.id).count()
        if player_count == 5:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å SQLite —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            session.close()
            return True
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {player_count}")
            session.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å SQLite: {e}")
        traceback.print_exc()
        return False

def test_sqlite_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ SQLite"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SQLite...")
    
    try:
        from database import Base, Game, Player, GameEvent, PlayerAction, Vote
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine('sqlite:///:memory:', echo=False)
        Base.metadata.create_all(engine)
        
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        game = Game(chat_id=99999, status='active', phase='night', round_number=1)
        session.add(game)
        session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        predators = [
            (111, "–í–æ–ª–∫1", "wolf", "predators"),
            (222, "–õ–∏—Å–∞1", "fox", "predators")
        ]
        
        herbivores = [
            (333, "–ó–∞—è—Ü1", "hare", "herbivores"),
            (444, "–ö—Ä–æ—Ç1", "mole", "herbivores"),
            (555, "–ë–æ–±—ë—Ä1", "beaver", "herbivores")
        ]
        
        for user_id, username, role, team in predators + herbivores:
            player = Player(
                user_id=user_id,
                username=username,
                game_id=game.id,
                role=role,
                team=team
            )
            session.add(player)
        
        session.commit()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
        predators_count = session.query(Player).filter_by(game_id=game.id, team="predators").count()
        herbivores_count = session.query(Player).filter_by(game_id=game.id, team="herbivores").count()
        wolves_count = session.query(Player).filter_by(game_id=game.id, role="wolf").count()
        
        if predators_count == 2 and herbivores_count == 3 and wolves_count == 1:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –∫ SQLite —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            session.close()
            return True
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤: predators={predators_count}, herbivores={herbivores_count}, wolves={wolves_count}")
            session.close()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SQLite: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    tests_passed = 0
    total_tests = 5
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    if test_sqlite_imports():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if test_sqlite_connection():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –ú–æ–¥–µ–ª–∏
    if test_sqlite_models():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 4: –û–ø–µ—Ä–∞—Ü–∏–∏
    if test_sqlite_operations():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 5: –ó–∞–ø—Ä–æ—Å—ã
    if test_sqlite_queries():
        tests_passed += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ SQLITE –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
        print("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã SQLite –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
