#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Railway
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç psycopg2 –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
"""

import os
import json
import psycopg2
import psycopg2.extras
from psycopg2 import pool
from typing import Optional, List, Dict, Any, Tuple
import logging
import time
from contextlib import contextmanager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseConnection:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL"""
    
    def __init__(self, database_url: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            database_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–µ—Å–ª–∏ None, —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ DATABASE_URL)
        """
        self.database_url = database_url or os.environ.get('DATABASE_URL')
        if not self.database_url:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_params = self._parse_database_url()
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.connection_pool = None
        self._init_connection_pool()
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _parse_database_url(self) -> Dict[str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç DATABASE_URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å postgresql:// –∏–ª–∏ postgres://
            url = self.database_url.replace('postgresql://', '').replace('postgres://', '')
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if '@' in url:
                auth_part, host_part = url.split('@', 1)
                if ':' in auth_part:
                    user, password = auth_part.split(':', 1)
                else:
                    user, password = auth_part, ''
            else:
                user, password = '', ''
                host_part = url
            
            # –ü–∞—Ä—Å–∏–º —Ö–æ—Å—Ç –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if '/' in host_part:
                host_port, database = host_part.split('/', 1)
                if ':' in host_port:
                    host, port = host_port.split(':', 1)
                else:
                    host, port = host_port, '5432'
            else:
                host, port, database = host_part, '5432', ''
            
            return {
                'host': host,
                'port': port,
                'database': database,
                'user': user,
                'password': password
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DATABASE_URL: {e}")
            raise
    
    def _init_connection_pool(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            self.connection_pool = psycopg2.pool.ThreadedConnectionPool(
                minconn=1,
                maxconn=10,
                **self.connection_params
            )
            logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            raise
    
    @contextmanager
    def get_connection(self):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
        
        Yields:
            psycopg2.connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        connection = None
        try:
            connection = self.connection_pool.getconn()
            yield connection
        except Exception as e:
            if connection:
                connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise
        finally:
            if connection:
                self.connection_pool.putconn(connection)
    
    @contextmanager
    def get_cursor(self, connection=None):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        
        Args:
            connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ None, –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ –ø—É–ª–∞)
        
        Yields:
            psycopg2.cursor: –ö—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        if connection:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            cursor = connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            try:
                yield cursor
            finally:
                cursor.close()
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
            with self.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                try:
                    yield cursor
                finally:
                    cursor.close()
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with self.get_connection() as conn:
                with self.get_cursor(conn) as cursor:
                    cursor.execute("SELECT 1")
                    result = cursor.fetchone()
                    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω")
                    return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.connection_pool:
            self.connection_pool.closeall()
            logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db_connection: Optional[DatabaseConnection] = None

def init_db(database_url: Optional[str] = None) -> DatabaseConnection:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        database_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ None, —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ DATABASE_URL)
    
    Returns:
        DatabaseConnection: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    global db_connection
    
    try:
        db_connection = DatabaseConnection(database_url)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if db_connection.test_connection():
            logger.info("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return db_connection
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def execute_query(query: str, params: Optional[Tuple] = None) -> int:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç INSERT/UPDATE/DELETE –∑–∞–ø—Ä–æ—Å
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    """
    if not db_connection:
        raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ init_db() —Å–Ω–∞—á–∞–ª–∞.")
    
    max_retries = 3
    retry_delay = 1
    
    for attempt in range(max_retries):
        try:
            with db_connection.get_connection() as conn:
                with db_connection.get_cursor(conn) as cursor:
                    cursor.execute(query, params)
                    conn.commit()
                    
                    affected_rows = cursor.rowcount
                    logger.debug(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}")
                    return affected_rows
                    
        except psycopg2.OperationalError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                time.sleep(retry_delay)
                retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                raise
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

def fetch_query(query: str, params: Optional[Tuple] = None, fetch_one: bool = False) -> List[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SELECT –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        fetch_one: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
    
    Returns:
        List[Dict] –∏–ª–∏ Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    """
    if not db_connection:
        raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ init_db() —Å–Ω–∞—á–∞–ª–∞.")
    
    max_retries = 3
    retry_delay = 1
    
    for attempt in range(max_retries):
        try:
            with db_connection.get_connection() as conn:
                with db_connection.get_cursor(conn) as cursor:
                    cursor.execute(query, params)
                    
                    if fetch_one:
                        result = cursor.fetchone()
                        if result:
                            return dict(result)
                        return None
                    else:
                        results = cursor.fetchall()
                        return [dict(row) for row in results]
                        
        except psycopg2.OperationalError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                time.sleep(retry_delay)
                retry_delay *= 2
                continue
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                raise
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

def fetch_one(query: str, params: Optional[Tuple] = None) -> Optional[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SELECT –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    
    Returns:
        Dict –∏–ª–∏ None: –û–¥–Ω–∞ –∑–∞–ø–∏—Å—å –∏–ª–∏ None
    """
    return fetch_query(query, params, fetch_one=True)

def execute_many(query: str, params_list: List[Tuple]) -> int:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (batch insert/update)
    
    Args:
        query: SQL –∑–∞–ø—Ä–æ—Å
        params_list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    """
    if not db_connection:
        raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ init_db() —Å–Ω–∞—á–∞–ª–∞.")
    
    try:
        with db_connection.get_connection() as conn:
            with db_connection.get_cursor(conn) as cursor:
                cursor.executemany(query, params_list)
                conn.commit()
                
                affected_rows = cursor.rowcount
                logger.debug(f"‚úÖ Batch –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}")
                return affected_rows
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è batch –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise

def close_db():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global db_connection
    if db_connection:
        db_connection.close()
        db_connection = None
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏

def create_user(user_id: int, username: str = None) -> int:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram user ID
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        int: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    query = """
        INSERT INTO users (user_id, username) 
        VALUES (%s, %s) 
        ON CONFLICT (user_id) DO UPDATE SET 
            username = EXCLUDED.username,
            updated_at = CURRENT_TIMESTAMP
        RETURNING id
    """
    result = fetch_one(query, (user_id, username))
    return result['id'] if result else None

def get_user_by_telegram_id(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    
    Args:
        user_id: Telegram user ID
    
    Returns:
        Dict –∏–ª–∏ None: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    query = "SELECT * FROM users WHERE user_id = %s"
    return fetch_one(query, (user_id,))

def update_user_balance(user_id: int, new_balance: float) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram user ID
        new_balance: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    query = "UPDATE users SET balance = %s, updated_at = CURRENT_TIMESTAMP WHERE user_id = %s"
    affected = execute_query(query, (new_balance, user_id))
    return affected > 0

def get_shop_items() -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    """
    query = "SELECT * FROM shop WHERE is_active = TRUE ORDER BY category, price"
    return fetch_query(query)

def create_purchase(user_id: int, item_id: int, quantity: int = 1) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    
    Args:
        user_id: Telegram user ID
        item_id: ID —Ç–æ–≤–∞—Ä–∞
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    item_query = "SELECT price FROM shop WHERE id = %s AND is_active = TRUE"
    item = fetch_one(item_query, (item_id,))
    
    if not item:
        logger.error(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return False
    
    total_price = item['price'] * quantity
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
    purchase_query = """
        INSERT INTO purchases (user_id, item_id, quantity, total_price)
        VALUES (%s, %s, %s, %s)
    """
    
    try:
        execute_query(purchase_query, (user_id, item_id, quantity, total_price))
        logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–æ–≤–∞—Ä {item_id}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: {e}")
        return False

def get_user_stats(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram user ID
    
    Returns:
        Dict –∏–ª–∏ None: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    query = "SELECT * FROM stats WHERE user_id = %s"
    return fetch_one(query, (user_id,))

def update_user_stats(user_id: int, games_played: int = None, games_won: int = None, 
                     games_lost: int = None) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram user ID
        games_played: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        games_won: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        games_lost: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    # –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    updates = []
    params = []
    
    if games_played is not None:
        updates.append("games_played = %s")
        params.append(games_played)
    
    if games_won is not None:
        updates.append("games_won = %s")
        params.append(games_won)
    
    if games_lost is not None:
        updates.append("games_lost = %s")
        params.append(games_lost)
    
    if not updates:
        return False
    
    updates.append("last_played = CURRENT_TIMESTAMP")
    updates.append("updated_at = CURRENT_TIMESTAMP")
    params.append(user_id)
    
    query = f"UPDATE stats SET {', '.join(updates)} WHERE user_id = %s"
    
    try:
        affected = execute_query(query, tuple(params))
        return affected > 0
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –ß–ê–¢–ê ====================

def get_chat_settings(chat_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ—Ç –∏—Ö —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
    
    Returns:
        Dict: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    query = "SELECT * FROM chat_settings WHERE chat_id = %s"
    settings = fetch_one(query, (chat_id,))
    
    if settings:
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} –Ω–∞–π–¥–µ–Ω—ã")
        return settings
    
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    
    default_settings = {
        'chat_id': chat_id,
        'test_mode': False,
        'min_players': 4,
        'max_players': 12,
        'night_duration': 60,
        'day_duration': 300,
        'vote_duration': 120,
        'fox_death_threshold': 2,
        'beaver_protection': True,
        'mole_reveal_threshold': 3,
        'herbivore_survival_threshold': 1,
        'max_rounds': 20,
        'max_time': 3600,
        'min_alive': 2
    }
    
    insert_query = """
        INSERT INTO chat_settings (
            chat_id, test_mode, min_players, max_players, night_duration, 
            day_duration, vote_duration, fox_death_threshold, beaver_protection,
            mole_reveal_threshold, herbivore_survival_threshold, max_rounds,
            max_time, min_alive
        ) VALUES (
            %(chat_id)s, %(test_mode)s, %(min_players)s, %(max_players)s, 
            %(night_duration)s, %(day_duration)s, %(vote_duration)s, 
            %(fox_death_threshold)s, %(beaver_protection)s, %(mole_reveal_threshold)s,
            %(herbivore_survival_threshold)s, %(max_rounds)s, %(max_time)s, %(min_alive)s
        )
    """
    
    try:
        execute_query(insert_query, default_settings)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} —Å–æ–∑–¥–∞–Ω—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return get_chat_settings(chat_id)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}: {e}")
        return default_settings

def update_chat_settings(chat_id: int, **kwargs) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    if not kwargs:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}")
        return False
    
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–ª–µ–π
    allowed_fields = {
        'test_mode', 'min_players', 'max_players', 'night_duration', 
        'day_duration', 'vote_duration', 'fox_death_threshold', 
        'beaver_protection', 'mole_reveal_threshold', 'herbivore_survival_threshold',
        'max_rounds', 'max_time', 'min_alive'
    }
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è
    valid_fields = {k: v for k, v in kwargs.items() if k in allowed_fields}
    
    if not valid_fields:
        logger.error(f"‚ùå –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    set_clauses = []
    values = []
    
    for field, value in valid_fields.items():
        set_clauses.append(f"{field} = %s")
        values.append(value)
    
    values.append(chat_id)  # –î–ª—è WHERE —É—Å–ª–æ–≤–∏—è
    
    query = f"""
        UPDATE chat_settings 
        SET {', '.join(set_clauses)}
        WHERE chat_id = %s
    """
    
    try:
        execute_query(query, values)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {list(valid_fields.keys())}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}: {e}")
        return False

def reset_chat_settings(chat_id: int) -> bool:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–±—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
    """
    default_settings = {
        'test_mode': False,
        'min_players': 4,
        'max_players': 12,
        'night_duration': 60,
        'day_duration': 300,
        'vote_duration': 120,
        'fox_death_threshold': 2,
        'beaver_protection': True,
        'mole_reveal_threshold': 3,
        'herbivore_survival_threshold': 1,
        'max_rounds': 20,
        'max_time': 3600,
        'min_alive': 2
    }
    
    try:
        success = update_chat_settings(chat_id, **default_settings)
        if success:
            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}: {e}")
        return False

def delete_chat_settings(chat_id: int) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    query = "DELETE FROM chat_settings WHERE chat_id = %s"
    
    try:
        execute_query(query, (chat_id,))
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} —É–¥–∞–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ {chat_id}: {e}")
        return False

def get_all_chat_settings() -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    """
    query = "SELECT * FROM chat_settings ORDER BY chat_id"
    return fetch_query(query)

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–û–í–´–ú–ò –¢–ê–ë–õ–ò–¶–ê–ú–ò ====================

def save_player_action(game_id: str, player_id: str, action_type: str, target_id: str = None, action_data: dict = None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É player_actions
    
    Args:
        game_id: ID –∏–≥—Ä—ã
        player_id: ID –∏–≥—Ä–æ–∫–∞
        action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (vote, kill, protect, etc.)
        target_id: ID —Ü–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        action_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    """
    try:
        query = """
        INSERT INTO player_actions (game_id, player_id, action_type, target_id, action_data)
        VALUES (%s, %s, %s, %s, %s)
        """
        params = (game_id, player_id, action_type, target_id, json.dumps(action_data) if action_data else '{}')
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞: {e}")
        return False

def save_vote(game_id: str, voter_id: str, target_id: str, vote_type: str, round_number: int = 1):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ–ª–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É votes
    
    Args:
        game_id: ID –∏–≥—Ä—ã
        voter_id: ID –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
        target_id: ID —Ü–µ–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        vote_type: –¢–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (exile, kill, etc.)
        round_number: –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    """
    try:
        query = """
        INSERT INTO votes (game_id, voter_id, target_id, vote_type, round_number)
        VALUES (%s, %s, %s, %s, %s)
        """
        params = (game_id, voter_id, target_id, vote_type, round_number)
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
        return False

def update_player_stats(player_id: str, user_id: int, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ player_stats
    
    Args:
        player_id: ID –∏–≥—Ä–æ–∫–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (games_played, games_won, games_lost, etc.)
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        check_query = "SELECT id FROM player_stats WHERE player_id = %s"
        existing = fetch_one(check_query, (player_id,))
        
        if not existing:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            insert_query = """
            INSERT INTO player_stats (player_id, user_id, games_played, games_won, games_lost, 
                                    roles_played, total_kills, total_deaths, last_played)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            params = (
                player_id, user_id,
                kwargs.get('games_played', 0),
                kwargs.get('games_won', 0),
                kwargs.get('games_lost', 0),
                json.dumps(kwargs.get('roles_played', {})),
                kwargs.get('total_kills', 0),
                kwargs.get('total_deaths', 0),
                kwargs.get('last_played')
            )
            execute_query(insert_query, params)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            set_clauses = []
            params = []
            for key, value in kwargs.items():
                if key == 'roles_played':
                    set_clauses.append(f"{key} = %s")
                    params.append(json.dumps(value))
                else:
                    set_clauses.append(f"{key} = %s")
                    params.append(value)
            
            if set_clauses:
                params.append(player_id)
                update_query = f"UPDATE player_stats SET {', '.join(set_clauses)} WHERE player_id = %s"
                execute_query(update_query, params)
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞: {e}")
        return False

def get_bot_setting(setting_name: str, default_value: str = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bot_settings
    
    Args:
        setting_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Returns:
        str: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ default_value
    """
    try:
        query = "SELECT setting_value FROM bot_settings WHERE setting_name = %s"
        result = fetch_one(query, (setting_name,))
        return result['setting_value'] if result else default_value
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
        return default_value

def set_bot_setting(setting_name: str, setting_value: str, description: str = None):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ bot_settings
    
    Args:
        setting_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setting_value: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    """
    try:
        query = """
        INSERT INTO bot_settings (setting_name, setting_value, description)
        VALUES (%s, %s, %s)
        ON CONFLICT (setting_name) 
        DO UPDATE SET setting_value = EXCLUDED.setting_value, 
                      description = EXCLUDED.description
        """
        params = (setting_name, setting_value, description)
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò–ì–† ====================

def save_game_to_db(game_id: str, chat_id: int, thread_id: int = None, 
                   status: str = 'waiting', phase: str = None, 
                   round_number: int = 0, settings: dict = None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        game_id: ID –∏–≥—Ä—ã
        chat_id: ID —á–∞—Ç–∞
        thread_id: ID —Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        status: –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        phase: –§–∞–∑–∞ –∏–≥—Ä—ã
        round_number: –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    """
    try:
        query = """
        INSERT INTO games (id, chat_id, thread_id, status, phase, round_number, settings)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (id) 
        DO UPDATE SET 
            chat_id = EXCLUDED.chat_id,
            thread_id = EXCLUDED.thread_id,
            status = EXCLUDED.status,
            phase = EXCLUDED.phase,
            round_number = EXCLUDED.round_number,
            settings = EXCLUDED.settings
        """
        params = (game_id, chat_id, thread_id, status, phase, round_number, 
                 json.dumps(settings) if settings else '{}')
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")
        return False

def save_player_to_db(player_id: str, game_id: str, user_id: int, 
                     username: str = None, first_name: str = None, 
                     last_name: str = None, role: str = None, 
                     team: str = None, is_alive: bool = True):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        player_id: ID –∏–≥—Ä–æ–∫–∞
        game_id: ID –∏–≥—Ä—ã
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name: –ò–º—è
        last_name: –§–∞–º–∏–ª–∏—è
        role: –†–æ–ª—å –≤ –∏–≥—Ä–µ
        team: –ö–æ–º–∞–Ω–¥–∞
        is_alive: –ñ–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    """
    try:
        query = """
        INSERT INTO players (id, game_id, user_id, username, first_name, last_name, role, team, is_alive)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (id) 
        DO UPDATE SET 
            username = EXCLUDED.username,
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name,
            role = EXCLUDED.role,
            team = EXCLUDED.team,
            is_alive = EXCLUDED.is_alive
        """
        params = (player_id, game_id, user_id, username, first_name, 
                 last_name, role, team, is_alive)
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {e}")
        return False

def update_game_phase(game_id: str, phase: str, round_number: int = None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–∑—É –∏–≥—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        game_id: ID –∏–≥—Ä—ã
        phase: –ù–æ–≤–∞—è —Ñ–∞–∑–∞
        round_number: –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    """
    try:
        if round_number is not None:
            query = "UPDATE games SET phase = %s, round_number = %s WHERE id = %s"
            params = (phase, round_number, game_id)
        else:
            query = "UPDATE games SET phase = %s WHERE id = %s"
            params = (phase, game_id)
        
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –∏–≥—Ä—ã: {e}")
        return False

def finish_game_in_db(game_id: str, winner_team: str):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        game_id: ID –∏–≥—Ä—ã
        winner_team: –ö–æ–º–∞–Ω–¥–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    """
    try:
        query = """
        UPDATE games 
        SET status = 'finished', winner_team = %s, finished_at = CURRENT_TIMESTAMP 
        WHERE id = %s
        """
        params = (winner_team, game_id)
        execute_query(query, params)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")
        return False

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================

def get_team_stats() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ (—Ö–∏—â–Ω–∏–∫–∏ vs –º–∏—Ä–Ω—ã–µ)
    
    Returns:
        Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–º–∞–Ω–¥
    """
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥
        query = """
        SELECT 
            winner_team,
            COUNT(*) as wins
        FROM games 
        WHERE status = 'finished' AND winner_team IS NOT NULL
        GROUP BY winner_team
        """
        team_wins = fetch_query(query)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
        total_games_query = "SELECT COUNT(*) as total FROM games WHERE status = 'finished'"
        total_games = fetch_one(total_games_query)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        players_query = """
        SELECT 
            COUNT(*) as total_players,
            SUM(games_played) as total_games,
            SUM(games_won) as total_wins
        FROM stats
        """
        players_stats = fetch_one(players_query)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'total_games': total_games['total'] if total_games else 0,
            'team_wins': {},
            'players_stats': players_stats or {}
        }
        
        for team_win in team_wins:
            result['team_wins'][team_win['winner_team']] = team_win['wins']
        
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        return {'total_games': 0, 'team_wins': {}, 'players_stats': {}}

def get_top_players(limit: int = 10, sort_by: str = 'games_won') -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    
    Args:
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ
        sort_by: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (games_won, games_played, etc.)
    
    Returns:
        List —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    """
    try:
        query = f"""
        SELECT 
            s.user_id,
            u.username,
            s.games_played,
            s.games_won,
            s.games_lost,
            s.last_played,
            ROUND((s.games_won::float / NULLIF(s.games_played, 0)) * 100, 1) as win_rate
        FROM stats s
        LEFT JOIN users u ON s.user_id = u.user_id
        WHERE s.games_played > 0
        ORDER BY {sort_by} DESC, win_rate DESC
        LIMIT %s
        """
        return fetch_query(query, (limit,))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤: {e}")
        return []

def get_best_predator() -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ö–∏—â–Ω–∏–∫–∞ (–∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –≤ —Ä–æ–ª–∏ —Ö–∏—â–Ω–∏–∫–∞)
    
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ª—É—á—à–µ–≥–æ —Ö–∏—â–Ω–∏–∫–∞ –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞–ª–∏ —Ö–∏—â–Ω–∏–∫–∞–º–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–ª–∏
        query = """
        SELECT 
            s.user_id,
            u.username,
            s.games_won,
            s.games_played,
            ROUND((s.games_won::float / NULLIF(s.games_played, 0)) * 100, 1) as win_rate
        FROM stats s
        LEFT JOIN users u ON s.user_id = u.user_id
        WHERE s.games_played > 0 AND s.games_won > 0
        ORDER BY s.games_won DESC, win_rate DESC
        LIMIT 1
        """
        return fetch_one(query)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ö–∏—â–Ω–∏–∫–∞: {e}")
        return None

def get_best_herbivore() -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ (–∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –≤ —Ä–æ–ª–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ)
    
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ª—É—á—à–µ–≥–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ –∏–ª–∏ None
    """
    try:
        # –î–ª—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º –≤ —Ç–∞–±–ª–∏—Ü–µ stats
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–æ–ª–µ–π
        query = """
        SELECT 
            s.user_id,
            u.username,
            s.games_won,
            s.games_played,
            ROUND((s.games_won::float / NULLIF(s.games_played, 0)) * 100, 1) as win_rate
        FROM stats s
        LEFT JOIN users u ON s.user_id = u.user_id
        WHERE s.games_played > 0 AND s.games_won > 0
        ORDER BY s.games_won DESC, win_rate DESC
        LIMIT 1
        """
        return fetch_one(query)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ: {e}")
        return None

def get_player_detailed_stats(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Dict —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ None
    """
    try:
        query = """
        SELECT 
            s.user_id,
            u.username,
            s.games_played,
            s.games_won,
            s.games_lost,
            s.last_played,
            ROUND((s.games_won::float / NULLIF(s.games_played, 0)) * 100, 1) as win_rate
        FROM stats s
        LEFT JOIN users u ON s.user_id = u.user_id
        WHERE s.user_id = %s
        """
        return fetch_one(query, (user_id,))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def create_tables():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        drop_sql = """
        DROP TABLE IF EXISTS votes CASCADE;
        DROP TABLE IF EXISTS player_actions CASCADE;
        DROP TABLE IF EXISTS player_stats CASCADE;
        DROP TABLE IF EXISTS purchases CASCADE;
        DROP TABLE IF EXISTS game_events CASCADE;
        DROP TABLE IF EXISTS players CASCADE;
        DROP TABLE IF EXISTS games CASCADE;
        DROP TABLE IF EXISTS stats CASCADE;
        DROP TABLE IF EXISTS shop CASCADE;
        DROP TABLE IF EXISTS users CASCADE;
        DROP TABLE IF EXISTS chat_settings CASCADE;
        DROP TABLE IF EXISTS bot_settings CASCADE;
        """
        
        logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
        execute_query(drop_sql)
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        tables_sql = """
        -- –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL
        CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        CREATE TABLE users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL UNIQUE,
            username VARCHAR(255),
            balance INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä
        CREATE TABLE games (
            id VARCHAR PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            thread_id INTEGER,
            status VARCHAR DEFAULT 'waiting',
            phase VARCHAR,
            round_number INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            started_at TIMESTAMP,
            finished_at TIMESTAMP,
            winner_team VARCHAR,
            settings JSONB DEFAULT '{}'::jsonb
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
        CREATE TABLE players (
            id VARCHAR PRIMARY KEY,
            game_id VARCHAR NOT NULL,
            user_id INTEGER NOT NULL,
            username VARCHAR,
            first_name VARCHAR,
            last_name VARCHAR,
            role VARCHAR,
            team VARCHAR,
            is_alive BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
        CREATE TABLE game_events (
            id VARCHAR PRIMARY KEY,
            game_id VARCHAR NOT NULL,
            event_type VARCHAR NOT NULL,
            description TEXT,
            data JSONB DEFAULT '{}'::jsonb,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        CREATE TABLE stats (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL UNIQUE,
            games_played INTEGER DEFAULT 0,
            games_won INTEGER DEFAULT 0,
            games_lost INTEGER DEFAULT 0,
            last_played TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        CREATE TABLE shop (
            id SERIAL PRIMARY KEY,
            item_name VARCHAR(255) NOT NULL,
            price INTEGER NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫
        CREATE TABLE purchases (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            item_id INTEGER NOT NULL,
            purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
        CREATE TABLE chat_settings (
            id SERIAL PRIMARY KEY,
            chat_id BIGINT NOT NULL UNIQUE,
            test_mode BOOLEAN DEFAULT FALSE,
            min_players INTEGER DEFAULT 4,
            max_players INTEGER DEFAULT 12,
            night_duration INTEGER DEFAULT 60,
            day_duration INTEGER DEFAULT 300,
            vote_duration INTEGER DEFAULT 120,
            fox_death_threshold INTEGER DEFAULT 2,
            beaver_protection BOOLEAN DEFAULT TRUE,
            mole_reveal_threshold INTEGER DEFAULT 3,
            herbivore_survival_threshold INTEGER DEFAULT 1,
            max_rounds INTEGER DEFAULT 20,
            max_time INTEGER DEFAULT 3600,
            min_alive INTEGER DEFAULT 2,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        CREATE TABLE bot_settings (
            id SERIAL PRIMARY KEY,
            setting_name VARCHAR(255) NOT NULL UNIQUE,
            setting_value TEXT,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤
        CREATE TABLE player_actions (
            id SERIAL PRIMARY KEY,
            game_id VARCHAR NOT NULL,
            player_id VARCHAR NOT NULL,
            action_type VARCHAR NOT NULL,
            target_id VARCHAR,
            action_data JSONB DEFAULT '{}'::jsonb,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
        CREATE TABLE player_stats (
            id SERIAL PRIMARY KEY,
            player_id VARCHAR NOT NULL,
            user_id BIGINT NOT NULL,
            games_played INTEGER DEFAULT 0,
            games_won INTEGER DEFAULT 0,
            games_lost INTEGER DEFAULT 0,
            roles_played JSONB DEFAULT '{}'::jsonb,
            total_kills INTEGER DEFAULT 0,
            total_deaths INTEGER DEFAULT 0,
            last_played TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
        CREATE TABLE votes (
            id SERIAL PRIMARY KEY,
            game_id VARCHAR NOT NULL,
            voter_id VARCHAR NOT NULL,
            target_id VARCHAR,
            vote_type VARCHAR NOT NULL,
            round_number INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        CREATE INDEX idx_users_user_id ON users(user_id);
        CREATE INDEX idx_games_chat_id ON games(chat_id);
        CREATE INDEX idx_games_status ON games(status);
        CREATE INDEX idx_players_game_id ON players(game_id);
        CREATE INDEX idx_players_user_id ON players(user_id);
        CREATE INDEX idx_game_events_game_id ON game_events(game_id);
        CREATE INDEX idx_stats_user_id ON stats(user_id);
        CREATE INDEX idx_purchases_user_id ON purchases(user_id);
        CREATE INDEX idx_purchases_item_id ON purchases(item_id);
        CREATE INDEX idx_chat_settings_chat_id ON chat_settings(chat_id);
        CREATE INDEX idx_bot_settings_name ON bot_settings(setting_name);
        CREATE INDEX idx_player_actions_game_id ON player_actions(game_id);
        CREATE INDEX idx_player_actions_player_id ON player_actions(player_id);
        CREATE INDEX idx_player_stats_player_id ON player_stats(player_id);
        CREATE INDEX idx_player_stats_user_id ON player_stats(user_id);
        CREATE INDEX idx_votes_game_id ON votes(game_id);
        CREATE INDEX idx_votes_voter_id ON votes(voter_id);
        
        -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = CURRENT_TIMESTAMP;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        
        -- –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        CREATE TRIGGER trigger_users_updated_at
            BEFORE UPDATE ON users
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
            
        CREATE TRIGGER trigger_players_updated_at
            BEFORE UPDATE ON players
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
            
        CREATE TRIGGER trigger_stats_updated_at
            BEFORE UPDATE ON stats
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
            
        CREATE TRIGGER trigger_chat_settings_updated_at
            BEFORE UPDATE ON chat_settings
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
            
        CREATE TRIGGER trigger_bot_settings_updated_at
            BEFORE UPDATE ON bot_settings
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
            
        CREATE TRIGGER trigger_player_stats_updated_at
            BEFORE UPDATE ON player_stats
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        logger.info("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ...")
        execute_query(tables_sql)
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = init_db()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if db.test_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = 123456789
        create_user(user_id, "test_user")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
        items = get_shop_items()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {len(items)}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        close_db()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
