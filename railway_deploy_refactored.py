#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Railway Deployment Script - Refactored Version

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ–ø–ª–æ—è –±–æ—Ç–∞ –Ω–∞ Railway:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

–ê–≤—Ç–æ—Ä: Refactored by AI Assistant
–í–µ—Ä—Å–∏—è: 2.0
"""

import os
import sys
import subprocess
import time
import logging
from typing import List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
from contextlib import contextmanager


class DeploymentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –¥–µ–ø–ª–æ—è"""
    SUCCESS = "success"
    FAILED = "failed"
    IN_PROGRESS = "in_progress"


@dataclass
class DeploymentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    required_env_vars: List[str]
    requirements_file: str
    bot_module_name: str
    bot_class_name: str
    test_query: str


@dataclass
class DeploymentResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è"""
    status: DeploymentStatus
    message: str
    error: Optional[Exception] = None


class DeploymentLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–µ–ø–ª–æ—è —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._setup_logging()
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout)
            ]
        )
    
    def info(self, message: str, emoji: str = "‚ÑπÔ∏è"):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(f"{emoji} {message}")
    
    def success(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        self.logger.info(f"‚úÖ {message}")
    
    def error(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.logger.error(f"‚ùå {message}")
    
    def warning(self, message: str):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.logger.warning(f"‚ö†Ô∏è {message}")
    
    def step(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —à–∞–≥–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.logger.info(f"üîÑ {message}")


class EnvironmentChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self, logger: DeploymentLogger):
        self.logger = logger
    
    def check_required_variables(self, required_vars: List[str]) -> DeploymentResult:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        Args:
            required_vars: –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            
        Returns:
            DeploymentResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...", "üîç")
        
        missing_vars = []
        for var in required_vars:
            if not os.environ.get(var):
                missing_vars.append(var)
        
        if missing_vars:
            error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg
            )
        
        self.logger.success("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return DeploymentResult(
            status=DeploymentStatus.SUCCESS,
            message="–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã"
        )


class DependencyManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, logger: DeploymentLogger):
        self.logger = logger
    
    def install_dependencies(self, requirements_file: str) -> DeploymentResult:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt
        
        Args:
            requirements_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É requirements.txt
            
        Returns:
            DeploymentResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        self.logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", "üì¶")
        
        if not os.path.exists(requirements_file):
            error_msg = f"–§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg
            )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            result = subprocess.run(
                [sys.executable, '-m', 'pip', 'install', '-r', requirements_file],
                check=True,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            self.logger.success("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return DeploymentResult(
                status=DeploymentStatus.SUCCESS,
                message="–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            )
            
        except subprocess.TimeoutExpired:
            error_msg = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg
            )
        except subprocess.CalledProcessError as e:
            error_msg = f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg,
                error=e
            )


class ImportTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self, logger: DeploymentLogger):
        self.logger = logger
    
    def test_critical_imports(self, bot_module: str, bot_class: str) -> DeploymentResult:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        
        Args:
            bot_module: –ò–º—è –º–æ–¥—É–ª—è –±–æ—Ç–∞
            bot_class: –ò–º—è –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
            
        Returns:
            DeploymentResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...", "üß™")
        
        critical_modules = [
            (bot_module, bot_class),
            ('game_logic', 'Game'),
            ('night_actions', 'NightActions'),
            ('night_interface', 'NightInterface'),
            ('config', 'BOT_TOKEN')
        ]
        
        failed_imports = []
        
        for module_name, class_name in critical_modules:
            try:
                module = __import__(module_name, fromlist=[class_name])
                getattr(module, class_name)
            except ImportError as e:
                failed_imports.append(f"{module_name}.{class_name}: {e}")
            except AttributeError as e:
                failed_imports.append(f"{module_name}.{class_name}: {e}")
        
        if failed_imports:
            error_msg = f"–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {'; '.join(failed_imports)}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg
            )
        
        self.logger.success("–í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return DeploymentResult(
            status=DeploymentStatus.SUCCESS,
            message="–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        )


class DatabaseTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, logger: DeploymentLogger):
        self.logger = logger
    
    def test_database_connection(self, test_query: str) -> DeploymentResult:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            test_query: –¢–µ—Å—Ç–æ–≤—ã–π SQL –∑–∞–ø—Ä–æ—Å
            
        Returns:
            DeploymentResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "üóÑÔ∏è")
        
        try:
            from database_psycopg2 import init_db, execute_query, close_db
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            db_connection = init_db()
            if db_connection is None:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                self.logger.error(error_msg)
                return DeploymentResult(
                    status=DeploymentStatus.FAILED,
                    message=error_msg
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            result = execute_query(test_query)
            if not result:
                error_msg = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è"
                self.logger.error(error_msg)
                close_db()
                return DeploymentResult(
                    status=DeploymentStatus.FAILED,
                    message=error_msg
                )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            close_db()
            self.logger.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return DeploymentResult(
                status=DeploymentStatus.SUCCESS,
                message="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ"
            )
            
        except ImportError as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ë–î: {e}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg,
                error=e
            )
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {e}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg,
                error=e
            )


class BotLauncher:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    
    def __init__(self, logger: DeploymentLogger):
        self.logger = logger
    
    def launch_bot(self, bot_module: str, bot_class: str) -> DeploymentResult:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        
        Args:
            bot_module: –ò–º—è –º–æ–¥—É–ª—è –±–æ—Ç–∞
            bot_class: –ò–º—è –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
            
        Returns:
            DeploymentResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—É—Å–∫–∞
        """
        self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...", "üöÄ")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –±–æ—Ç–∞
            module = __import__(bot_module, fromlist=[bot_class])
            bot_class_obj = getattr(module, bot_class)
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            bot_instance = bot_class_obj()
            self.logger.success("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.logger.step("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            bot_instance.run()
            
            return DeploymentResult(
                status=DeploymentStatus.SUCCESS,
                message="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            )
            
        except ImportError as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {bot_module}.{bot_class}: {e}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg,
                error=e
            )
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}"
            self.logger.error(error_msg)
            return DeploymentResult(
                status=DeploymentStatus.FAILED,
                message=error_msg,
                error=e
            )


class RailwayDeploymentManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è –Ω–∞ Railway"""
    
    def __init__(self, config: DeploymentConfig):
        self.config = config
        self.logger = DeploymentLogger()
        self.env_checker = EnvironmentChecker(self.logger)
        self.dependency_manager = DependencyManager(self.logger)
        self.import_tester = ImportTester(self.logger)
        self.db_tester = DatabaseTester(self.logger)
        self.bot_launcher = BotLauncher(self.logger)
    
    def run_deployment(self) -> DeploymentResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ–ø–ª–æ—è
        
        Returns:
            DeploymentResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–µ–ø–ª–æ—è
        """
        self.logger.info("–î–ï–ü–õ–û–ô –ù–ê RAILWAY", "üöÄ")
        self.logger.info("=" * 50)
        
        # –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –¥–µ–ø–ª–æ—è
        deployment_steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self._check_environment),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self._install_dependencies),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤", self._test_imports),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self._test_database),
            ("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞", self._launch_bot)
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
        for step_name, step_function in deployment_steps:
            self.logger.step(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {step_name}")
            
            result = step_function()
            if result.status == DeploymentStatus.FAILED:
                self.logger.error(f"–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ —à–∞–≥–µ '{step_name}': {result.message}")
                return result
        
        self.logger.success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return DeploymentResult(
            status=DeploymentStatus.SUCCESS,
            message="–î–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        )
    
    def _check_environment(self) -> DeploymentResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return self.env_checker.check_required_variables(self.config.required_env_vars)
    
    def _install_dependencies(self) -> DeploymentResult:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        return self.dependency_manager.install_dependencies(self.config.requirements_file)
    
    def _test_imports(self) -> DeploymentResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        return self.import_tester.test_critical_imports(
            self.config.bot_module_name,
            self.config.bot_class_name
        )
    
    def _test_database(self) -> DeploymentResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.db_tester.test_database_connection(self.config.test_query)
    
    def _launch_bot(self) -> DeploymentResult:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        return self.bot_launcher.launch_bot(
            self.config.bot_module_name,
            self.config.bot_class_name
        )


def create_deployment_config() -> DeploymentConfig:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–ø–ª–æ—è"""
    return DeploymentConfig(
        required_env_vars=['BOT_TOKEN', 'DATABASE_URL'],
        requirements_file='requirements.txt',
        bot_module_name='bot',
        bot_class_name='ForestWolvesBot',  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ ForestMafiaBot
        test_query='SELECT 1 as test'
    )


def main() -> int:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
    
    Returns:
        –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = create_deployment_config()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ—è
        deployment_manager = RailwayDeploymentManager(config)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
        result = deployment_manager.run_deployment()
        
        if result.status == DeploymentStatus.SUCCESS:
            return 0
        else:
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
