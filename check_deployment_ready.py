#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway
"""

import os
import sys
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")
    
    try:
        import subprocess
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        
        if result.stdout.strip():
            logger.warning("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            logger.warning(result.stdout)
            return False
        else:
            logger.info("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git: {e}")
        return False

def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'bot.py',
        'requirements.txt',
        'railway.json',
        'config.py',
        'database_psycopg2.py',
        'game_logic.py',
        'night_actions.py',
        'forest_mafia_settings.py',
        'global_settings.py',
        'database_balance_manager.py'
    ]
    
    missing_files = []
    
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    else:
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Railway...")
    
    try:
        import json
        
        with open('railway.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'deploy' not in config:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'deploy' –≤ railway.json")
            return False
        
        if 'startCommand' not in config['deploy']:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'startCommand' –≤ railway.json")
            return False
        
        if config['deploy']['startCommand'] != 'python bot.py':
            logger.warning("‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ railway.json: {e}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt...")
    
    try:
        with open('requirements.txt', 'r', encoding='utf-8') as f:
            requirements = f.read()
        
        required_packages = [
            'python-telegram-bot',
            'python-dotenv',
            'sqlalchemy',
            'alembic',
            'psycopg2-binary'
        ]
        
        missing_packages = []
        
        for package in required_packages:
            if package not in requirements:
                missing_packages.append(package)
        
        if missing_packages:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            return False
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É–∫–∞–∑–∞–Ω—ã")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ requirements.txt: {e}")
        return False

def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
    
    try:
        with open('.gitignore', 'r', encoding='utf-8') as f:
            gitignore = f.read()
        
        important_patterns = [
            '.env',
            '__pycache__',
            '*.pyc',
            '*.log',
            '*.db'
        ]
        
        missing_patterns = []
        
        for pattern in important_patterns:
            if pattern not in gitignore:
                missing_patterns.append(pattern)
        
        if missing_patterns:
            logger.warning(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ .gitignore: {', '.join(missing_patterns)}")
        else:
            logger.info("‚úÖ .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ .gitignore: {e}")
        return False

def check_code_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–¥–∞"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–¥–∞...")
    
    python_files = [
        'bot.py',
        'config.py',
        'database_psycopg2.py',
        'game_logic.py',
        'night_actions.py',
        'forest_mafia_settings.py',
        'global_settings.py',
        'database_balance_manager.py'
    ]
    
    syntax_errors = []
    
    for file in python_files:
        if os.path.exists(file):
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    compile(f.read(), file, 'exec')
            except SyntaxError as e:
                syntax_errors.append(f"{file}: {e}")
    
    if syntax_errors:
        logger.error("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
        for error in syntax_errors:
            logger.error(f"  {error}")
        return False
    else:
        logger.info("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ –ù–ê RAILWAY")
    logger.info("=" * 60)
    
    checks = [
        ("–°—Ç–∞—Ç—É—Å Git", check_git_status),
        ("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã", check_required_files),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway", check_railway_config),
        ("Requirements.txt", check_requirements),
        (".gitignore", check_gitignore),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞", check_code_syntax)
    ]
    
    results = []
    
    for check_name, check_func in checks:
        logger.info(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞: {check_name}")
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            results.append((check_name, False))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(results)
    passed = sum(1 for _, result in results if result)
    failed = total - passed
    
    logger.info("\n" + "=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    logger.info("=" * 60)
    logger.info(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total}")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    logger.info(f"üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    logger.info("\nüìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:")
    for check_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        logger.info(f"  {status} {check_name}")
    
    if failed == 0:
        logger.info("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        logger.info("üöÄ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê RAILWAY!")
        logger.info("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –û—Ç–∫—Ä–æ–π—Ç–µ railway.app")
        logger.info("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
        logger.info("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        logger.info("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π")
        return True
    else:
        logger.warning(f"\n‚ö†Ô∏è {failed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
        logger.warning("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
