#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑—ã–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º cooldown –∏ –±–∞—Ç—á–∏–Ω–≥–æ–º
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import re

from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError, BadRequest

from forest_system import ForestManager, ForestConfig, ForestPrivacy, get_forest_manager
from database import get_db_session, Forest, ForestMember

logger = logging.getLogger(__name__)


class SummonStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–æ–∑—ã–≤–∞"""
    SUCCESS = "success"
    COOLDOWN = "cooldown"
    NO_MEMBERS = "no_members"
    NO_AVAILABLE = "no_available"
    PERMISSION_DENIED = "permission_denied"
    FOREST_NOT_FOUND = "forest_not_found"
    ERROR = "error"


@dataclass
class SummonResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑—ã–≤–∞"""
    status: SummonStatus
    message: str
    total_members: int = 0
    notified_members: int = 0
    batches_sent: int = 0
    errors: List[str] = None
    cooldown_remaining: int = 0  # –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–∑—ã–≤–∞


class SummonSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑—ã–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.forest_manager = get_forest_manager()
        self.cooldowns: Dict[Tuple[int, str], datetime] = {}  # (user_id, forest_id) -> last_call_time
        self.member_cooldowns: Dict[Tuple[int, str], datetime] = {}  # (user_id, forest_id) -> last_notified_time
    
    def _check_invoker_permissions(self, invoker_id: int, forest_id: str, config: ForestConfig) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –Ω–∞ —Å–æ–∑—ã–≤"""
        if config.allowed_invokers == "admins":
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            # –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –ª–µ—Å–æ–≤
            session = get_db_session()
            try:
                forest = session.query(Forest).filter(Forest.id == forest_id).first()
                return forest and forest.creator_id == invoker_id
            finally:
                session.close()
        elif config.allowed_invokers == "all":
            return True
        return False
    
    def _check_cooldown(self, invoker_id: int, forest_id: str, cooldown_minutes: int) -> Tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç cooldown –¥–ª—è –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ"""
        key = (invoker_id, forest_id)
        if key in self.cooldowns:
            last_call = self.cooldowns[key]
            time_since_last_call = datetime.utcnow() - last_call
            cooldown_duration = timedelta(minutes=cooldown_minutes)
            
            if time_since_last_call < cooldown_duration:
                remaining_minutes = int((cooldown_duration - time_since_last_call).total_seconds() / 60)
                return False, remaining_minutes
        
        self.cooldowns[key] = datetime.utcnow()
        return True, 0
    
    def _check_member_cooldown(self, member_id: int, forest_id: str, cooldown_minutes: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç cooldown –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        key = (member_id, forest_id)
        if key in self.member_cooldowns:
            last_notified = self.member_cooldowns[key]
            time_since_last_notification = datetime.utcnow() - last_notified
            cooldown_duration = timedelta(minutes=cooldown_minutes)
            
            if time_since_last_notification < cooldown_duration:
                return False
        
        self.member_cooldowns[key] = datetime.utcnow()
        return True
    
    def _format_mentions(self, members: List[ForestMember]) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        mentions = []
        for member in members:
            name = member.first_name or member.username or f"User{member.user_id}"
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏
            escaped_name = name.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            mentions.append(f'<a href="tg://user?id={member.user_id}">{escaped_name}</a>')
        return mentions
    
    def _format_summon_message(self, config: ForestConfig, mentions: List[str], 
                              game_time: str = "20:00", location: str = "–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑—ã–≤–∞"""
        if config.tone == "mystic":
            if config.include_invite_phrase:
                message = (
                    f"üå≤ **–°–û–ë–†–ê–ù–ò–ï –í –õ–ï–°–£!** üå≤\n\n"
                    f"–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –≤–∞—Å –≤ —Å–≤–æ–π –ª–µ—Å! —è –ø—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ —Å–≤–æ–π –ª–µ—Å\n\n"
                    f"{' '.join(mentions)}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {game_time}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {location}\n\n"
                    f"{config.default_cta}"
                )
            else:
                message = (
                    f"üå≤ **–°–û–ë–†–ê–ù–ò–ï –í –õ–ï–°–£!** üå≤\n\n"
                    f"–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –≤–∞—Å –≤ —Å–≤–æ–π –ª–µ—Å!\n\n"
                    f"{' '.join(mentions)}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {game_time}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {location}\n\n"
                    f"{config.default_cta}"
                )
        elif config.tone == "thematic":
            message = (
                f"üå≤ **–°–û–ë–†–ê–ù–ò–ï –í –õ–ï–°–£!** üå≤\n\n"
                f"–í—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã –≤ –õ–µ—Å –∏ –í–æ–ª–∫–∏!\n\n"
                f"{' '.join(mentions)}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {game_time}\n"
                f"üìç –ú–µ—Å—Ç–æ: {location}\n\n"
                f"{config.default_cta}"
            )
        elif config.tone == "mob":
            message = (
                f"üå≤ **–°–û–ë–†–ê–ù–ò–ï!** üå≤\n\n"
                f"–í—Å–µ –≤ –ª–µ—Å! –ò–≥—Ä–∞–µ–º!\n\n"
                f"{' '.join(mentions)}\n\n"
                f"‚è∞ {game_time} | üìç {location}\n\n"
                f"{config.default_cta}"
            )
        else:  # neutral
            message = (
                f"üå≤ **–°–æ–∑—ã–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤** üå≤\n\n"
                f"–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∫ –∏–≥—Ä–µ:\n\n"
                f"{' '.join(mentions)}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {game_time}\n"
                f"üìç –ú–µ—Å—Ç–æ: {location}\n\n"
                f"{config.default_cta}"
            )
        
        return message
    
    async def summon_forest_members(self, forest_id: str, invoker_id: int, chat_id: int, 
                                  config: ForestConfig, game_time: str = "20:00", 
                                  location: str = "–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª") -> SummonResult:
        """–°–æ–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
            if not self._check_invoker_permissions(invoker_id, forest_id, config):
                return SummonResult(
                    status=SummonStatus.PERMISSION_DENIED,
                    message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑—ã–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –ª–µ—Å–∞."
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
            can_summon, cooldown_remaining = self._check_cooldown(
                invoker_id, forest_id, config.cooldown_minutes
            )
            if not can_summon:
                return SummonResult(
                    status=SummonStatus.COOLDOWN,
                    message=f"‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {cooldown_remaining} –º–∏–Ω—É—Ç.",
                    cooldown_remaining=cooldown_remaining
                )
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–µ—Å–∞
            members = await self.forest_manager.get_forest_members(forest_id)
            if not members:
                return SummonResult(
                    status=SummonStatus.NO_MEMBERS,
                    message="‚ùå –í –ª–µ—Å—É –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ cooldown –∏ opt-in
            now = datetime.utcnow()
            available_members = []
            
            for member in members:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º opt-in
                if not member.is_opt_in:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown —É—á–∞—Å—Ç–Ω–∏–∫–∞
                if not self._check_member_cooldown(member.user_id, forest_id, config.cooldown_minutes):
                    continue
                
                available_members.append(member)
            
            if not available_members:
                return SummonResult(
                    status=SummonStatus.NO_AVAILABLE,
                    message="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑—ã–≤–∞ (–≤—Å–µ –Ω–∞ cooldown)."
                )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
            batches = []
            for i in range(0, len(available_members), config.batch_size):
                batch = available_members[i:i + config.batch_size]
                batches.append(batch)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            results = {
                "total_members": len(available_members),
                "notified_members": 0,
                "batches_sent": 0,
                "errors": []
            }
            
            for batch in batches:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    mentions = self._format_mentions(batch)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_text = self._format_summon_message(config, mentions, game_time, location)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = [
                        [
                            InlineKeyboardButton("üå≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_forest_{forest_id}"),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_forest_{forest_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º last_called –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ë–î
                    session = get_db_session()
                    try:
                        for member in batch:
                            member.last_called = now
                        session.commit()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ last_called: {e}")
                        results["errors"].append(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
                    finally:
                        session.close()
                    
                    results["batches_sent"] += 1
                    results["notified_members"] += len(batch)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (500ms)
                    if len(batches) > 1:
                        await asyncio.sleep(0.5)
                        
                except TelegramError as e:
                    error_msg = f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞: {e}"
                    logger.error(error_msg)
                    results["errors"].append(error_msg)
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞: {e}"
                    logger.error(error_msg)
                    results["errors"].append(error_msg)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if results["errors"]:
                message = (
                    f"üå≤ **–°–æ–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏** üå≤\n\n"
                    f"**–£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {results['notified_members']}\n"
                    f"**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞—Ç—á–µ–π:** {results['batches_sent']}\n"
                    f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–µ—Å—É:** {results['total_members']}\n"
                    f"**–û—à–∏–±–æ–∫:** {len(results['errors'])}"
                )
            else:
                message = (
                    f"üå≤ **–°–æ–∑—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!** üå≤\n\n"
                    f"**–£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {results['notified_members']}\n"
                    f"**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞—Ç—á–µ–π:** {results['batches_sent']}\n"
                    f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–µ—Å—É:** {results['total_members']}"
                )
            
            return SummonResult(
                status=SummonStatus.SUCCESS,
                message=message,
                total_members=results["total_members"],
                notified_members=results["notified_members"],
                batches_sent=results["batches_sent"],
                errors=results["errors"]
            )
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑—ã–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return SummonResult(
                status=SummonStatus.ERROR,
                message=f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑—ã–≤–µ: {e}",
                errors=[str(e)]
            )
    
    async def send_private_invite(self, forest_id: str, from_user_id: int, to_user_id: int, 
                                config: ForestConfig) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–µ—Å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º
            session = get_db_session()
            try:
                from_member = session.query(ForestMember).filter(
                    ForestMember.forest_id == forest_id,
                    ForestMember.user_id == from_user_id
                ).first()
                
                if not from_member:
                    return False
                
                from_name = from_member.first_name or from_member.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
            finally:
                session.close()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            if config.include_invite_phrase:
                message = (
                    f"üå≤ –ü—Ä–∏–≤–µ—Ç, {{TARGET}}!\n\n"
                    f"{from_name} —è –ø—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ —Å–≤–æ–π –ª–µ—Å - {config.name}. "
                    f"–ì–æ—Ç–æ–≤ –∫ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º?"
                )
            else:
                message = (
                    f"üå≤ –ü—Ä–∏–≤–µ—Ç, {{TARGET}}!\n\n"
                    f"{from_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –≤ –ª–µ—Å - {config.name}. "
                    f"–ì–æ—Ç–æ–≤ –∫ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º?"
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data=f"accept_invite_{forest_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_invite_{forest_id}")
                ],
                [InlineKeyboardButton("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data=f"ask_info_{forest_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=to_user_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ë–î
            session = get_db_session()
            try:
                from database import ForestInvite
                invite = ForestInvite(
                    forest_id=forest_id,
                    from_user_id=from_user_id,
                    to_user_id=to_user_id,
                    expires_at=datetime.utcnow() + timedelta(hours=24)
                )
                session.add(invite)
                session.commit()
            finally:
                session.close()
            
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return False
    
    def get_cooldown_status(self, user_id: int, forest_id: str, cooldown_minutes: int) -> Tuple[bool, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å cooldown –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._check_cooldown(user_id, forest_id, cooldown_minutes)
    
    def get_member_cooldown_status(self, member_id: int, forest_id: str, cooldown_minutes: int) -> bool:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å cooldown –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        return self._check_member_cooldown(member_id, forest_id, cooldown_minutes)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑—ã–≤–∞
summon_system: Optional[SummonSystem] = None

def init_summon_system(bot: Bot) -> SummonSystem:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–æ–∑—ã–≤–∞"""
    global summon_system
    summon_system = SummonSystem(bot)
    return summon_system

def get_summon_system() -> SummonSystem:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑—ã–≤–∞"""
    if summon_system is None:
        raise RuntimeError("–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑—ã–≤–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return summon_system
