"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –õ–µ—Å–Ω–æ–π –ú–∞—Ñ–∏–∏
–í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
"""

from typing import Optional, Dict, List
from datetime import datetime
from game_logic import Game, Team, Role, Player

class GameEndLogic:
    def __init__(self, game: Game):
        self.game = game
    
    def check_all_win_conditions(self) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None
        """
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
        standard_result = self._check_standard_win_conditions()
        if standard_result:
            return standard_result
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –¥–ª—è –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏
        special_result = self._check_special_win_conditions()
        if special_result:
            return special_result
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        auto_result = self._check_auto_game_end()
        if auto_result:
            return auto_result
        
        return None
    
    def _check_standard_win_conditions(self) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã"""
        alive = self.game.get_alive_players()
        total_alive = len(alive)
        wolves = [p for p in alive if p.role == Role.WOLF]
        wolves_count = len(wolves)

        if total_alive == 0:
            return {
                "winner": Team.HERBIVORES, 
                "reason": "–ù–µ—Ç –≤—ã–∂–∏–≤—à–∏—Ö ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ.",
                "type": "standard"
            }

        if wolves_count > 0 and wolves_count >= (total_alive - wolves_count):
            return {
                "winner": Team.PREDATORS,
                "reason": "üê∫ –ü–æ–±–µ–¥–∞ —Ö–∏—â–Ω–∏–∫–æ–≤: –≤–æ–ª–∫–∏ —Å—Ä–∞–≤–Ω—è–ª–∏—Å—å –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.",
                "type": "standard"
            }

        if wolves_count == 0:
            return {
                "winner": Team.HERBIVORES,
                "reason": "üåø –ü–æ–±–µ–¥–∞ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: –≤–æ–ª–∫–æ–≤ –Ω–µ—Ç.",
                "type": "standard"
            }

        return None
    
    def _check_special_win_conditions(self) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –¥–ª—è –ª–µ—Å–Ω–æ–π –º–∞—Ñ–∏–∏"""
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –õ–µ—Å–Ω–æ–π –í–æ–∑–Ω–∏
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
        return None
    
    def _check_auto_game_end(self) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
        alive_players = self.game.get_alive_players()
        
        # 1. –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
        if len(alive_players) < 3:
            predators = self.game.get_players_by_team(Team.PREDATORS)
            herbivores = self.game.get_players_by_team(Team.HERBIVORES)
            
            if len(predators) > len(herbivores):
                winner = Team.PREDATORS
                reason = f"üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤ ({len(alive_players)})"
            elif len(herbivores) > len(predators):
                winner = Team.HERBIVORES
                reason = f"üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤ ({len(alive_players)})"
            else:
                winner = Team.HERBIVORES
                reason = f"üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –Ω–∏—á—å—è –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤ ({len(alive_players)})"
            
            return {
                "winner": winner,
                "reason": reason,
                "type": "auto",
                "details": f"–û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: {len(alive_players)}"
            }
        
        # 2. –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
        if self.game.game_start_time:
            from datetime import datetime
            game_duration = datetime.now() - self.game.game_start_time
            if game_duration.total_seconds() > 10800:  # 3 —á–∞—Å–∞
                hours = int(game_duration.total_seconds() // 3600)
                minutes = int((game_duration.total_seconds() % 3600) // 60)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                if self.game.game_stats.predator_kills > self.game.game_stats.herbivore_survivals:
                    winner = Team.PREDATORS
                    reason = f"üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –∏–≥—Ä–∞ –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ({hours}—á {minutes}–º)"
                else:
                    winner = Team.HERBIVORES
                    reason = f"üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –∏–≥—Ä–∞ –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ({hours}—á {minutes}–º)"
                
                return {
                    "winner": winner,
                    "reason": reason,
                    "type": "auto",
                    "details": f"–í—Ä–µ–º—è –∏–≥—Ä—ã: {hours}—á {minutes}–º"
                }
        
        # 3. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–æ–≤
        if self.game.current_round > 25:
            if self.game.game_stats.predator_kills > self.game.game_stats.herbivore_survivals:
                winner = Team.PREDATORS
            else:
                winner = Team.HERBIVORES
            
            return {
                "winner": winner,
                "reason": f"üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞—É–Ω–¥–æ–≤ ({self.game.current_round})",
                "type": "auto",
                "details": f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: {self.game.current_round}"
            }
        
        # 4. –ù–∏—á—å—è –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–∏
        predators = self.game.get_players_by_team(Team.PREDATORS)
        herbivores = self.game.get_players_by_team(Team.HERBIVORES)
        
        if len(alive_players) == 2 and len(predators) == len(herbivores):
            return {
                "winner": Team.HERBIVORES,
                "reason": "üå≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –Ω–∏—á—å—è –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–∏ (1 vs 1)",
                "type": "auto",
                "details": "–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ 1 –Ω–∞ 1"
            }
        
        return None
    
    def get_detailed_game_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –∏–≥—Ä—ã"""
        alive_players = self.game.get_alive_players()
        predators = self.game.get_players_by_team(Team.PREDATORS)
        herbivores = self.game.get_players_by_team(Team.HERBIVORES)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
        role_stats = {}
        for role in Role:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
            from role_translator import get_role_name_russian
            role_name = get_role_name_russian(role)
            role_stats[role_name] = len([p for p in alive_players if p.role == role])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è
        survival_stats = {
            "longest_survivor": 0,
            "average_survival": 0
        }
        
        if alive_players:
            survival_nights = [p.consecutive_nights_survived for p in alive_players]
            survival_stats["longest_survivor"] = max(survival_nights)
            survival_stats["average_survival"] = sum(survival_nights) / len(survival_nights)
        
        return {
            "current_round": self.game.current_round,
            "alive_players": len(alive_players),
            "predators": len(predators),
            "herbivores": len(herbivores),
            "role_distribution": role_stats,
            "predator_kills": self.game.game_stats.predator_kills,
            "herbivore_survivals": self.game.game_stats.herbivore_survivals,
            "fox_thefts": self.game.game_stats.fox_thefts,
            "beaver_protections": self.game.game_stats.beaver_protections,
            "survival_stats": survival_stats,
            "game_duration": (datetime.now() - self.game.game_start_time).total_seconds() if self.game.game_start_time else 0
        }
    
    def get_winner_celebration_message(self, result: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ"""
        winner = result["winner"]
        reason = result["reason"]
        details = result.get("details", "")
        win_type = result.get("type", "unknown")
        
        if winner == Team.PREDATORS:
            emoji = "üê∫"
            team_name = "–•–ò–©–ù–ò–ö–ò"
            victory_msg = "–õ–µ—Å —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ö–∏—â–Ω–∏–∫–∞–º! ü¶Å"
        else:
            emoji = "üåø"
            team_name = "–¢–†–ê–í–û–Ø–î–ù–´–ï"
            victory_msg = "–õ–µ—Å —Å–ø–∞—Å–µ–Ω –æ—Ç —Ö–∏—â–Ω–∏–∫–æ–≤! ü¶å"
        
        message = f"""
üéâ {emoji} –ü–û–ë–ï–î–ê {team_name}! {emoji}

{reason}

{details}

{victory_msg}

üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
üìä –¢–∏–ø –ø–æ–±–µ–¥—ã: {win_type}
üéÆ –†–∞—É–Ω–¥: {self.game.current_round}
        """.strip()
        
        return message
    
    def get_game_over_message(self, result: Dict, nuts_info: str = "") -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã"""
        winner = result["winner"]
        reason = result["reason"]
        details = result.get("details", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.get_detailed_game_summary()
        final_summary = self.game.get_final_game_summary()
        
        if winner == Team.PREDATORS:
            emoji = "üê∫"
            team_name = "–•–ò–©–ù–ò–ö–ò"
        else:
            emoji = "üåø"
            team_name = "–¢–†–ê–í–û–Ø–î–ù–´–ï"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏
        players_list = ""
        for player in final_summary["all_players"]:
            status = "üü¢" if player.is_alive else "üî¥"
            role_emoji = self._get_role_emoji(player.role)
            team_emoji = "üê∫" if player.team == Team.PREDATORS else "üåø"
            role_name = self._get_role_name_ru(player.role)
            players_list += f"{status} {role_emoji} {player.username} ({role_name}) {team_emoji}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
        role_stats = ""
        for role_name, players in final_summary["role_distribution"].items():
            if players:
                role_emoji = self._get_role_emoji(players[0].role)
                role_name_ru = self._get_role_name_ru(players[0].role)
                alive_count = len([p for p in players if p.is_alive])
                total_count = len(players)
                role_stats += f"{role_emoji} {role_name_ru}: {alive_count}/{total_count}\n"
        
        if winner == Team.PREDATORS:
            victory_message = "**–ù–∞ –õ–µ—Å –æ–ø—É—Å—Ç–∏–ª–∞—Å—å —Ç—å–º–∞‚Ä¶ –•–∏—â–Ω–∏–∫–∏ –ø–æ—Ö–∏—Ç–∏–ª–∏ –≤—Å–µ—Ö –∑–≤–µ—Ä–µ–π –∏ –ø–æ–±–µ–¥–∏–ª–∏.**"
        else:
            victory_message = "**–õ–µ—Å–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ª–∏–∫—É—é—Ç! –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –∏–º —É–¥–∞–ª–æ—Å—å –∏–∑–≥–Ω–∞—Ç—å –≤—Å–µ—Ö —Ö–∏—â–Ω–∏–∫–æ–≤ –∏–∑ –∏—Ö —É—é—Ç–Ω–æ–≥–æ –õ–µ—Å–∞! –ü–æ–±–µ–¥–∞!**"
        
        message = f"""
üå≤ *–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!* üå≤

{emoji} *–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {team_name}* {emoji}

{victory_message}

üìù *–ü—Ä–∏—á–∏–Ω–∞:* {reason}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:*
üéÆ –†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {stats['current_round']}
üë• –ò–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {stats['alive_players']}
üê∫ –•–∏—â–Ω–∏–∫–æ–≤: {stats['predators']}
üåø –¢—Ä–∞–≤–æ—è–¥–Ω—ã—Ö: {stats['herbivores']}
üíÄ –£–±–∏–π—Å—Ç–≤ —Ö–∏—â–Ω–∏–∫–æ–≤: {stats['predator_kills']}
ü¶ä –ö—Ä–∞–∂ –ª–∏—Å—ã: {stats['fox_thefts']}
ü¶¶ –ó–∞—â–∏—Ç –±–æ–±—Ä–∞: {stats['beaver_protections']}

üé≠ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π:*
{role_stats}
üë• *–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:*
{players_list}
{details}

{nuts_info}

---
üéÆ *–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/join` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π –∏–≥—Ä–µ!
        """.strip()
        
        return message
    
    def _get_role_emoji(self, role: Role) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏"""
        role_emojis = {
            Role.WOLF: "üê∫",
            Role.FOX: "ü¶ä",
            Role.HARE: "üê∞",
            Role.MOLE: "ü¶´",
            Role.BEAVER: "ü¶¶"
        }
        return role_emojis.get(role, "‚ùì")
    
    def _get_role_name_ru(self, role: Role) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        role_names = {
            Role.WOLF: "–í–æ–ª–∫",
            Role.FOX: "–õ–∏—Å–∞",
            Role.HARE: "–ó–∞—è—Ü",
            Role.MOLE: "–ö—Ä–æ—Ç",
            Role.BEAVER: "–ë–æ–±–µ—Ä"
        }
        return role_names.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
